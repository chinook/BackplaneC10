
BackplaneC10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051b0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08005388  08005388  00015388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053b0  080053b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080053b0  080053b0  000153b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053b8  080053b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053b8  080053b8  000153b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053bc  080053bc  000153bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080053c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  2000000c  080053cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  080053cc  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015549  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002519  00000000  00000000  00035585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001238  00000000  00000000  00037aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001188  00000000  00000000  00038cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000227fa  00000000  00000000  00039e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000155f1  00000000  00000000  0005c65a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db668  00000000  00000000  00071c4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014d2b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004eb8  00000000  00000000  0014d308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005370 	.word	0x08005370

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005370 	.word	0x08005370

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <GPIO_SendI2C>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

HAL_StatusTypeDef GPIO_SendI2C(uint8_t addr, uint8_t reg, uint8_t data)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af02      	add	r7, sp, #8
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
 800051a:	460b      	mov	r3, r1
 800051c:	71bb      	strb	r3, [r7, #6]
 800051e:	4613      	mov	r3, r2
 8000520:	717b      	strb	r3, [r7, #5]
  uint8_t buf[2];

  buf[0] = reg;
 8000522:	79bb      	ldrb	r3, [r7, #6]
 8000524:	733b      	strb	r3, [r7, #12]
  buf[1] = data;
 8000526:	797b      	ldrb	r3, [r7, #5]
 8000528:	737b      	strb	r3, [r7, #13]

  return HAL_I2C_Master_Transmit(&hi2c1, addr, buf, sizeof(buf), HAL_MAX_DELAY);
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	b299      	uxth	r1, r3
 800052e:	f107 020c 	add.w	r2, r7, #12
 8000532:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	2302      	movs	r3, #2
 800053a:	4804      	ldr	r0, [pc, #16]	; (800054c <GPIO_SendI2C+0x3c>)
 800053c:	f002 ffde 	bl	80034fc <HAL_I2C_Master_Transmit>
 8000540:	4603      	mov	r3, r0
}
 8000542:	4618      	mov	r0, r3
 8000544:	3710      	adds	r7, #16
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20000084 	.word	0x20000084

08000550 <InitGPIOs>:
	uint16_t result = (buf[0] << 8) | buf[1];
	return result;
}

void InitGPIOs()
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
  //
  // Default values for GPIO registers
  //

  // GPIO directions
  gpio0_dir0 = 0;
 8000556:	4b5e      	ldr	r3, [pc, #376]	; (80006d0 <InitGPIOs+0x180>)
 8000558:	2200      	movs	r2, #0
 800055a:	701a      	strb	r2, [r3, #0]
  gpio0_dir1 = 0b11110000;
 800055c:	4b5d      	ldr	r3, [pc, #372]	; (80006d4 <InitGPIOs+0x184>)
 800055e:	22f0      	movs	r2, #240	; 0xf0
 8000560:	701a      	strb	r2, [r3, #0]
  gpio1_dir0 = 0;
 8000562:	4b5d      	ldr	r3, [pc, #372]	; (80006d8 <InitGPIOs+0x188>)
 8000564:	2200      	movs	r2, #0
 8000566:	701a      	strb	r2, [r3, #0]
  gpio1_dir1 = 0;
 8000568:	4b5c      	ldr	r3, [pc, #368]	; (80006dc <InitGPIOs+0x18c>)
 800056a:	2200      	movs	r2, #0
 800056c:	701a      	strb	r2, [r3, #0]

  // GPIO *input* polarity
  gpio0_pol0 = 0;
 800056e:	4b5c      	ldr	r3, [pc, #368]	; (80006e0 <InitGPIOs+0x190>)
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]
  gpio0_pol1 = 0;
 8000574:	4b5b      	ldr	r3, [pc, #364]	; (80006e4 <InitGPIOs+0x194>)
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]
  gpio1_pol0 = 0;
 800057a:	4b5b      	ldr	r3, [pc, #364]	; (80006e8 <InitGPIOs+0x198>)
 800057c:	2200      	movs	r2, #0
 800057e:	701a      	strb	r2, [r3, #0]
  gpio1_pol1 = 0;
 8000580:	4b5a      	ldr	r3, [pc, #360]	; (80006ec <InitGPIOs+0x19c>)
 8000582:	2200      	movs	r2, #0
 8000584:	701a      	strb	r2, [r3, #0]

  // GPIO reset to 0
  gpio0_gp0 = gpio0_gp1 = 0;
 8000586:	4b5a      	ldr	r3, [pc, #360]	; (80006f0 <InitGPIOs+0x1a0>)
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]
 800058c:	4b58      	ldr	r3, [pc, #352]	; (80006f0 <InitGPIOs+0x1a0>)
 800058e:	781a      	ldrb	r2, [r3, #0]
 8000590:	4b58      	ldr	r3, [pc, #352]	; (80006f4 <InitGPIOs+0x1a4>)
 8000592:	701a      	strb	r2, [r3, #0]
  // Enable 3V3 and 5V have inverted enable logic (1 = disable for 5V and 3V3)
  gpio1_gp0 = gpio1_gp1 = 0b11001100;
 8000594:	4b58      	ldr	r3, [pc, #352]	; (80006f8 <InitGPIOs+0x1a8>)
 8000596:	22cc      	movs	r2, #204	; 0xcc
 8000598:	701a      	strb	r2, [r3, #0]
 800059a:	4b57      	ldr	r3, [pc, #348]	; (80006f8 <InitGPIOs+0x1a8>)
 800059c:	781a      	ldrb	r2, [r3, #0]
 800059e:	4b57      	ldr	r3, [pc, #348]	; (80006fc <InitGPIOs+0x1ac>)
 80005a0:	701a      	strb	r2, [r3, #0]
  //

  //HAL_StatusTypeDef ret;
  //uint8_t buf[12];

  uint8_t error = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	71fb      	strb	r3, [r7, #7]
  error |= GPIO_SendI2C(GPIO0_ADDR, GPIO_DIR_GP0, gpio0_dir0);
 80005a6:	4b4a      	ldr	r3, [pc, #296]	; (80006d0 <InitGPIOs+0x180>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	461a      	mov	r2, r3
 80005ac:	2106      	movs	r1, #6
 80005ae:	2042      	movs	r0, #66	; 0x42
 80005b0:	f7ff ffae 	bl	8000510 <GPIO_SendI2C>
 80005b4:	4603      	mov	r3, r0
 80005b6:	461a      	mov	r2, r3
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	4313      	orrs	r3, r2
 80005bc:	71fb      	strb	r3, [r7, #7]
  error |= GPIO_SendI2C(GPIO0_ADDR, GPIO_DIR_GP1, gpio0_dir1);
 80005be:	4b45      	ldr	r3, [pc, #276]	; (80006d4 <InitGPIOs+0x184>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	461a      	mov	r2, r3
 80005c4:	2107      	movs	r1, #7
 80005c6:	2042      	movs	r0, #66	; 0x42
 80005c8:	f7ff ffa2 	bl	8000510 <GPIO_SendI2C>
 80005cc:	4603      	mov	r3, r0
 80005ce:	461a      	mov	r2, r3
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	4313      	orrs	r3, r2
 80005d4:	71fb      	strb	r3, [r7, #7]
  error |= GPIO_SendI2C(GPIO1_ADDR, GPIO_DIR_GP0, gpio1_dir0);
 80005d6:	4b40      	ldr	r3, [pc, #256]	; (80006d8 <InitGPIOs+0x188>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	461a      	mov	r2, r3
 80005dc:	2106      	movs	r1, #6
 80005de:	2040      	movs	r0, #64	; 0x40
 80005e0:	f7ff ff96 	bl	8000510 <GPIO_SendI2C>
 80005e4:	4603      	mov	r3, r0
 80005e6:	461a      	mov	r2, r3
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	4313      	orrs	r3, r2
 80005ec:	71fb      	strb	r3, [r7, #7]
  error |= GPIO_SendI2C(GPIO1_ADDR, GPIO_DIR_GP1, gpio1_dir1);
 80005ee:	4b3b      	ldr	r3, [pc, #236]	; (80006dc <InitGPIOs+0x18c>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	461a      	mov	r2, r3
 80005f4:	2107      	movs	r1, #7
 80005f6:	2040      	movs	r0, #64	; 0x40
 80005f8:	f7ff ff8a 	bl	8000510 <GPIO_SendI2C>
 80005fc:	4603      	mov	r3, r0
 80005fe:	461a      	mov	r2, r3
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	4313      	orrs	r3, r2
 8000604:	71fb      	strb	r3, [r7, #7]

  error |= GPIO_SendI2C(GPIO0_ADDR, GPIO_POL_GP0, gpio0_pol0);
 8000606:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <InitGPIOs+0x190>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	461a      	mov	r2, r3
 800060c:	2104      	movs	r1, #4
 800060e:	2042      	movs	r0, #66	; 0x42
 8000610:	f7ff ff7e 	bl	8000510 <GPIO_SendI2C>
 8000614:	4603      	mov	r3, r0
 8000616:	461a      	mov	r2, r3
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	4313      	orrs	r3, r2
 800061c:	71fb      	strb	r3, [r7, #7]
  error |= GPIO_SendI2C(GPIO0_ADDR, GPIO_POL_GP1, gpio0_pol1);
 800061e:	4b31      	ldr	r3, [pc, #196]	; (80006e4 <InitGPIOs+0x194>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	461a      	mov	r2, r3
 8000624:	2105      	movs	r1, #5
 8000626:	2042      	movs	r0, #66	; 0x42
 8000628:	f7ff ff72 	bl	8000510 <GPIO_SendI2C>
 800062c:	4603      	mov	r3, r0
 800062e:	461a      	mov	r2, r3
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	4313      	orrs	r3, r2
 8000634:	71fb      	strb	r3, [r7, #7]
  error |= GPIO_SendI2C(GPIO1_ADDR, GPIO_POL_GP0, gpio1_pol0);
 8000636:	4b2c      	ldr	r3, [pc, #176]	; (80006e8 <InitGPIOs+0x198>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	461a      	mov	r2, r3
 800063c:	2104      	movs	r1, #4
 800063e:	2040      	movs	r0, #64	; 0x40
 8000640:	f7ff ff66 	bl	8000510 <GPIO_SendI2C>
 8000644:	4603      	mov	r3, r0
 8000646:	461a      	mov	r2, r3
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	4313      	orrs	r3, r2
 800064c:	71fb      	strb	r3, [r7, #7]
  error |= GPIO_SendI2C(GPIO1_ADDR, GPIO_POL_GP1, gpio1_pol1);
 800064e:	4b27      	ldr	r3, [pc, #156]	; (80006ec <InitGPIOs+0x19c>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	461a      	mov	r2, r3
 8000654:	2105      	movs	r1, #5
 8000656:	2040      	movs	r0, #64	; 0x40
 8000658:	f7ff ff5a 	bl	8000510 <GPIO_SendI2C>
 800065c:	4603      	mov	r3, r0
 800065e:	461a      	mov	r2, r3
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	4313      	orrs	r3, r2
 8000664:	71fb      	strb	r3, [r7, #7]

  error |= GPIO_SendI2C(GPIO0_ADDR, GPIO_GP0, gpio0_gp0);
 8000666:	4b23      	ldr	r3, [pc, #140]	; (80006f4 <InitGPIOs+0x1a4>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	461a      	mov	r2, r3
 800066c:	2100      	movs	r1, #0
 800066e:	2042      	movs	r0, #66	; 0x42
 8000670:	f7ff ff4e 	bl	8000510 <GPIO_SendI2C>
 8000674:	4603      	mov	r3, r0
 8000676:	461a      	mov	r2, r3
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	4313      	orrs	r3, r2
 800067c:	71fb      	strb	r3, [r7, #7]
  error |= GPIO_SendI2C(GPIO0_ADDR, GPIO_GP1, gpio0_gp1);
 800067e:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <InitGPIOs+0x1a0>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	2101      	movs	r1, #1
 8000686:	2042      	movs	r0, #66	; 0x42
 8000688:	f7ff ff42 	bl	8000510 <GPIO_SendI2C>
 800068c:	4603      	mov	r3, r0
 800068e:	461a      	mov	r2, r3
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	4313      	orrs	r3, r2
 8000694:	71fb      	strb	r3, [r7, #7]
  error |= GPIO_SendI2C(GPIO1_ADDR, GPIO_GP0, gpio1_gp0);
 8000696:	4b19      	ldr	r3, [pc, #100]	; (80006fc <InitGPIOs+0x1ac>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	461a      	mov	r2, r3
 800069c:	2100      	movs	r1, #0
 800069e:	2040      	movs	r0, #64	; 0x40
 80006a0:	f7ff ff36 	bl	8000510 <GPIO_SendI2C>
 80006a4:	4603      	mov	r3, r0
 80006a6:	461a      	mov	r2, r3
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	71fb      	strb	r3, [r7, #7]
  error |= GPIO_SendI2C(GPIO1_ADDR, GPIO_GP1, gpio1_gp1);
 80006ae:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <InitGPIOs+0x1a8>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	461a      	mov	r2, r3
 80006b4:	2101      	movs	r1, #1
 80006b6:	2040      	movs	r0, #64	; 0x40
 80006b8:	f7ff ff2a 	bl	8000510 <GPIO_SendI2C>
 80006bc:	4603      	mov	r3, r0
 80006be:	461a      	mov	r2, r3
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	4313      	orrs	r3, r2
 80006c4:	71fb      	strb	r3, [r7, #7]
  if (error)
  {
	  // TODO
  }

}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000243 	.word	0x20000243
 80006d4:	20000240 	.word	0x20000240
 80006d8:	20000199 	.word	0x20000199
 80006dc:	20000244 	.word	0x20000244
 80006e0:	20000198 	.word	0x20000198
 80006e4:	20000081 	.word	0x20000081
 80006e8:	20000196 	.word	0x20000196
 80006ec:	20000242 	.word	0x20000242
 80006f0:	20000195 	.word	0x20000195
 80006f4:	20000122 	.word	0x20000122
 80006f8:	20000194 	.word	0x20000194
 80006fc:	20000120 	.word	0x20000120

08000700 <DisableAllVoltages>:

void DisableAllVoltages()
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	gpio1_gp0 = 0b11001100;
 8000704:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <DisableAllVoltages+0x34>)
 8000706:	22cc      	movs	r2, #204	; 0xcc
 8000708:	701a      	strb	r2, [r3, #0]
	gpio1_gp1 = 0b11001100;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <DisableAllVoltages+0x38>)
 800070c:	22cc      	movs	r2, #204	; 0xcc
 800070e:	701a      	strb	r2, [r3, #0]
	GPIO_SendI2C(GPIO1_ADDR, GPIO_GP0, gpio1_gp0);
 8000710:	4b08      	ldr	r3, [pc, #32]	; (8000734 <DisableAllVoltages+0x34>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	461a      	mov	r2, r3
 8000716:	2100      	movs	r1, #0
 8000718:	2040      	movs	r0, #64	; 0x40
 800071a:	f7ff fef9 	bl	8000510 <GPIO_SendI2C>
	GPIO_SendI2C(GPIO1_ADDR, GPIO_GP1, gpio1_gp1);
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <DisableAllVoltages+0x38>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	461a      	mov	r2, r3
 8000724:	2101      	movs	r1, #1
 8000726:	2040      	movs	r0, #64	; 0x40
 8000728:	f7ff fef2 	bl	8000510 <GPIO_SendI2C>

	// Disable Volant 24V
	DisableVolant24V();
 800072c:	f000 f88c 	bl	8000848 <DisableVolant24V>
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000120 	.word	0x20000120
 8000738:	20000194 	.word	0x20000194

0800073c <EnableVoltage>:

// board = 1,2,3,4
//  0,1,2 = Board C10 1,2,3
//  3     = Board C9
void EnableVoltage(uint8_t board, uint8_t voltage)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	460a      	mov	r2, r1
 8000746:	71fb      	strb	r3, [r7, #7]
 8000748:	4613      	mov	r3, r2
 800074a:	71bb      	strb	r3, [r7, #6]
	// Special case for board C9 - 24V,15V
	if (board == BOARD_C9 && voltage == VOLTAGE_24V)
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d111      	bne.n	8000776 <EnableVoltage+0x3a>
 8000752:	79bb      	ldrb	r3, [r7, #6]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d10e      	bne.n	8000776 <EnableVoltage+0x3a>
	{
		gpio1_gp0 |= (1 << 1);
 8000758:	4b39      	ldr	r3, [pc, #228]	; (8000840 <EnableVoltage+0x104>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	b2da      	uxtb	r2, r3
 8000762:	4b37      	ldr	r3, [pc, #220]	; (8000840 <EnableVoltage+0x104>)
 8000764:	701a      	strb	r2, [r3, #0]
		GPIO_SendI2C(GPIO1_ADDR, GPIO_GP0, gpio1_gp0);
 8000766:	4b36      	ldr	r3, [pc, #216]	; (8000840 <EnableVoltage+0x104>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	2100      	movs	r1, #0
 800076e:	2040      	movs	r0, #64	; 0x40
 8000770:	f7ff fece 	bl	8000510 <GPIO_SendI2C>
		return;
 8000774:	e061      	b.n	800083a <EnableVoltage+0xfe>
	}

	unsigned value = board * 4 + voltage;
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	009a      	lsls	r2, r3, #2
 800077a:	79bb      	ldrb	r3, [r7, #6]
 800077c:	4413      	add	r3, r2
 800077e:	60fb      	str	r3, [r7, #12]
	unsigned gp = value / (unsigned)8;
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	08db      	lsrs	r3, r3, #3
 8000784:	60bb      	str	r3, [r7, #8]
	if (gp)
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d02c      	beq.n	80007e6 <EnableVoltage+0xaa>
	{
		// Inverted logic for 5V and 3V3
		if (voltage == VOLTAGE_5V || voltage == VOLTAGE_3V3)
 800078c:	79bb      	ldrb	r3, [r7, #6]
 800078e:	2b02      	cmp	r3, #2
 8000790:	d002      	beq.n	8000798 <EnableVoltage+0x5c>
 8000792:	79bb      	ldrb	r3, [r7, #6]
 8000794:	2b03      	cmp	r3, #3
 8000796:	d110      	bne.n	80007ba <EnableVoltage+0x7e>
			gpio1_gp1 &= ~(1 << (value - 8));
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	3b08      	subs	r3, #8
 800079c:	2201      	movs	r2, #1
 800079e:	fa02 f303 	lsl.w	r3, r2, r3
 80007a2:	b25b      	sxtb	r3, r3
 80007a4:	43db      	mvns	r3, r3
 80007a6:	b25a      	sxtb	r2, r3
 80007a8:	4b26      	ldr	r3, [pc, #152]	; (8000844 <EnableVoltage+0x108>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	b25b      	sxtb	r3, r3
 80007ae:	4013      	ands	r3, r2
 80007b0:	b25b      	sxtb	r3, r3
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	4b23      	ldr	r3, [pc, #140]	; (8000844 <EnableVoltage+0x108>)
 80007b6:	701a      	strb	r2, [r3, #0]
 80007b8:	e00d      	b.n	80007d6 <EnableVoltage+0x9a>
		else
			gpio1_gp1 |= (1 << (value - 8));
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	3b08      	subs	r3, #8
 80007be:	2201      	movs	r2, #1
 80007c0:	fa02 f303 	lsl.w	r3, r2, r3
 80007c4:	b25a      	sxtb	r2, r3
 80007c6:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <EnableVoltage+0x108>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	b25b      	sxtb	r3, r3
 80007cc:	4313      	orrs	r3, r2
 80007ce:	b25b      	sxtb	r3, r3
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <EnableVoltage+0x108>)
 80007d4:	701a      	strb	r2, [r3, #0]
		GPIO_SendI2C(GPIO1_ADDR, GPIO_GP1, gpio1_gp1);
 80007d6:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <EnableVoltage+0x108>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	461a      	mov	r2, r3
 80007dc:	2101      	movs	r1, #1
 80007de:	2040      	movs	r0, #64	; 0x40
 80007e0:	f7ff fe96 	bl	8000510 <GPIO_SendI2C>
 80007e4:	e029      	b.n	800083a <EnableVoltage+0xfe>
	}
	else
	{
		// Inverted logic for 5V and 3V3
		if (voltage == VOLTAGE_5V || voltage == VOLTAGE_3V3)
 80007e6:	79bb      	ldrb	r3, [r7, #6]
 80007e8:	2b02      	cmp	r3, #2
 80007ea:	d002      	beq.n	80007f2 <EnableVoltage+0xb6>
 80007ec:	79bb      	ldrb	r3, [r7, #6]
 80007ee:	2b03      	cmp	r3, #3
 80007f0:	d10f      	bne.n	8000812 <EnableVoltage+0xd6>
			gpio1_gp0 &= ~(1 << value);
 80007f2:	2201      	movs	r2, #1
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	fa02 f303 	lsl.w	r3, r2, r3
 80007fa:	b25b      	sxtb	r3, r3
 80007fc:	43db      	mvns	r3, r3
 80007fe:	b25a      	sxtb	r2, r3
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <EnableVoltage+0x104>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	b25b      	sxtb	r3, r3
 8000806:	4013      	ands	r3, r2
 8000808:	b25b      	sxtb	r3, r3
 800080a:	b2da      	uxtb	r2, r3
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <EnableVoltage+0x104>)
 800080e:	701a      	strb	r2, [r3, #0]
 8000810:	e00c      	b.n	800082c <EnableVoltage+0xf0>
		else
			gpio1_gp0 |= (1 << value);
 8000812:	2201      	movs	r2, #1
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	b25a      	sxtb	r2, r3
 800081c:	4b08      	ldr	r3, [pc, #32]	; (8000840 <EnableVoltage+0x104>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	b25b      	sxtb	r3, r3
 8000822:	4313      	orrs	r3, r2
 8000824:	b25b      	sxtb	r3, r3
 8000826:	b2da      	uxtb	r2, r3
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <EnableVoltage+0x104>)
 800082a:	701a      	strb	r2, [r3, #0]
		GPIO_SendI2C(GPIO1_ADDR, GPIO_GP0, gpio1_gp0);
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <EnableVoltage+0x104>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	2100      	movs	r1, #0
 8000834:	2040      	movs	r0, #64	; 0x40
 8000836:	f7ff fe6b 	bl	8000510 <GPIO_SendI2C>
	}
}
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000120 	.word	0x20000120
 8000844:	20000194 	.word	0x20000194

08000848 <DisableVolant24V>:
{
	HAL_GPIO_WritePin(Volant_Enable24V_GPIO_Port, Volant_Enable24V_Pin, 0);
}

void DisableVolant24V()
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Volant_Enable24V_GPIO_Port, Volant_Enable24V_Pin, 1);
 800084c:	2201      	movs	r2, #1
 800084e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000852:	4802      	ldr	r0, [pc, #8]	; (800085c <DisableVolant24V+0x14>)
 8000854:	f002 fcdc 	bl	8003210 <HAL_GPIO_WritePin>
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40020c00 	.word	0x40020c00

08000860 <SetLed>:

void SetLed(uint8_t led, uint8_t value)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	460a      	mov	r2, r1
 800086a:	71fb      	strb	r3, [r7, #7]
 800086c:	4613      	mov	r3, r2
 800086e:	71bb      	strb	r3, [r7, #6]
	if (led >= NUM_LEDS)
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	2b06      	cmp	r3, #6
 8000874:	d827      	bhi.n	80008c6 <SetLed+0x66>
		return;

	if (value)
 8000876:	79bb      	ldrb	r3, [r7, #6]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d00d      	beq.n	8000898 <SetLed+0x38>
		gpio0_gp0 |= (1 << led);
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	2201      	movs	r2, #1
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	b25a      	sxtb	r2, r3
 8000886:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <SetLed+0x70>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	b25b      	sxtb	r3, r3
 800088c:	4313      	orrs	r3, r2
 800088e:	b25b      	sxtb	r3, r3
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <SetLed+0x70>)
 8000894:	701a      	strb	r2, [r3, #0]
 8000896:	e00e      	b.n	80008b6 <SetLed+0x56>
	else
		gpio0_gp0 &= ~(1 << led);
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	2201      	movs	r2, #1
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	b25b      	sxtb	r3, r3
 80008a2:	43db      	mvns	r3, r3
 80008a4:	b25a      	sxtb	r2, r3
 80008a6:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <SetLed+0x70>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	b25b      	sxtb	r3, r3
 80008ac:	4013      	ands	r3, r2
 80008ae:	b25b      	sxtb	r3, r3
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <SetLed+0x70>)
 80008b4:	701a      	strb	r2, [r3, #0]

	GPIO_SendI2C(GPIO0_ADDR, GPIO_GP0, gpio0_gp0);
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <SetLed+0x70>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	461a      	mov	r2, r3
 80008bc:	2100      	movs	r1, #0
 80008be:	2042      	movs	r0, #66	; 0x42
 80008c0:	f7ff fe26 	bl	8000510 <GPIO_SendI2C>
 80008c4:	e000      	b.n	80008c8 <SetLed+0x68>
		return;
 80008c6:	bf00      	nop
}
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000122 	.word	0x20000122

080008d4 <ToggleLed>:

void ToggleLed(uint8_t led)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
	if (led >= NUM_LEDS)
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	2b06      	cmp	r3, #6
 80008e2:	d819      	bhi.n	8000918 <ToggleLed+0x44>
		return;

	uint8_t value = (gpio0_gp0 & (1 << led)) >> led;
 80008e4:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <ToggleLed+0x4c>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	4619      	mov	r1, r3
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	2201      	movs	r2, #1
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	ea01 0203 	and.w	r2, r1, r3
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	fa42 f303 	asr.w	r3, r2, r3
 80008fc:	73fb      	strb	r3, [r7, #15]
	SetLed(led, !value);
 80008fe:	7bfb      	ldrb	r3, [r7, #15]
 8000900:	2b00      	cmp	r3, #0
 8000902:	bf0c      	ite	eq
 8000904:	2301      	moveq	r3, #1
 8000906:	2300      	movne	r3, #0
 8000908:	b2db      	uxtb	r3, r3
 800090a:	461a      	mov	r2, r3
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	4611      	mov	r1, r2
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff ffa5 	bl	8000860 <SetLed>
 8000916:	e000      	b.n	800091a <ToggleLed+0x46>
		return;
 8000918:	bf00      	nop
}
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000122 	.word	0x20000122

08000924 <TransmitCAN>:

HAL_StatusTypeDef TransmitCAN(uint8_t id, uint8_t* buf, uint8_t size)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	6039      	str	r1, [r7, #0]
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef msg;
	msg.StdId = id;
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	60fb      	str	r3, [r7, #12]
	msg.IDE = CAN_ID_STD;
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]
	msg.RTR = CAN_RTR_DATA;
 800093c:	2300      	movs	r3, #0
 800093e:	61bb      	str	r3, [r7, #24]
	msg.DLC = size;
 8000940:	79bb      	ldrb	r3, [r7, #6]
 8000942:	61fb      	str	r3, [r7, #28]
	msg.TransmitGlobalTime = DISABLE;
 8000944:	2300      	movs	r3, #0
 8000946:	f887 3020 	strb.w	r3, [r7, #32]

	uint32_t mb;
	HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(&hcan1, &msg, buf, &mb);
 800094a:	f107 0308 	add.w	r3, r7, #8
 800094e:	f107 010c 	add.w	r1, r7, #12
 8000952:	683a      	ldr	r2, [r7, #0]
 8000954:	480a      	ldr	r0, [pc, #40]	; (8000980 <TransmitCAN+0x5c>)
 8000956:	f001 fd51 	bl	80023fc <HAL_CAN_AddTxMessage>
 800095a:	4603      	mov	r3, r0
 800095c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (ret != HAL_OK)
 8000960:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000964:	2b00      	cmp	r3, #0
 8000966:	d002      	beq.n	800096e <TransmitCAN+0x4a>
		return ret;
 8000968:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800096c:	e004      	b.n	8000978 <TransmitCAN+0x54>

	// Update the CAN led
	ToggleLed(LED_CAN);
 800096e:	2002      	movs	r0, #2
 8000970:	f7ff ffb0 	bl	80008d4 <ToggleLed>
	return ret;
 8000974:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000978:	4618      	mov	r0, r3
 800097a:	3728      	adds	r7, #40	; 0x28
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	200001fc 	.word	0x200001fc

08000984 <SendUART>:
	HAL_Delay(50);
	HAL_GPIO_WritePin(Speaker_GPIO_Port, Speaker_Pin, 0);
}

HAL_StatusTypeDef SendUART(uint8_t* buffer, size_t size)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
	return HAL_UART_Transmit(&huart2, buffer, size, HAL_MAX_DELAY);
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	b29a      	uxth	r2, r3
 8000992:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	4803      	ldr	r0, [pc, #12]	; (80009a8 <SendUART+0x24>)
 800099a:	f004 f9e4 	bl	8004d66 <HAL_UART_Transmit>
 800099e:	4603      	mov	r3, r0
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	200001b8 	.word	0x200001b8

080009ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ac:	b590      	push	{r4, r7, lr}
 80009ae:	b089      	sub	sp, #36	; 0x24
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	// Init global variables
	timer_flag = 0;
 80009b2:	4b56      	ldr	r3, [pc, #344]	; (8000b0c <main+0x160>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]
	pb1_pressed = 0;
 80009b8:	4b55      	ldr	r3, [pc, #340]	; (8000b10 <main+0x164>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	701a      	strb	r2, [r3, #0]
	pb2_pressed = 0;
 80009be:	4b55      	ldr	r3, [pc, #340]	; (8000b14 <main+0x168>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]

	can1_recv_flag = 0;
 80009c4:	4b54      	ldr	r3, [pc, #336]	; (8000b18 <main+0x16c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ca:	f000 fe7b 	bl	80016c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ce:	f000 f8af 	bl	8000b30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d2:	f000 fad7 	bl	8000f84 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009d6:	f000 f9ff 	bl	8000dd8 <MX_I2C1_Init>
  MX_CAN1_Init();
 80009da:	f000 f965 	bl	8000ca8 <MX_CAN1_Init>
  MX_CAN2_Init();
 80009de:	f000 f9c5 	bl	8000d6c <MX_CAN2_Init>
  MX_I2C3_Init();
 80009e2:	f000 fa27 	bl	8000e34 <MX_I2C3_Init>
  MX_TIM3_Init();
 80009e6:	f000 fa53 	bl	8000e90 <MX_TIM3_Init>
  MX_ADC1_Init();
 80009ea:	f000 f90b 	bl	8000c04 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80009ee:	f000 fa9f 	bl	8000f30 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  InitGPIOs();
 80009f2:	f7ff fdad 	bl	8000550 <InitGPIOs>
  HAL_Delay(10);
 80009f6:	200a      	movs	r0, #10
 80009f8:	f000 fed6 	bl	80017a8 <HAL_Delay>

  DisableAllVoltages();
 80009fc:	f7ff fe80 	bl	8000700 <DisableAllVoltages>
  HAL_Delay(10);
 8000a00:	200a      	movs	r0, #10
 8000a02:	f000 fed1 	bl	80017a8 <HAL_Delay>

  EnableVoltage(BOARD_C10_1, VOLTAGE_5V);
  EnableVoltage(BOARD_C10_2, VOLTAGE_5V);
  EnableVoltage(BOARD_C10_3, VOLTAGE_5V);*/

  EnableVoltage(BOARD_C9, VOLTAGE_3V3);
 8000a06:	2103      	movs	r1, #3
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f7ff fe97 	bl	800073c <EnableVoltage>
  EnableVoltage(BOARD_C9, VOLTAGE_5V);
 8000a0e:	2102      	movs	r1, #2
 8000a10:	2000      	movs	r0, #0
 8000a12:	f7ff fe93 	bl	800073c <EnableVoltage>
  EnableVoltage(BOARD_C9, VOLTAGE_24V);
 8000a16:	2100      	movs	r1, #0
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f7ff fe8f 	bl	800073c <EnableVoltage>

  EnableVoltage(BOARD_C10_2, VOLTAGE_3V3);
 8000a1e:	2103      	movs	r1, #3
 8000a20:	2002      	movs	r0, #2
 8000a22:	f7ff fe8b 	bl	800073c <EnableVoltage>
  EnableVoltage(BOARD_C10_2, VOLTAGE_5V);
 8000a26:	2102      	movs	r1, #2
 8000a28:	2002      	movs	r0, #2
 8000a2a:	f7ff fe87 	bl	800073c <EnableVoltage>
  EnableVoltage(BOARD_C10_2, VOLTAGE_24V);
 8000a2e:	2100      	movs	r1, #0
 8000a30:	2002      	movs	r0, #2
 8000a32:	f7ff fe83 	bl	800073c <EnableVoltage>

  //HAL_StatusTypeDef ret;

  while (1)
  {
	  if (timer_flag)
 8000a36:	4b35      	ldr	r3, [pc, #212]	; (8000b0c <main+0x160>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d033      	beq.n	8000aa6 <main+0xfa>
	  {
		  timer_flag = 0;
 8000a3e:	4b33      	ldr	r3, [pc, #204]	; (8000b0c <main+0x160>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]

		  // Blink led warning as living-led
		  ToggleLed(LED_WARN);
 8000a44:	2001      	movs	r0, #1
 8000a46:	f7ff ff45 	bl	80008d4 <ToggleLed>

		  // Send CAN frame
		  static uint8_t x = 0;
		  uint8_t data[4] = { 0,1,2,x++ };
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	743b      	strb	r3, [r7, #16]
 8000a4e:	2301      	movs	r3, #1
 8000a50:	747b      	strb	r3, [r7, #17]
 8000a52:	2302      	movs	r3, #2
 8000a54:	74bb      	strb	r3, [r7, #18]
 8000a56:	4b31      	ldr	r3, [pc, #196]	; (8000b1c <main+0x170>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	1c5a      	adds	r2, r3, #1
 8000a5c:	b2d1      	uxtb	r1, r2
 8000a5e:	4a2f      	ldr	r2, [pc, #188]	; (8000b1c <main+0x170>)
 8000a60:	7011      	strb	r1, [r2, #0]
 8000a62:	74fb      	strb	r3, [r7, #19]
		  HAL_StatusTypeDef can_success = TransmitCAN(0xAA, data, 4);
 8000a64:	f107 0310 	add.w	r3, r7, #16
 8000a68:	2204      	movs	r2, #4
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	20aa      	movs	r0, #170	; 0xaa
 8000a6e:	f7ff ff59 	bl	8000924 <TransmitCAN>
 8000a72:	4603      	mov	r3, r0
 8000a74:	77fb      	strb	r3, [r7, #31]
		  if (can_success != HAL_OK)
 8000a76:	7ffb      	ldrb	r3, [r7, #31]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d004      	beq.n	8000a86 <main+0xda>
		  {
			  SetLed(LED_ERROR, 1);
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f7ff feee 	bl	8000860 <SetLed>
 8000a84:	e003      	b.n	8000a8e <main+0xe2>
		  }
		  else
		  {
			  SetLed(LED_ERROR, 0);
 8000a86:	2100      	movs	r1, #0
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f7ff fee9 	bl	8000860 <SetLed>
		  }

		  // Send UART Message
		  uint8_t msg[] = "Hello World!";
 8000a8e:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <main+0x174>)
 8000a90:	463c      	mov	r4, r7
 8000a92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a94:	c407      	stmia	r4!, {r0, r1, r2}
 8000a96:	7023      	strb	r3, [r4, #0]
		  HAL_StatusTypeDef uart_success = SendUART(msg, sizeof(msg));
 8000a98:	463b      	mov	r3, r7
 8000a9a:	210d      	movs	r1, #13
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ff71 	bl	8000984 <SendUART>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	77bb      	strb	r3, [r7, #30]
			  // ErrorHandler();
		  }
	  }

	  // Check which boards are connected
	  uint8_t hs1 = HAL_GPIO_ReadPin(HS1_GPIO_Port, HS1_Pin);  // Board C10_1
 8000aa6:	2110      	movs	r1, #16
 8000aa8:	481e      	ldr	r0, [pc, #120]	; (8000b24 <main+0x178>)
 8000aaa:	f002 fb99 	bl	80031e0 <HAL_GPIO_ReadPin>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	777b      	strb	r3, [r7, #29]
	  uint8_t hs2 = HAL_GPIO_ReadPin(HS2_GPIO_Port, HS2_Pin);  // Board C10_2
 8000ab2:	2120      	movs	r1, #32
 8000ab4:	481b      	ldr	r0, [pc, #108]	; (8000b24 <main+0x178>)
 8000ab6:	f002 fb93 	bl	80031e0 <HAL_GPIO_ReadPin>
 8000aba:	4603      	mov	r3, r0
 8000abc:	773b      	strb	r3, [r7, #28]
	  uint8_t hs3 = HAL_GPIO_ReadPin(HS3_GPIO_Port, HS3_Pin);  // Board C10_3
 8000abe:	2140      	movs	r1, #64	; 0x40
 8000ac0:	4818      	ldr	r0, [pc, #96]	; (8000b24 <main+0x178>)
 8000ac2:	f002 fb8d 	bl	80031e0 <HAL_GPIO_ReadPin>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	76fb      	strb	r3, [r7, #27]
	  uint8_t hs4 = HAL_GPIO_ReadPin(HS4_GPIO_Port, HS4_Pin);  // Board C9
 8000aca:	2180      	movs	r1, #128	; 0x80
 8000acc:	4815      	ldr	r0, [pc, #84]	; (8000b24 <main+0x178>)
 8000ace:	f002 fb87 	bl	80031e0 <HAL_GPIO_ReadPin>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	76bb      	strb	r3, [r7, #26]
	  //SetLed(LED2, hs2);
	  //SetLed(LED3, hs3);
	  //SetLed(LED4, hs4);

	  // Get Volant BTS428L2 status (low on error)
	  uint8_t volant_status = HAL_GPIO_ReadPin(Volant_Status_GPIO_Port, Volant_Status_Pin);
 8000ad6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ada:	4813      	ldr	r0, [pc, #76]	; (8000b28 <main+0x17c>)
 8000adc:	f002 fb80 	bl	80031e0 <HAL_GPIO_ReadPin>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	767b      	strb	r3, [r7, #25]
	  if (volant_status == 0)
 8000ae4:	7e7b      	ldrb	r3, [r7, #25]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d101      	bne.n	8000aee <main+0x142>
	  {
		  // Disable volant voltage
		  DisableVolant24V();
 8000aea:	f7ff fead 	bl	8000848 <DisableVolant24V>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	  uint16_t raw_imon = HAL_ADC_GetValue(&hadc1);
	  */

	  // Check messages received on CANA bus
	  if (can1_recv_flag)
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <main+0x16c>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d005      	beq.n	8000b02 <main+0x156>
	  {
		  can1_recv_flag = 0;
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <main+0x16c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]

		  uint32_t id = pRxHeader.StdId;
 8000afc:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <main+0x180>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	617b      	str	r3, [r7, #20]
	  }

	  // Execute main loop every 10ms
	  HAL_Delay(10);
 8000b02:	200a      	movs	r0, #10
 8000b04:	f000 fe50 	bl	80017a8 <HAL_Delay>
  {
 8000b08:	e795      	b.n	8000a36 <main+0x8a>
 8000b0a:	bf00      	nop
 8000b0c:	2000019a 	.word	0x2000019a
 8000b10:	20000197 	.word	0x20000197
 8000b14:	20000080 	.word	0x20000080
 8000b18:	20000241 	.word	0x20000241
 8000b1c:	20000028 	.word	0x20000028
 8000b20:	08005388 	.word	0x08005388
 8000b24:	40020800 	.word	0x40020800
 8000b28:	40020c00 	.word	0x40020c00
 8000b2c:	2000019c 	.word	0x2000019c

08000b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b094      	sub	sp, #80	; 0x50
 8000b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	2234      	movs	r2, #52	; 0x34
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f004 fc0e 	bl	8005360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b44:	f107 0308 	add.w	r3, r7, #8
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b54:	2300      	movs	r3, #0
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	4b28      	ldr	r3, [pc, #160]	; (8000bfc <SystemClock_Config+0xcc>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	4a27      	ldr	r2, [pc, #156]	; (8000bfc <SystemClock_Config+0xcc>)
 8000b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b62:	6413      	str	r3, [r2, #64]	; 0x40
 8000b64:	4b25      	ldr	r3, [pc, #148]	; (8000bfc <SystemClock_Config+0xcc>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	4b22      	ldr	r3, [pc, #136]	; (8000c00 <SystemClock_Config+0xd0>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a21      	ldr	r2, [pc, #132]	; (8000c00 <SystemClock_Config+0xd0>)
 8000b7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b7e:	6013      	str	r3, [r2, #0]
 8000b80:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <SystemClock_Config+0xd0>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b90:	2301      	movs	r3, #1
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b94:	2310      	movs	r3, #16
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ba0:	2308      	movs	r3, #8
 8000ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000ba4:	2360      	movs	r3, #96	; 0x60
 8000ba6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ba8:	2304      	movs	r3, #4
 8000baa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bac:	2302      	movs	r3, #2
 8000bae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb4:	f107 031c 	add.w	r3, r7, #28
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f003 f977 	bl	8003eac <HAL_RCC_OscConfig>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000bc4:	f000 fac0 	bl	8001148 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc8:	230f      	movs	r3, #15
 8000bca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bdc:	f107 0308 	add.w	r3, r7, #8
 8000be0:	2101      	movs	r1, #1
 8000be2:	4618      	mov	r0, r3
 8000be4:	f002 ff92 	bl	8003b0c <HAL_RCC_ClockConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000bee:	f000 faab 	bl	8001148 <Error_Handler>
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	3750      	adds	r7, #80	; 0x50
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40007000 	.word	0x40007000

08000c04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c16:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <MX_ADC1_Init+0x98>)
 8000c18:	4a21      	ldr	r2, [pc, #132]	; (8000ca0 <MX_ADC1_Init+0x9c>)
 8000c1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c1c:	4b1f      	ldr	r3, [pc, #124]	; (8000c9c <MX_ADC1_Init+0x98>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c22:	4b1e      	ldr	r3, [pc, #120]	; (8000c9c <MX_ADC1_Init+0x98>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c28:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <MX_ADC1_Init+0x98>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c2e:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <MX_ADC1_Init+0x98>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c34:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <MX_ADC1_Init+0x98>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c3c:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <MX_ADC1_Init+0x98>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c42:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <MX_ADC1_Init+0x98>)
 8000c44:	4a17      	ldr	r2, [pc, #92]	; (8000ca4 <MX_ADC1_Init+0xa0>)
 8000c46:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <MX_ADC1_Init+0x98>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c4e:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <MX_ADC1_Init+0x98>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <MX_ADC1_Init+0x98>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <MX_ADC1_Init+0x98>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c62:	480e      	ldr	r0, [pc, #56]	; (8000c9c <MX_ADC1_Init+0x98>)
 8000c64:	f000 fdc4 	bl	80017f0 <HAL_ADC_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000c6e:	f000 fa6b 	bl	8001148 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000c72:	2306      	movs	r3, #6
 8000c74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c76:	2301      	movs	r3, #1
 8000c78:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c7e:	463b      	mov	r3, r7
 8000c80:	4619      	mov	r1, r3
 8000c82:	4806      	ldr	r0, [pc, #24]	; (8000c9c <MX_ADC1_Init+0x98>)
 8000c84:	f000 ff56 	bl	8001b34 <HAL_ADC_ConfigChannel>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000c8e:	f000 fa5b 	bl	8001148 <Error_Handler>
  /* USER CODE BEGIN ADC1_Init 2 */
  // HAL_ADC_Start_IT(&hadc1);

  /* USER CODE END ADC1_Init 2 */

}
 8000c92:	bf00      	nop
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000124 	.word	0x20000124
 8000ca0:	40012000 	.word	0x40012000
 8000ca4:	0f000001 	.word	0x0f000001

08000ca8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000cae:	4b2d      	ldr	r3, [pc, #180]	; (8000d64 <MX_CAN1_Init+0xbc>)
 8000cb0:	4a2d      	ldr	r2, [pc, #180]	; (8000d68 <MX_CAN1_Init+0xc0>)
 8000cb2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8000cb4:	4b2b      	ldr	r3, [pc, #172]	; (8000d64 <MX_CAN1_Init+0xbc>)
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000cba:	4b2a      	ldr	r3, [pc, #168]	; (8000d64 <MX_CAN1_Init+0xbc>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000cc0:	4b28      	ldr	r3, [pc, #160]	; (8000d64 <MX_CAN1_Init+0xbc>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000cc6:	4b27      	ldr	r3, [pc, #156]	; (8000d64 <MX_CAN1_Init+0xbc>)
 8000cc8:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000ccc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000cce:	4b25      	ldr	r3, [pc, #148]	; (8000d64 <MX_CAN1_Init+0xbc>)
 8000cd0:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000cd4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000cd6:	4b23      	ldr	r3, [pc, #140]	; (8000d64 <MX_CAN1_Init+0xbc>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000cdc:	4b21      	ldr	r3, [pc, #132]	; (8000d64 <MX_CAN1_Init+0xbc>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ce2:	4b20      	ldr	r3, [pc, #128]	; (8000d64 <MX_CAN1_Init+0xbc>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ce8:	4b1e      	ldr	r3, [pc, #120]	; (8000d64 <MX_CAN1_Init+0xbc>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000cee:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <MX_CAN1_Init+0xbc>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000cf4:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <MX_CAN1_Init+0xbc>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000cfa:	481a      	ldr	r0, [pc, #104]	; (8000d64 <MX_CAN1_Init+0xbc>)
 8000cfc:	f001 f952 	bl	8001fa4 <HAL_CAN_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000d06:	f000 fa1f 	bl	8001148 <Error_Handler>
  /* USER CODE BEGIN CAN1_Init 2 */

  // CAN Filters explained : https://schulz-m.github.io/2017/03/23/stm32-can-id-filter/

  CAN_FilterTypeDef sf;
  sf.FilterMaskIdHigh = 0x0000;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60bb      	str	r3, [r7, #8]
  sf.FilterMaskIdLow = 0x0000;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
  sf.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
  sf.FilterBank = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
  sf.FilterMode = CAN_FILTERMODE_IDMASK;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61bb      	str	r3, [r7, #24]
  sf.FilterScale = CAN_FILTERSCALE_32BIT;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	61fb      	str	r3, [r7, #28]
  sf.FilterActivation = CAN_FILTER_ENABLE;
 8000d22:	2301      	movs	r3, #1
 8000d24:	623b      	str	r3, [r7, #32]
  if (HAL_CAN_ConfigFilter(&hcan1, &sf) != HAL_OK)
 8000d26:	463b      	mov	r3, r7
 8000d28:	4619      	mov	r1, r3
 8000d2a:	480e      	ldr	r0, [pc, #56]	; (8000d64 <MX_CAN1_Init+0xbc>)
 8000d2c:	f001 fa36 	bl	800219c <HAL_CAN_ConfigFilter>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_CAN1_Init+0x92>
  {
	  Error_Handler();
 8000d36:	f000 fa07 	bl	8001148 <Error_Handler>
  }
  //if (HAL_CAN_RegisterCallback(&hcan1, HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID, can_irq))
  //{
  //	  Error_Handler();
  //}
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000d3a:	480a      	ldr	r0, [pc, #40]	; (8000d64 <MX_CAN1_Init+0xbc>)
 8000d3c:	f001 fb1a 	bl	8002374 <HAL_CAN_Start>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_CAN1_Init+0xa2>
  {
      Error_Handler();
 8000d46:	f000 f9ff 	bl	8001148 <Error_Handler>
  }
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000d4a:	2102      	movs	r1, #2
 8000d4c:	4805      	ldr	r0, [pc, #20]	; (8000d64 <MX_CAN1_Init+0xbc>)
 8000d4e:	f001 fd42 	bl	80027d6 <HAL_CAN_ActivateNotification>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_CAN1_Init+0xb4>
  {
      Error_Handler();
 8000d58:	f000 f9f6 	bl	8001148 <Error_Handler>
  }

  /* USER CODE END CAN1_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	3728      	adds	r7, #40	; 0x28
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	200001fc 	.word	0x200001fc
 8000d68:	40006400 	.word	0x40006400

08000d6c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000d70:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <MX_CAN2_Init+0x64>)
 8000d72:	4a18      	ldr	r2, [pc, #96]	; (8000dd4 <MX_CAN2_Init+0x68>)
 8000d74:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 12;
 8000d76:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <MX_CAN2_Init+0x64>)
 8000d78:	220c      	movs	r2, #12
 8000d7a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000d7c:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <MX_CAN2_Init+0x64>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d82:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <MX_CAN2_Init+0x64>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <MX_CAN2_Init+0x64>)
 8000d8a:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000d8e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <MX_CAN2_Init+0x64>)
 8000d92:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000d96:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000d98:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <MX_CAN2_Init+0x64>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <MX_CAN2_Init+0x64>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000da4:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <MX_CAN2_Init+0x64>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <MX_CAN2_Init+0x64>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <MX_CAN2_Init+0x64>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <MX_CAN2_Init+0x64>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000dbc:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <MX_CAN2_Init+0x64>)
 8000dbe:	f001 f8f1 	bl	8001fa4 <HAL_CAN_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000dc8:	f000 f9be 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	2000016c 	.word	0x2000016c
 8000dd4:	40006800 	.word	0x40006800

08000dd8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <MX_I2C1_Init+0x50>)
 8000dde:	4a13      	ldr	r2, [pc, #76]	; (8000e2c <MX_I2C1_Init+0x54>)
 8000de0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000de2:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <MX_I2C1_Init+0x50>)
 8000de4:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <MX_I2C1_Init+0x58>)
 8000de6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <MX_I2C1_Init+0x50>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <MX_I2C1_Init+0x50>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_I2C1_Init+0x50>)
 8000df6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dfa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <MX_I2C1_Init+0x50>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <MX_I2C1_Init+0x50>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e08:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <MX_I2C1_Init+0x50>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <MX_I2C1_Init+0x50>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e14:	4804      	ldr	r0, [pc, #16]	; (8000e28 <MX_I2C1_Init+0x50>)
 8000e16:	f002 fa2d 	bl	8003274 <HAL_I2C_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e20:	f000 f992 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000084 	.word	0x20000084
 8000e2c:	40005400 	.word	0x40005400
 8000e30:	000186a0 	.word	0x000186a0

08000e34 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <MX_I2C3_Init+0x50>)
 8000e3a:	4a13      	ldr	r2, [pc, #76]	; (8000e88 <MX_I2C3_Init+0x54>)
 8000e3c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <MX_I2C3_Init+0x50>)
 8000e40:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <MX_I2C3_Init+0x58>)
 8000e42:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <MX_I2C3_Init+0x50>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <MX_I2C3_Init+0x50>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <MX_I2C3_Init+0x50>)
 8000e52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e56:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e58:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <MX_I2C3_Init+0x50>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <MX_I2C3_Init+0x50>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <MX_I2C3_Init+0x50>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <MX_I2C3_Init+0x50>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e70:	4804      	ldr	r0, [pc, #16]	; (8000e84 <MX_I2C3_Init+0x50>)
 8000e72:	f002 f9ff 	bl	8003274 <HAL_I2C_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000e7c:	f000 f964 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	2000002c 	.word	0x2000002c
 8000e88:	40005c00 	.word	0x40005c00
 8000e8c:	000186a0 	.word	0x000186a0

08000e90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e96:	f107 0308 	add.w	r3, r7, #8
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000eac:	4b1e      	ldr	r3, [pc, #120]	; (8000f28 <MX_TIM3_Init+0x98>)
 8000eae:	4a1f      	ldr	r2, [pc, #124]	; (8000f2c <MX_TIM3_Init+0x9c>)
 8000eb0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160;
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <MX_TIM3_Init+0x98>)
 8000eb4:	22a0      	movs	r2, #160	; 0xa0
 8000eb6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <MX_TIM3_Init+0x98>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <MX_TIM3_Init+0x98>)
 8000ec0:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000ec4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <MX_TIM3_Init+0x98>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ecc:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <MX_TIM3_Init+0x98>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ed2:	4815      	ldr	r0, [pc, #84]	; (8000f28 <MX_TIM3_Init+0x98>)
 8000ed4:	f003 fa6e 	bl	80043b4 <HAL_TIM_Base_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000ede:	f000 f933 	bl	8001148 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ee8:	f107 0308 	add.w	r3, r7, #8
 8000eec:	4619      	mov	r1, r3
 8000eee:	480e      	ldr	r0, [pc, #56]	; (8000f28 <MX_TIM3_Init+0x98>)
 8000ef0:	f003 fc28 	bl	8004744 <HAL_TIM_ConfigClockSource>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000efa:	f000 f925 	bl	8001148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efe:	2300      	movs	r3, #0
 8000f00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f06:	463b      	mov	r3, r7
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4807      	ldr	r0, [pc, #28]	; (8000f28 <MX_TIM3_Init+0x98>)
 8000f0c:	f003 fe4e 	bl	8004bac <HAL_TIMEx_MasterConfigSynchronization>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000f16:	f000 f917 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000f1a:	4803      	ldr	r0, [pc, #12]	; (8000f28 <MX_TIM3_Init+0x98>)
 8000f1c:	f003 fa9a 	bl	8004454 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200000d8 	.word	0x200000d8
 8000f2c:	40000400 	.word	0x40000400

08000f30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f36:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <MX_USART2_UART_Init+0x50>)
 8000f38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f54:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f56:	220c      	movs	r2, #12
 8000f58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f66:	4805      	ldr	r0, [pc, #20]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f68:	f003 feb0 	bl	8004ccc <HAL_UART_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f72:	f000 f8e9 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200001b8 	.word	0x200001b8
 8000f80:	40004400 	.word	0x40004400

08000f84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	4b5a      	ldr	r3, [pc, #360]	; (8001108 <MX_GPIO_Init+0x184>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a59      	ldr	r2, [pc, #356]	; (8001108 <MX_GPIO_Init+0x184>)
 8000fa4:	f043 0310 	orr.w	r3, r3, #16
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b57      	ldr	r3, [pc, #348]	; (8001108 <MX_GPIO_Init+0x184>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0310 	and.w	r3, r3, #16
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b53      	ldr	r3, [pc, #332]	; (8001108 <MX_GPIO_Init+0x184>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a52      	ldr	r2, [pc, #328]	; (8001108 <MX_GPIO_Init+0x184>)
 8000fc0:	f043 0304 	orr.w	r3, r3, #4
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b50      	ldr	r3, [pc, #320]	; (8001108 <MX_GPIO_Init+0x184>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0304 	and.w	r3, r3, #4
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	4b4c      	ldr	r3, [pc, #304]	; (8001108 <MX_GPIO_Init+0x184>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a4b      	ldr	r2, [pc, #300]	; (8001108 <MX_GPIO_Init+0x184>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b49      	ldr	r3, [pc, #292]	; (8001108 <MX_GPIO_Init+0x184>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	4b45      	ldr	r3, [pc, #276]	; (8001108 <MX_GPIO_Init+0x184>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a44      	ldr	r2, [pc, #272]	; (8001108 <MX_GPIO_Init+0x184>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b42      	ldr	r3, [pc, #264]	; (8001108 <MX_GPIO_Init+0x184>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	603b      	str	r3, [r7, #0]
 800100e:	4b3e      	ldr	r3, [pc, #248]	; (8001108 <MX_GPIO_Init+0x184>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a3d      	ldr	r2, [pc, #244]	; (8001108 <MX_GPIO_Init+0x184>)
 8001014:	f043 0308 	orr.w	r3, r3, #8
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b3b      	ldr	r3, [pc, #236]	; (8001108 <MX_GPIO_Init+0x184>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0308 	and.w	r3, r3, #8
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Speaker_GPIO_Port, Speaker_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	2108      	movs	r1, #8
 800102a:	4838      	ldr	r0, [pc, #224]	; (800110c <MX_GPIO_Init+0x188>)
 800102c:	f002 f8f0 	bl	8003210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_PWR_RPI_Pin|CLK_PWR_RPI_Pin|SHUTDOWN_RPI_Pin, GPIO_PIN_RESET);
 8001030:	2200      	movs	r2, #0
 8001032:	f242 0103 	movw	r1, #8195	; 0x2003
 8001036:	4836      	ldr	r0, [pc, #216]	; (8001110 <MX_GPIO_Init+0x18c>)
 8001038:	f002 f8ea 	bl	8003210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Volant_Enable24V_Pin|UART_TXDEn_Pin|FT230_RESET_Pin|USB_PROG_EN_Pin
 800103c:	2200      	movs	r2, #0
 800103e:	f243 41f8 	movw	r1, #13560	; 0x34f8
 8001042:	4834      	ldr	r0, [pc, #208]	; (8001114 <MX_GPIO_Init+0x190>)
 8001044:	f002 f8e4 	bl	8003210 <HAL_GPIO_WritePin>
                          |USB_Enable1_Pin|USB_Enable2_Pin|USB_Enable3_Pin|USB_Enable4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Speaker_Pin */
  GPIO_InitStruct.Pin = Speaker_Pin;
 8001048:	2308      	movs	r3, #8
 800104a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104c:	2301      	movs	r3, #1
 800104e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Speaker_GPIO_Port, &GPIO_InitStruct);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4619      	mov	r1, r3
 800105e:	482b      	ldr	r0, [pc, #172]	; (800110c <MX_GPIO_Init+0x188>)
 8001060:	f001 ff2a 	bl	8002eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_PWR_RPI_Pin CLK_PWR_RPI_Pin SHUTDOWN_RPI_Pin */
  GPIO_InitStruct.Pin = EN_PWR_RPI_Pin|CLK_PWR_RPI_Pin|SHUTDOWN_RPI_Pin;
 8001064:	f242 0303 	movw	r3, #8195	; 0x2003
 8001068:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106a:	2301      	movs	r3, #1
 800106c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4619      	mov	r1, r3
 800107c:	4824      	ldr	r0, [pc, #144]	; (8001110 <MX_GPIO_Init+0x18c>)
 800107e:	f001 ff1b 	bl	8002eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RUNNING_RPI_Pin DETECT_PWR_RPI_Pin HS1_Pin HS2_Pin
                           HS3_Pin HS4_Pin */
  GPIO_InitStruct.Pin = RUNNING_RPI_Pin|DETECT_PWR_RPI_Pin|HS1_Pin|HS2_Pin
 8001082:	23fc      	movs	r3, #252	; 0xfc
 8001084:	617b      	str	r3, [r7, #20]
                          |HS3_Pin|HS4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001086:	2300      	movs	r3, #0
 8001088:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	481e      	ldr	r0, [pc, #120]	; (8001110 <MX_GPIO_Init+0x18c>)
 8001096:	f001 ff0f 	bl	8002eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Volant_Enable24V_Pin UART_TXDEn_Pin FT230_RESET_Pin USB_PROG_EN_Pin
                           USB_Enable1_Pin USB_Enable2_Pin USB_Enable3_Pin USB_Enable4_Pin */
  GPIO_InitStruct.Pin = Volant_Enable24V_Pin|UART_TXDEn_Pin|FT230_RESET_Pin|USB_PROG_EN_Pin
 800109a:	f243 43f8 	movw	r3, #13560	; 0x34f8
 800109e:	617b      	str	r3, [r7, #20]
                          |USB_Enable1_Pin|USB_Enable2_Pin|USB_Enable3_Pin|USB_Enable4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4619      	mov	r1, r3
 80010b2:	4818      	ldr	r0, [pc, #96]	; (8001114 <MX_GPIO_Init+0x190>)
 80010b4:	f001 ff00 	bl	8002eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Volant_Status_Pin INT_IO1_Pin INT_IO2_Pin */
  GPIO_InitStruct.Pin = Volant_Status_Pin|INT_IO1_Pin|INT_IO2_Pin;
 80010b8:	f640 0303 	movw	r3, #2051	; 0x803
 80010bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	4811      	ldr	r0, [pc, #68]	; (8001114 <MX_GPIO_Init+0x190>)
 80010ce:	f001 fef3 	bl	8002eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2_Pin PB1_Pin */
  GPIO_InitStruct.Pin = PB2_Pin|PB1_Pin;
 80010d2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80010d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010d8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4619      	mov	r1, r3
 80010e8:	480a      	ldr	r0, [pc, #40]	; (8001114 <MX_GPIO_Init+0x190>)
 80010ea:	f001 fee5 	bl	8002eb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	2028      	movs	r0, #40	; 0x28
 80010f4:	f001 fea9 	bl	8002e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010f8:	2028      	movs	r0, #40	; 0x28
 80010fa:	f001 fec2 	bl	8002e82 <HAL_NVIC_EnableIRQ>

}
 80010fe:	bf00      	nop
 8001100:	3728      	adds	r7, #40	; 0x28
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800
 800110c:	40021000 	.word	0x40021000
 8001110:	40020800 	.word	0x40020800
 8001114:	40020c00 	.word	0x40020c00

08001118 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

// EXTI Line External Interrupt ISR Handler CallBack
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_14) // PD_14
 8001122:	88fb      	ldrh	r3, [r7, #6]
 8001124:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001128:	d103      	bne.n	8001132 <HAL_GPIO_EXTI_Callback+0x1a>
    {
    	// LED4
    	//gpio0_gp0 = (gpio0_gp0 ^ (1 << 5));
    	//GPIO_SendI2C(GPIO0_ADDR, GPIO_GP0, gpio0_gp0);
    	ToggleLed(LED1);
 800112a:	2006      	movs	r0, #6
 800112c:	f7ff fbd2 	bl	80008d4 <ToggleLed>
    	// LED3
    	//gpio0_gp0 = (gpio0_gp0 ^ (1 << 6));
    	//GPIO_SendI2C(GPIO0_ADDR, GPIO_GP0, gpio0_gp0);
    	ToggleLed(LED2);
    }
}
 8001130:	e006      	b.n	8001140 <HAL_GPIO_EXTI_Callback+0x28>
    else if (GPIO_Pin == GPIO_PIN_15) // PD_15
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001138:	d102      	bne.n	8001140 <HAL_GPIO_EXTI_Callback+0x28>
    	ToggleLed(LED2);
 800113a:	2005      	movs	r0, #5
 800113c:	f7ff fbca 	bl	80008d4 <ToggleLed>
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
	...

08001158 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <HAL_MspInit+0x4c>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	4a0f      	ldr	r2, [pc, #60]	; (80011a4 <HAL_MspInit+0x4c>)
 8001168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116c:	6453      	str	r3, [r2, #68]	; 0x44
 800116e:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <HAL_MspInit+0x4c>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	603b      	str	r3, [r7, #0]
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <HAL_MspInit+0x4c>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	4a08      	ldr	r2, [pc, #32]	; (80011a4 <HAL_MspInit+0x4c>)
 8001184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001188:	6413      	str	r3, [r2, #64]	; 0x40
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_MspInit+0x4c>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800

080011a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a1b      	ldr	r2, [pc, #108]	; (8001234 <HAL_ADC_MspInit+0x8c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d12f      	bne.n	800122a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <HAL_ADC_MspInit+0x90>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	4a19      	ldr	r2, [pc, #100]	; (8001238 <HAL_ADC_MspInit+0x90>)
 80011d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d8:	6453      	str	r3, [r2, #68]	; 0x44
 80011da:	4b17      	ldr	r3, [pc, #92]	; (8001238 <HAL_ADC_MspInit+0x90>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b13      	ldr	r3, [pc, #76]	; (8001238 <HAL_ADC_MspInit+0x90>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a12      	ldr	r2, [pc, #72]	; (8001238 <HAL_ADC_MspInit+0x90>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <HAL_ADC_MspInit+0x90>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001202:	2340      	movs	r3, #64	; 0x40
 8001204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001206:	2303      	movs	r3, #3
 8001208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4619      	mov	r1, r3
 8001214:	4809      	ldr	r0, [pc, #36]	; (800123c <HAL_ADC_MspInit+0x94>)
 8001216:	f001 fe4f 	bl	8002eb8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	2012      	movs	r0, #18
 8001220:	f001 fe13 	bl	8002e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001224:	2012      	movs	r0, #18
 8001226:	f001 fe2c 	bl	8002e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800122a:	bf00      	nop
 800122c:	3728      	adds	r7, #40	; 0x28
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40012000 	.word	0x40012000
 8001238:	40023800 	.word	0x40023800
 800123c:	40020000 	.word	0x40020000

08001240 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08c      	sub	sp, #48	; 0x30
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a37      	ldr	r2, [pc, #220]	; (800133c <HAL_CAN_MspInit+0xfc>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d135      	bne.n	80012ce <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	61bb      	str	r3, [r7, #24]
 8001266:	4b36      	ldr	r3, [pc, #216]	; (8001340 <HAL_CAN_MspInit+0x100>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	4a35      	ldr	r2, [pc, #212]	; (8001340 <HAL_CAN_MspInit+0x100>)
 800126c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001270:	6413      	str	r3, [r2, #64]	; 0x40
 8001272:	4b33      	ldr	r3, [pc, #204]	; (8001340 <HAL_CAN_MspInit+0x100>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800127a:	61bb      	str	r3, [r7, #24]
 800127c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	4b2f      	ldr	r3, [pc, #188]	; (8001340 <HAL_CAN_MspInit+0x100>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a2e      	ldr	r2, [pc, #184]	; (8001340 <HAL_CAN_MspInit+0x100>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b2c      	ldr	r3, [pc, #176]	; (8001340 <HAL_CAN_MspInit+0x100>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800129a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800129e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a8:	2303      	movs	r3, #3
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80012ac:	2309      	movs	r3, #9
 80012ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	4619      	mov	r1, r3
 80012b6:	4823      	ldr	r0, [pc, #140]	; (8001344 <HAL_CAN_MspInit+0x104>)
 80012b8:	f001 fdfe 	bl	8002eb8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80012bc:	2200      	movs	r2, #0
 80012be:	2100      	movs	r1, #0
 80012c0:	2014      	movs	r0, #20
 80012c2:	f001 fdc2 	bl	8002e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80012c6:	2014      	movs	r0, #20
 80012c8:	f001 fddb 	bl	8002e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80012cc:	e031      	b.n	8001332 <HAL_CAN_MspInit+0xf2>
  else if(hcan->Instance==CAN2)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <HAL_CAN_MspInit+0x108>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d12c      	bne.n	8001332 <HAL_CAN_MspInit+0xf2>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80012d8:	2300      	movs	r3, #0
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	4b18      	ldr	r3, [pc, #96]	; (8001340 <HAL_CAN_MspInit+0x100>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	4a17      	ldr	r2, [pc, #92]	; (8001340 <HAL_CAN_MspInit+0x100>)
 80012e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012e6:	6413      	str	r3, [r2, #64]	; 0x40
 80012e8:	4b15      	ldr	r3, [pc, #84]	; (8001340 <HAL_CAN_MspInit+0x100>)
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	4b11      	ldr	r3, [pc, #68]	; (8001340 <HAL_CAN_MspInit+0x100>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fc:	4a10      	ldr	r2, [pc, #64]	; (8001340 <HAL_CAN_MspInit+0x100>)
 80012fe:	f043 0302 	orr.w	r3, r3, #2
 8001302:	6313      	str	r3, [r2, #48]	; 0x30
 8001304:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <HAL_CAN_MspInit+0x100>)
 8001306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001310:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131e:	2303      	movs	r3, #3
 8001320:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001322:	2309      	movs	r3, #9
 8001324:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001326:	f107 031c 	add.w	r3, r7, #28
 800132a:	4619      	mov	r1, r3
 800132c:	4807      	ldr	r0, [pc, #28]	; (800134c <HAL_CAN_MspInit+0x10c>)
 800132e:	f001 fdc3 	bl	8002eb8 <HAL_GPIO_Init>
}
 8001332:	bf00      	nop
 8001334:	3730      	adds	r7, #48	; 0x30
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40006400 	.word	0x40006400
 8001340:	40023800 	.word	0x40023800
 8001344:	40020000 	.word	0x40020000
 8001348:	40006800 	.word	0x40006800
 800134c:	40020400 	.word	0x40020400

08001350 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08c      	sub	sp, #48	; 0x30
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 031c 	add.w	r3, r7, #28
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a42      	ldr	r2, [pc, #264]	; (8001478 <HAL_I2C_MspInit+0x128>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d12c      	bne.n	80013cc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]
 8001376:	4b41      	ldr	r3, [pc, #260]	; (800147c <HAL_I2C_MspInit+0x12c>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a40      	ldr	r2, [pc, #256]	; (800147c <HAL_I2C_MspInit+0x12c>)
 800137c:	f043 0302 	orr.w	r3, r3, #2
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b3e      	ldr	r3, [pc, #248]	; (800147c <HAL_I2C_MspInit+0x12c>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	61bb      	str	r3, [r7, #24]
 800138c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800138e:	23c0      	movs	r3, #192	; 0xc0
 8001390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001392:	2312      	movs	r3, #18
 8001394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001396:	2301      	movs	r3, #1
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800139e:	2304      	movs	r3, #4
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	4619      	mov	r1, r3
 80013a8:	4835      	ldr	r0, [pc, #212]	; (8001480 <HAL_I2C_MspInit+0x130>)
 80013aa:	f001 fd85 	bl	8002eb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	4b32      	ldr	r3, [pc, #200]	; (800147c <HAL_I2C_MspInit+0x12c>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	4a31      	ldr	r2, [pc, #196]	; (800147c <HAL_I2C_MspInit+0x12c>)
 80013b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013bc:	6413      	str	r3, [r2, #64]	; 0x40
 80013be:	4b2f      	ldr	r3, [pc, #188]	; (800147c <HAL_I2C_MspInit+0x12c>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80013ca:	e050      	b.n	800146e <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a2c      	ldr	r2, [pc, #176]	; (8001484 <HAL_I2C_MspInit+0x134>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d14b      	bne.n	800146e <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	4b28      	ldr	r3, [pc, #160]	; (800147c <HAL_I2C_MspInit+0x12c>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a27      	ldr	r2, [pc, #156]	; (800147c <HAL_I2C_MspInit+0x12c>)
 80013e0:	f043 0304 	orr.w	r3, r3, #4
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b25      	ldr	r3, [pc, #148]	; (800147c <HAL_I2C_MspInit+0x12c>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0304 	and.w	r3, r3, #4
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b21      	ldr	r3, [pc, #132]	; (800147c <HAL_I2C_MspInit+0x12c>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a20      	ldr	r2, [pc, #128]	; (800147c <HAL_I2C_MspInit+0x12c>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b1e      	ldr	r3, [pc, #120]	; (800147c <HAL_I2C_MspInit+0x12c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800140e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001414:	2312      	movs	r3, #18
 8001416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001418:	2301      	movs	r3, #1
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001420:	2304      	movs	r3, #4
 8001422:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001424:	f107 031c 	add.w	r3, r7, #28
 8001428:	4619      	mov	r1, r3
 800142a:	4817      	ldr	r0, [pc, #92]	; (8001488 <HAL_I2C_MspInit+0x138>)
 800142c:	f001 fd44 	bl	8002eb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001430:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001436:	2312      	movs	r3, #18
 8001438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800143a:	2301      	movs	r3, #1
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143e:	2303      	movs	r3, #3
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001442:	2304      	movs	r3, #4
 8001444:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	4619      	mov	r1, r3
 800144c:	480f      	ldr	r0, [pc, #60]	; (800148c <HAL_I2C_MspInit+0x13c>)
 800144e:	f001 fd33 	bl	8002eb8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_I2C_MspInit+0x12c>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	4a08      	ldr	r2, [pc, #32]	; (800147c <HAL_I2C_MspInit+0x12c>)
 800145c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001460:	6413      	str	r3, [r2, #64]	; 0x40
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_I2C_MspInit+0x12c>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
}
 800146e:	bf00      	nop
 8001470:	3730      	adds	r7, #48	; 0x30
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40005400 	.word	0x40005400
 800147c:	40023800 	.word	0x40023800
 8001480:	40020400 	.word	0x40020400
 8001484:	40005c00 	.word	0x40005c00
 8001488:	40020800 	.word	0x40020800
 800148c:	40020000 	.word	0x40020000

08001490 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a0e      	ldr	r2, [pc, #56]	; (80014d8 <HAL_TIM_Base_MspInit+0x48>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d115      	bne.n	80014ce <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <HAL_TIM_Base_MspInit+0x4c>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	4a0c      	ldr	r2, [pc, #48]	; (80014dc <HAL_TIM_Base_MspInit+0x4c>)
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	6413      	str	r3, [r2, #64]	; 0x40
 80014b2:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <HAL_TIM_Base_MspInit+0x4c>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2100      	movs	r1, #0
 80014c2:	201d      	movs	r0, #29
 80014c4:	f001 fcc1 	bl	8002e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014c8:	201d      	movs	r0, #29
 80014ca:	f001 fcda 	bl	8002e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40000400 	.word	0x40000400
 80014dc:	40023800 	.word	0x40023800

080014e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	; 0x28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a19      	ldr	r2, [pc, #100]	; (8001564 <HAL_UART_MspInit+0x84>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d12b      	bne.n	800155a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	4b18      	ldr	r3, [pc, #96]	; (8001568 <HAL_UART_MspInit+0x88>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a17      	ldr	r2, [pc, #92]	; (8001568 <HAL_UART_MspInit+0x88>)
 800150c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
 8001512:	4b15      	ldr	r3, [pc, #84]	; (8001568 <HAL_UART_MspInit+0x88>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <HAL_UART_MspInit+0x88>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a10      	ldr	r2, [pc, #64]	; (8001568 <HAL_UART_MspInit+0x88>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <HAL_UART_MspInit+0x88>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> USART2_CTS
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800153a:	230f      	movs	r3, #15
 800153c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001546:	2303      	movs	r3, #3
 8001548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800154a:	2307      	movs	r3, #7
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4619      	mov	r1, r3
 8001554:	4805      	ldr	r0, [pc, #20]	; (800156c <HAL_UART_MspInit+0x8c>)
 8001556:	f001 fcaf 	bl	8002eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800155a:	bf00      	nop
 800155c:	3728      	adds	r7, #40	; 0x28
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40004400 	.word	0x40004400
 8001568:	40023800 	.word	0x40023800
 800156c:	40020000 	.word	0x40020000

08001570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001582:	e7fe      	b.n	8001582 <HardFault_Handler+0x4>

08001584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <MemManage_Handler+0x4>

0800158a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158e:	e7fe      	b.n	800158e <BusFault_Handler+0x4>

08001590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <UsageFault_Handler+0x4>

08001596 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c4:	f000 f8d0 	bl	8001768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}

080015cc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */



  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80015d0:	4802      	ldr	r0, [pc, #8]	; (80015dc <ADC_IRQHandler+0x10>)
 80015d2:	f000 f950 	bl	8001876 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000124 	.word	0x20000124

080015e0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80015e4:	4806      	ldr	r0, [pc, #24]	; (8001600 <CAN1_RX0_IRQHandler+0x20>)
 80015e6:	f001 f91c 	bl	8002822 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  can1_recv_flag = 1;
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <CAN1_RX0_IRQHandler+0x24>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	701a      	strb	r2, [r3, #0]
  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pRxHeader, &r);
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <CAN1_RX0_IRQHandler+0x28>)
 80015f2:	4a06      	ldr	r2, [pc, #24]	; (800160c <CAN1_RX0_IRQHandler+0x2c>)
 80015f4:	2100      	movs	r1, #0
 80015f6:	4802      	ldr	r0, [pc, #8]	; (8001600 <CAN1_RX0_IRQHandler+0x20>)
 80015f8:	f000 ffdb 	bl	80025b2 <HAL_CAN_GetRxMessage>
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	200001fc 	.word	0x200001fc
 8001604:	20000241 	.word	0x20000241
 8001608:	20000121 	.word	0x20000121
 800160c:	2000019c 	.word	0x2000019c

08001610 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	timer_flag = 1;
 8001614:	4b03      	ldr	r3, [pc, #12]	; (8001624 <TIM3_IRQHandler+0x14>)
 8001616:	2201      	movs	r2, #1
 8001618:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800161a:	4803      	ldr	r0, [pc, #12]	; (8001628 <TIM3_IRQHandler+0x18>)
 800161c:	f002 ff8a 	bl	8004534 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}
 8001624:	2000019a 	.word	0x2000019a
 8001628:	200000d8 	.word	0x200000d8

0800162c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
		pb2_pressed = 1;
	}
	*/

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB2_Pin);
 8001630:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001634:	f001 fe06 	bl	8003244 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PB1_Pin);
 8001638:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800163c:	f001 fe02 	bl	8003244 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}

08001644 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <SystemInit+0x28>)
 800164a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800164e:	4a07      	ldr	r2, [pc, #28]	; (800166c <SystemInit+0x28>)
 8001650:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001654:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <SystemInit+0x28>)
 800165a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800165e:	609a      	str	r2, [r3, #8]
#endif
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack       /* set stack pointer */
 8001670:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001674:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001676:	e003      	b.n	8001680 <LoopCopyDataInit>

08001678 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800167a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800167c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800167e:	3104      	adds	r1, #4

08001680 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001680:	480b      	ldr	r0, [pc, #44]	; (80016b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001682:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001684:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001686:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001688:	d3f6      	bcc.n	8001678 <CopyDataInit>
  ldr  r2, =_sbss
 800168a:	4a0b      	ldr	r2, [pc, #44]	; (80016b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800168c:	e002      	b.n	8001694 <LoopFillZerobss>

0800168e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800168e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001690:	f842 3b04 	str.w	r3, [r2], #4

08001694 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001696:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001698:	d3f9      	bcc.n	800168e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800169a:	f7ff ffd3 	bl	8001644 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800169e:	f003 fe3b 	bl	8005318 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016a2:	f7ff f983 	bl	80009ac <main>
  bx  lr    
 80016a6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80016a8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80016ac:	080053c0 	.word	0x080053c0
  ldr  r0, =_sdata
 80016b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016b4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80016b8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80016bc:	2000024c 	.word	0x2000024c

080016c0 <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016c0:	e7fe      	b.n	80016c0 <CAN1_RX1_IRQHandler>
	...

080016c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <HAL_Init+0x40>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a0d      	ldr	r2, [pc, #52]	; (8001704 <HAL_Init+0x40>)
 80016ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016d4:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <HAL_Init+0x40>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <HAL_Init+0x40>)
 80016da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016e0:	4b08      	ldr	r3, [pc, #32]	; (8001704 <HAL_Init+0x40>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a07      	ldr	r2, [pc, #28]	; (8001704 <HAL_Init+0x40>)
 80016e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ec:	2003      	movs	r0, #3
 80016ee:	f001 fba1 	bl	8002e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016f2:	2000      	movs	r0, #0
 80016f4:	f000 f808 	bl	8001708 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016f8:	f7ff fd2e 	bl	8001158 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40023c00 	.word	0x40023c00

08001708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_InitTick+0x54>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b12      	ldr	r3, [pc, #72]	; (8001760 <HAL_InitTick+0x58>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	4619      	mov	r1, r3
 800171a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800171e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001722:	fbb2 f3f3 	udiv	r3, r2, r3
 8001726:	4618      	mov	r0, r3
 8001728:	f001 fbb9 	bl	8002e9e <HAL_SYSTICK_Config>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e00e      	b.n	8001754 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b0f      	cmp	r3, #15
 800173a:	d80a      	bhi.n	8001752 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800173c:	2200      	movs	r2, #0
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001744:	f001 fb81 	bl	8002e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001748:	4a06      	ldr	r2, [pc, #24]	; (8001764 <HAL_InitTick+0x5c>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800174e:	2300      	movs	r3, #0
 8001750:	e000      	b.n	8001754 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
}
 8001754:	4618      	mov	r0, r3
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000000 	.word	0x20000000
 8001760:	20000008 	.word	0x20000008
 8001764:	20000004 	.word	0x20000004

08001768 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_IncTick+0x20>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_IncTick+0x24>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4413      	add	r3, r2
 8001778:	4a04      	ldr	r2, [pc, #16]	; (800178c <HAL_IncTick+0x24>)
 800177a:	6013      	str	r3, [r2, #0]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000008 	.word	0x20000008
 800178c:	20000248 	.word	0x20000248

08001790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return uwTick;
 8001794:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <HAL_GetTick+0x14>)
 8001796:	681b      	ldr	r3, [r3, #0]
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20000248 	.word	0x20000248

080017a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017b0:	f7ff ffee 	bl	8001790 <HAL_GetTick>
 80017b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017c0:	d005      	beq.n	80017ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017c2:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <HAL_Delay+0x44>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4413      	add	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ce:	bf00      	nop
 80017d0:	f7ff ffde 	bl	8001790 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d8f7      	bhi.n	80017d0 <HAL_Delay+0x28>
  {
  }
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000008 	.word	0x20000008

080017f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e033      	b.n	800186e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	2b00      	cmp	r3, #0
 800180c:	d109      	bne.n	8001822 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff fcca 	bl	80011a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f003 0310 	and.w	r3, r3, #16
 800182a:	2b00      	cmp	r3, #0
 800182c:	d118      	bne.n	8001860 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001836:	f023 0302 	bic.w	r3, r3, #2
 800183a:	f043 0202 	orr.w	r2, r3, #2
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 faa8 	bl	8001d98 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f023 0303 	bic.w	r3, r3, #3
 8001856:	f043 0201 	orr.w	r2, r3, #1
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	641a      	str	r2, [r3, #64]	; 0x40
 800185e:	e001      	b.n	8001864 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800186c:	7bfb      	ldrb	r3, [r7, #15]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b084      	sub	sp, #16
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b02      	cmp	r3, #2
 8001892:	bf0c      	ite	eq
 8001894:	2301      	moveq	r3, #1
 8001896:	2300      	movne	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 0320 	and.w	r3, r3, #32
 80018a6:	2b20      	cmp	r3, #32
 80018a8:	bf0c      	ite	eq
 80018aa:	2301      	moveq	r3, #1
 80018ac:	2300      	movne	r3, #0
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d049      	beq.n	800194c <HAL_ADC_IRQHandler+0xd6>
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d046      	beq.n	800194c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f003 0310 	and.w	r3, r3, #16
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d105      	bne.n	80018d6 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d12b      	bne.n	800193c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d127      	bne.n	800193c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d006      	beq.n	8001908 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001904:	2b00      	cmp	r3, #0
 8001906:	d119      	bne.n	800193c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 0220 	bic.w	r2, r2, #32
 8001916:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d105      	bne.n	800193c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	f043 0201 	orr.w	r2, r3, #1
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 f8db 	bl	8001af8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f06f 0212 	mvn.w	r2, #18
 800194a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0304 	and.w	r3, r3, #4
 8001956:	2b04      	cmp	r3, #4
 8001958:	bf0c      	ite	eq
 800195a:	2301      	moveq	r3, #1
 800195c:	2300      	movne	r3, #0
 800195e:	b2db      	uxtb	r3, r3
 8001960:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800196c:	2b80      	cmp	r3, #128	; 0x80
 800196e:	bf0c      	ite	eq
 8001970:	2301      	moveq	r3, #1
 8001972:	2300      	movne	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d057      	beq.n	8001a2e <HAL_ADC_IRQHandler+0x1b8>
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d054      	beq.n	8001a2e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	f003 0310 	and.w	r3, r3, #16
 800198c:	2b00      	cmp	r3, #0
 800198e:	d105      	bne.n	800199c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d139      	bne.n	8001a1e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d006      	beq.n	80019c6 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d12b      	bne.n	8001a1e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d124      	bne.n	8001a1e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d11d      	bne.n	8001a1e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d119      	bne.n	8001a1e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019f8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d105      	bne.n	8001a1e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f043 0201 	orr.w	r2, r3, #1
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 fab6 	bl	8001f90 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f06f 020c 	mvn.w	r2, #12
 8001a2c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	bf0c      	ite	eq
 8001a3c:	2301      	moveq	r3, #1
 8001a3e:	2300      	movne	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a4e:	2b40      	cmp	r3, #64	; 0x40
 8001a50:	bf0c      	ite	eq
 8001a52:	2301      	moveq	r3, #1
 8001a54:	2300      	movne	r3, #0
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d017      	beq.n	8001a90 <HAL_ADC_IRQHandler+0x21a>
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d014      	beq.n	8001a90 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d10d      	bne.n	8001a90 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 f843 	bl	8001b0c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f06f 0201 	mvn.w	r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0320 	and.w	r3, r3, #32
 8001a9a:	2b20      	cmp	r3, #32
 8001a9c:	bf0c      	ite	eq
 8001a9e:	2301      	moveq	r3, #1
 8001aa0:	2300      	movne	r3, #0
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ab0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ab4:	bf0c      	ite	eq
 8001ab6:	2301      	moveq	r3, #1
 8001ab8:	2300      	movne	r3, #0
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d015      	beq.n	8001af0 <HAL_ADC_IRQHandler+0x27a>
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d012      	beq.n	8001af0 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	f043 0202 	orr.w	r2, r3, #2
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f06f 0220 	mvn.w	r2, #32
 8001ade:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f81d 	bl	8001b20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f06f 0220 	mvn.w	r2, #32
 8001aee:	601a      	str	r2, [r3, #0]
  }
}
 8001af0:	bf00      	nop
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x1c>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e113      	b.n	8001d78 <HAL_ADC_ConfigChannel+0x244>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b09      	cmp	r3, #9
 8001b5e:	d925      	bls.n	8001bac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68d9      	ldr	r1, [r3, #12]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4613      	mov	r3, r2
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4413      	add	r3, r2
 8001b74:	3b1e      	subs	r3, #30
 8001b76:	2207      	movs	r2, #7
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43da      	mvns	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	400a      	ands	r2, r1
 8001b84:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68d9      	ldr	r1, [r3, #12]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	4618      	mov	r0, r3
 8001b98:	4603      	mov	r3, r0
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4403      	add	r3, r0
 8001b9e:	3b1e      	subs	r3, #30
 8001ba0:	409a      	lsls	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	e022      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6919      	ldr	r1, [r3, #16]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4613      	mov	r3, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	4413      	add	r3, r2
 8001bc0:	2207      	movs	r2, #7
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43da      	mvns	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	400a      	ands	r2, r1
 8001bce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6919      	ldr	r1, [r3, #16]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	4618      	mov	r0, r3
 8001be2:	4603      	mov	r3, r0
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4403      	add	r3, r0
 8001be8:	409a      	lsls	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b06      	cmp	r3, #6
 8001bf8:	d824      	bhi.n	8001c44 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	3b05      	subs	r3, #5
 8001c0c:	221f      	movs	r2, #31
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43da      	mvns	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	400a      	ands	r2, r1
 8001c1a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	4618      	mov	r0, r3
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	3b05      	subs	r3, #5
 8001c36:	fa00 f203 	lsl.w	r2, r0, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	635a      	str	r2, [r3, #52]	; 0x34
 8001c42:	e04c      	b.n	8001cde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b0c      	cmp	r3, #12
 8001c4a:	d824      	bhi.n	8001c96 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3b23      	subs	r3, #35	; 0x23
 8001c5e:	221f      	movs	r2, #31
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43da      	mvns	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	400a      	ands	r2, r1
 8001c6c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	3b23      	subs	r3, #35	; 0x23
 8001c88:	fa00 f203 	lsl.w	r2, r0, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	631a      	str	r2, [r3, #48]	; 0x30
 8001c94:	e023      	b.n	8001cde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3b41      	subs	r3, #65	; 0x41
 8001ca8:	221f      	movs	r2, #31
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	400a      	ands	r2, r1
 8001cb6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	3b41      	subs	r3, #65	; 0x41
 8001cd2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cde:	4b29      	ldr	r3, [pc, #164]	; (8001d84 <HAL_ADC_ConfigChannel+0x250>)
 8001ce0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a28      	ldr	r2, [pc, #160]	; (8001d88 <HAL_ADC_ConfigChannel+0x254>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d10f      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x1d8>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b12      	cmp	r3, #18
 8001cf2:	d10b      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a1d      	ldr	r2, [pc, #116]	; (8001d88 <HAL_ADC_ConfigChannel+0x254>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d12b      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x23a>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a1c      	ldr	r2, [pc, #112]	; (8001d8c <HAL_ADC_ConfigChannel+0x258>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d003      	beq.n	8001d28 <HAL_ADC_ConfigChannel+0x1f4>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b11      	cmp	r3, #17
 8001d26:	d122      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a11      	ldr	r2, [pc, #68]	; (8001d8c <HAL_ADC_ConfigChannel+0x258>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d111      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d4a:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <HAL_ADC_ConfigChannel+0x25c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a11      	ldr	r2, [pc, #68]	; (8001d94 <HAL_ADC_ConfigChannel+0x260>)
 8001d50:	fba2 2303 	umull	r2, r3, r2, r3
 8001d54:	0c9a      	lsrs	r2, r3, #18
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d60:	e002      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f9      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	40012300 	.word	0x40012300
 8001d88:	40012000 	.word	0x40012000
 8001d8c:	10000012 	.word	0x10000012
 8001d90:	20000000 	.word	0x20000000
 8001d94:	431bde83 	.word	0x431bde83

08001d98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001da0:	4b79      	ldr	r3, [pc, #484]	; (8001f88 <ADC_Init+0x1f0>)
 8001da2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	431a      	orrs	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6859      	ldr	r1, [r3, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	021a      	lsls	r2, r3, #8
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001df0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6859      	ldr	r1, [r3, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6899      	ldr	r1, [r3, #8]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2a:	4a58      	ldr	r2, [pc, #352]	; (8001f8c <ADC_Init+0x1f4>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d022      	beq.n	8001e76 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6899      	ldr	r1, [r3, #8]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6899      	ldr	r1, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	e00f      	b.n	8001e96 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e94:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0202 	bic.w	r2, r2, #2
 8001ea4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6899      	ldr	r1, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	7e1b      	ldrb	r3, [r3, #24]
 8001eb0:	005a      	lsls	r2, r3, #1
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d01b      	beq.n	8001efc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ed2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ee2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6859      	ldr	r1, [r3, #4]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	035a      	lsls	r2, r3, #13
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	e007      	b.n	8001f0c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	051a      	lsls	r2, r3, #20
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6899      	ldr	r1, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f4e:	025a      	lsls	r2, r3, #9
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6899      	ldr	r1, [r3, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	029a      	lsls	r2, r3, #10
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	609a      	str	r2, [r3, #8]
}
 8001f7c:	bf00      	nop
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	40012300 	.word	0x40012300
 8001f8c:	0f000001 	.word	0x0f000001

08001f90 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e0ed      	b.n	8002192 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d102      	bne.n	8001fc8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff f93c 	bl	8001240 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0201 	orr.w	r2, r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fd8:	f7ff fbda 	bl	8001790 <HAL_GetTick>
 8001fdc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001fde:	e012      	b.n	8002006 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fe0:	f7ff fbd6 	bl	8001790 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b0a      	cmp	r3, #10
 8001fec:	d90b      	bls.n	8002006 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2205      	movs	r2, #5
 8001ffe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e0c5      	b.n	8002192 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0e5      	beq.n	8001fe0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0202 	bic.w	r2, r2, #2
 8002022:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002024:	f7ff fbb4 	bl	8001790 <HAL_GetTick>
 8002028:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800202a:	e012      	b.n	8002052 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800202c:	f7ff fbb0 	bl	8001790 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b0a      	cmp	r3, #10
 8002038:	d90b      	bls.n	8002052 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2205      	movs	r2, #5
 800204a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e09f      	b.n	8002192 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1e5      	bne.n	800202c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	7e1b      	ldrb	r3, [r3, #24]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d108      	bne.n	800207a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	e007      	b.n	800208a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002088:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	7e5b      	ldrb	r3, [r3, #25]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d108      	bne.n	80020a4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	e007      	b.n	80020b4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	7e9b      	ldrb	r3, [r3, #26]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d108      	bne.n	80020ce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 0220 	orr.w	r2, r2, #32
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	e007      	b.n	80020de <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0220 	bic.w	r2, r2, #32
 80020dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	7edb      	ldrb	r3, [r3, #27]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d108      	bne.n	80020f8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 0210 	bic.w	r2, r2, #16
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	e007      	b.n	8002108 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0210 	orr.w	r2, r2, #16
 8002106:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	7f1b      	ldrb	r3, [r3, #28]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d108      	bne.n	8002122 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0208 	orr.w	r2, r2, #8
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	e007      	b.n	8002132 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0208 	bic.w	r2, r2, #8
 8002130:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	7f5b      	ldrb	r3, [r3, #29]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d108      	bne.n	800214c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f042 0204 	orr.w	r2, r2, #4
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	e007      	b.n	800215c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0204 	bic.w	r2, r2, #4
 800215a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	ea42 0103 	orr.w	r1, r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	1e5a      	subs	r2, r3, #1
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
	...

0800219c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800219c:	b480      	push	{r7}
 800219e:	b087      	sub	sp, #28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021b2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80021b4:	7cfb      	ldrb	r3, [r7, #19]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d003      	beq.n	80021c2 <HAL_CAN_ConfigFilter+0x26>
 80021ba:	7cfb      	ldrb	r3, [r7, #19]
 80021bc:	2b02      	cmp	r3, #2
 80021be:	f040 80c7 	bne.w	8002350 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a69      	ldr	r2, [pc, #420]	; (800236c <HAL_CAN_ConfigFilter+0x1d0>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d001      	beq.n	80021d0 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80021cc:	4b68      	ldr	r3, [pc, #416]	; (8002370 <HAL_CAN_ConfigFilter+0x1d4>)
 80021ce:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021d6:	f043 0201 	orr.w	r2, r3, #1
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	4a63      	ldr	r2, [pc, #396]	; (8002370 <HAL_CAN_ConfigFilter+0x1d4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d111      	bne.n	800220c <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021ee:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002202:	021b      	lsls	r3, r3, #8
 8002204:	431a      	orrs	r2, r3
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	2201      	movs	r2, #1
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	43db      	mvns	r3, r3
 8002226:	401a      	ands	r2, r3
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d123      	bne.n	800227e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	43db      	mvns	r3, r3
 8002240:	401a      	ands	r2, r3
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002258:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	3248      	adds	r2, #72	; 0x48
 800225e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002272:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002274:	6979      	ldr	r1, [r7, #20]
 8002276:	3348      	adds	r3, #72	; 0x48
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	440b      	add	r3, r1
 800227c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d122      	bne.n	80022cc <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	431a      	orrs	r2, r3
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80022a6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	3248      	adds	r2, #72	; 0x48
 80022ac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022c0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022c2:	6979      	ldr	r1, [r7, #20]
 80022c4:	3348      	adds	r3, #72	; 0x48
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	440b      	add	r3, r1
 80022ca:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d109      	bne.n	80022e8 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	43db      	mvns	r3, r3
 80022de:	401a      	ands	r2, r3
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80022e6:	e007      	b.n	80022f8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	431a      	orrs	r2, r3
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d109      	bne.n	8002314 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	43db      	mvns	r3, r3
 800230a:	401a      	ands	r2, r3
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002312:	e007      	b.n	8002324 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	431a      	orrs	r2, r3
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d107      	bne.n	800233c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	431a      	orrs	r2, r3
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002342:	f023 0201 	bic.w	r2, r3, #1
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800234c:	2300      	movs	r3, #0
 800234e:	e006      	b.n	800235e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
  }
}
 800235e:	4618      	mov	r0, r3
 8002360:	371c      	adds	r7, #28
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40006c00 	.word	0x40006c00
 8002370:	40006400 	.word	0x40006400

08002374 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b01      	cmp	r3, #1
 8002386:	d12e      	bne.n	80023e6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0201 	bic.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80023a0:	f7ff f9f6 	bl	8001790 <HAL_GetTick>
 80023a4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80023a6:	e012      	b.n	80023ce <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023a8:	f7ff f9f2 	bl	8001790 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b0a      	cmp	r3, #10
 80023b4:	d90b      	bls.n	80023ce <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2205      	movs	r2, #5
 80023c6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e012      	b.n	80023f4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1e5      	bne.n	80023a8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	e006      	b.n	80023f4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
  }
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b089      	sub	sp, #36	; 0x24
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
 8002408:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002410:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800241a:	7ffb      	ldrb	r3, [r7, #31]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d003      	beq.n	8002428 <HAL_CAN_AddTxMessage+0x2c>
 8002420:	7ffb      	ldrb	r3, [r7, #31]
 8002422:	2b02      	cmp	r3, #2
 8002424:	f040 80b8 	bne.w	8002598 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10a      	bne.n	8002448 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002438:	2b00      	cmp	r3, #0
 800243a:	d105      	bne.n	8002448 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 80a0 	beq.w	8002588 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	0e1b      	lsrs	r3, r3, #24
 800244c:	f003 0303 	and.w	r3, r3, #3
 8002450:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2b02      	cmp	r3, #2
 8002456:	d907      	bls.n	8002468 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e09e      	b.n	80025a6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002468:	2201      	movs	r2, #1
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	409a      	lsls	r2, r3
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10d      	bne.n	8002496 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002484:	68f9      	ldr	r1, [r7, #12]
 8002486:	6809      	ldr	r1, [r1, #0]
 8002488:	431a      	orrs	r2, r3
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	3318      	adds	r3, #24
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	440b      	add	r3, r1
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	e00f      	b.n	80024b6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024a0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024a6:	68f9      	ldr	r1, [r7, #12]
 80024a8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80024aa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	3318      	adds	r3, #24
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	440b      	add	r3, r1
 80024b4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6819      	ldr	r1, [r3, #0]
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	691a      	ldr	r2, [r3, #16]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	3318      	adds	r3, #24
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	440b      	add	r3, r1
 80024c6:	3304      	adds	r3, #4
 80024c8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	7d1b      	ldrb	r3, [r3, #20]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d111      	bne.n	80024f6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	3318      	adds	r3, #24
 80024da:	011b      	lsls	r3, r3, #4
 80024dc:	4413      	add	r3, r2
 80024de:	3304      	adds	r3, #4
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	6811      	ldr	r1, [r2, #0]
 80024e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	3318      	adds	r3, #24
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	440b      	add	r3, r1
 80024f2:	3304      	adds	r3, #4
 80024f4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	3307      	adds	r3, #7
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	061a      	lsls	r2, r3, #24
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3306      	adds	r3, #6
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	041b      	lsls	r3, r3, #16
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3305      	adds	r3, #5
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	021b      	lsls	r3, r3, #8
 8002510:	4313      	orrs	r3, r2
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	3204      	adds	r2, #4
 8002516:	7812      	ldrb	r2, [r2, #0]
 8002518:	4610      	mov	r0, r2
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	6811      	ldr	r1, [r2, #0]
 800251e:	ea43 0200 	orr.w	r2, r3, r0
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	011b      	lsls	r3, r3, #4
 8002526:	440b      	add	r3, r1
 8002528:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800252c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3303      	adds	r3, #3
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	061a      	lsls	r2, r3, #24
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3302      	adds	r3, #2
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	041b      	lsls	r3, r3, #16
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3301      	adds	r3, #1
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	021b      	lsls	r3, r3, #8
 8002548:	4313      	orrs	r3, r2
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	7812      	ldrb	r2, [r2, #0]
 800254e:	4610      	mov	r0, r2
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	6811      	ldr	r1, [r2, #0]
 8002554:	ea43 0200 	orr.w	r2, r3, r0
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	440b      	add	r3, r1
 800255e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002562:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	3318      	adds	r3, #24
 800256c:	011b      	lsls	r3, r3, #4
 800256e:	4413      	add	r3, r2
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	6811      	ldr	r1, [r2, #0]
 8002576:	f043 0201 	orr.w	r2, r3, #1
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	3318      	adds	r3, #24
 800257e:	011b      	lsls	r3, r3, #4
 8002580:	440b      	add	r3, r1
 8002582:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002584:	2300      	movs	r3, #0
 8002586:	e00e      	b.n	80025a6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e006      	b.n	80025a6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
  }
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3724      	adds	r7, #36	; 0x24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80025b2:	b480      	push	{r7}
 80025b4:	b087      	sub	sp, #28
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	60f8      	str	r0, [r7, #12]
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	607a      	str	r2, [r7, #4]
 80025be:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025c6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80025c8:	7dfb      	ldrb	r3, [r7, #23]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d003      	beq.n	80025d6 <HAL_CAN_GetRxMessage+0x24>
 80025ce:	7dfb      	ldrb	r3, [r7, #23]
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	f040 80f3 	bne.w	80027bc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10e      	bne.n	80025fa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d116      	bne.n	8002618 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e0e7      	b.n	80027ca <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d107      	bne.n	8002618 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0d8      	b.n	80027ca <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	331b      	adds	r3, #27
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	4413      	add	r3, r2
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0204 	and.w	r2, r3, #4
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10c      	bne.n	8002650 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	331b      	adds	r3, #27
 800263e:	011b      	lsls	r3, r3, #4
 8002640:	4413      	add	r3, r2
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	0d5b      	lsrs	r3, r3, #21
 8002646:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	e00b      	b.n	8002668 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	331b      	adds	r3, #27
 8002658:	011b      	lsls	r3, r3, #4
 800265a:	4413      	add	r3, r2
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	08db      	lsrs	r3, r3, #3
 8002660:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	331b      	adds	r3, #27
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	4413      	add	r3, r2
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0202 	and.w	r2, r3, #2
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	331b      	adds	r3, #27
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	4413      	add	r3, r2
 800268a:	3304      	adds	r3, #4
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 020f 	and.w	r2, r3, #15
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	331b      	adds	r3, #27
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	4413      	add	r3, r2
 80026a2:	3304      	adds	r3, #4
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	0a1b      	lsrs	r3, r3, #8
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	331b      	adds	r3, #27
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	4413      	add	r3, r2
 80026ba:	3304      	adds	r3, #4
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	0c1b      	lsrs	r3, r3, #16
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	4413      	add	r3, r2
 80026e6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	0a1a      	lsrs	r2, r3, #8
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	3301      	adds	r3, #1
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	011b      	lsls	r3, r3, #4
 80026fe:	4413      	add	r3, r2
 8002700:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	0c1a      	lsrs	r2, r3, #16
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	3302      	adds	r3, #2
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	4413      	add	r3, r2
 800271a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	0e1a      	lsrs	r2, r3, #24
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	3303      	adds	r3, #3
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	4413      	add	r3, r2
 8002734:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	3304      	adds	r3, #4
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	4413      	add	r3, r2
 800274c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	0a1a      	lsrs	r2, r3, #8
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	3305      	adds	r3, #5
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	4413      	add	r3, r2
 8002766:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	0c1a      	lsrs	r2, r3, #16
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	3306      	adds	r3, #6
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	4413      	add	r3, r2
 8002780:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	0e1a      	lsrs	r2, r3, #24
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	3307      	adds	r3, #7
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d108      	bne.n	80027a8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68da      	ldr	r2, [r3, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f042 0220 	orr.w	r2, r2, #32
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	e007      	b.n	80027b8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691a      	ldr	r2, [r3, #16]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0220 	orr.w	r2, r2, #32
 80027b6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	e006      	b.n	80027ca <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
  }
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	371c      	adds	r7, #28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b085      	sub	sp, #20
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
 80027de:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027e6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d002      	beq.n	80027f4 <HAL_CAN_ActivateNotification+0x1e>
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d109      	bne.n	8002808 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6959      	ldr	r1, [r3, #20]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002804:	2300      	movs	r3, #0
 8002806:	e006      	b.n	8002816 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
  }
}
 8002816:	4618      	mov	r0, r3
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b08a      	sub	sp, #40	; 0x28
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800282a:	2300      	movs	r3, #0
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800285e:	6a3b      	ldr	r3, [r7, #32]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b00      	cmp	r3, #0
 8002866:	d07c      	beq.n	8002962 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d023      	beq.n	80028ba <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2201      	movs	r2, #1
 8002878:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f983 	bl	8002b90 <HAL_CAN_TxMailbox0CompleteCallback>
 800288a:	e016      	b.n	80028ba <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	2b00      	cmp	r3, #0
 8002894:	d004      	beq.n	80028a0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
 800289e:	e00c      	b.n	80028ba <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d004      	beq.n	80028b4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
 80028b2:	e002      	b.n	80028ba <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f989 	bl	8002bcc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d024      	beq.n	800290e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 f963 	bl	8002ba4 <HAL_CAN_TxMailbox1CompleteCallback>
 80028de:	e016      	b.n	800290e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d004      	beq.n	80028f4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
 80028f2:	e00c      	b.n	800290e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d004      	beq.n	8002908 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
 8002906:	e002      	b.n	800290e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f969 	bl	8002be0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d024      	beq.n	8002962 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002920:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 f943 	bl	8002bb8 <HAL_CAN_TxMailbox2CompleteCallback>
 8002932:	e016      	b.n	8002962 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d004      	beq.n	8002948 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
 8002946:	e00c      	b.n	8002962 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d004      	beq.n	800295c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
 800295a:	e002      	b.n	8002962 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f949 	bl	8002bf4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	f003 0308 	and.w	r3, r3, #8
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00c      	beq.n	8002986 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f003 0310 	and.w	r3, r3, #16
 8002972:	2b00      	cmp	r3, #0
 8002974:	d007      	beq.n	8002986 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800297c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2210      	movs	r2, #16
 8002984:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002986:	6a3b      	ldr	r3, [r7, #32]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00b      	beq.n	80029a8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d006      	beq.n	80029a8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2208      	movs	r2, #8
 80029a0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f93a 	bl	8002c1c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80029a8:	6a3b      	ldr	r3, [r7, #32]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d009      	beq.n	80029c6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f003 0303 	and.w	r3, r3, #3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d002      	beq.n	80029c6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f921 	bl	8002c08 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00c      	beq.n	80029ea <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	f003 0310 	and.w	r3, r3, #16
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d007      	beq.n	80029ea <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2210      	movs	r2, #16
 80029e8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	f003 0320 	and.w	r3, r3, #32
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00b      	beq.n	8002a0c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d006      	beq.n	8002a0c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2208      	movs	r2, #8
 8002a04:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f91c 	bl	8002c44 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	f003 0310 	and.w	r3, r3, #16
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d009      	beq.n	8002a2a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d002      	beq.n	8002a2a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f903 	bl	8002c30 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002a2a:	6a3b      	ldr	r3, [r7, #32]
 8002a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00b      	beq.n	8002a4c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f003 0310 	and.w	r3, r3, #16
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d006      	beq.n	8002a4c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2210      	movs	r2, #16
 8002a44:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f906 	bl	8002c58 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00b      	beq.n	8002a6e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d006      	beq.n	8002a6e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2208      	movs	r2, #8
 8002a66:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f8ff 	bl	8002c6c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d07b      	beq.n	8002b70 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d072      	beq.n	8002b68 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a82:	6a3b      	ldr	r3, [r7, #32]
 8002a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d008      	beq.n	8002a9e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d008      	beq.n	8002aba <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	f043 0302 	orr.w	r3, r3, #2
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	f043 0304 	orr.w	r3, r3, #4
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d043      	beq.n	8002b68 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d03e      	beq.n	8002b68 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002af0:	2b60      	cmp	r3, #96	; 0x60
 8002af2:	d02b      	beq.n	8002b4c <HAL_CAN_IRQHandler+0x32a>
 8002af4:	2b60      	cmp	r3, #96	; 0x60
 8002af6:	d82e      	bhi.n	8002b56 <HAL_CAN_IRQHandler+0x334>
 8002af8:	2b50      	cmp	r3, #80	; 0x50
 8002afa:	d022      	beq.n	8002b42 <HAL_CAN_IRQHandler+0x320>
 8002afc:	2b50      	cmp	r3, #80	; 0x50
 8002afe:	d82a      	bhi.n	8002b56 <HAL_CAN_IRQHandler+0x334>
 8002b00:	2b40      	cmp	r3, #64	; 0x40
 8002b02:	d019      	beq.n	8002b38 <HAL_CAN_IRQHandler+0x316>
 8002b04:	2b40      	cmp	r3, #64	; 0x40
 8002b06:	d826      	bhi.n	8002b56 <HAL_CAN_IRQHandler+0x334>
 8002b08:	2b30      	cmp	r3, #48	; 0x30
 8002b0a:	d010      	beq.n	8002b2e <HAL_CAN_IRQHandler+0x30c>
 8002b0c:	2b30      	cmp	r3, #48	; 0x30
 8002b0e:	d822      	bhi.n	8002b56 <HAL_CAN_IRQHandler+0x334>
 8002b10:	2b10      	cmp	r3, #16
 8002b12:	d002      	beq.n	8002b1a <HAL_CAN_IRQHandler+0x2f8>
 8002b14:	2b20      	cmp	r3, #32
 8002b16:	d005      	beq.n	8002b24 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002b18:	e01d      	b.n	8002b56 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	f043 0308 	orr.w	r3, r3, #8
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b22:	e019      	b.n	8002b58 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	f043 0310 	orr.w	r3, r3, #16
 8002b2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b2c:	e014      	b.n	8002b58 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	f043 0320 	orr.w	r3, r3, #32
 8002b34:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b36:	e00f      	b.n	8002b58 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b40:	e00a      	b.n	8002b58 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b4a:	e005      	b.n	8002b58 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b54:	e000      	b.n	8002b58 <HAL_CAN_IRQHandler+0x336>
            break;
 8002b56:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699a      	ldr	r2, [r3, #24]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002b66:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2204      	movs	r2, #4
 8002b6e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d008      	beq.n	8002b88 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f87c 	bl	8002c80 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002b88:	bf00      	nop
 8002b8a:	3728      	adds	r7, #40	; 0x28
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ca4:	4b0c      	ldr	r3, [pc, #48]	; (8002cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cc6:	4a04      	ldr	r2, [pc, #16]	; (8002cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	60d3      	str	r3, [r2, #12]
}
 8002ccc:	bf00      	nop
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ce0:	4b04      	ldr	r3, [pc, #16]	; (8002cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	0a1b      	lsrs	r3, r3, #8
 8002ce6:	f003 0307 	and.w	r3, r3, #7
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	e000ed00 	.word	0xe000ed00

08002cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	db0b      	blt.n	8002d22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d0a:	79fb      	ldrb	r3, [r7, #7]
 8002d0c:	f003 021f 	and.w	r2, r3, #31
 8002d10:	4907      	ldr	r1, [pc, #28]	; (8002d30 <__NVIC_EnableIRQ+0x38>)
 8002d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d16:	095b      	lsrs	r3, r3, #5
 8002d18:	2001      	movs	r0, #1
 8002d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	e000e100 	.word	0xe000e100

08002d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	6039      	str	r1, [r7, #0]
 8002d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	db0a      	blt.n	8002d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	490c      	ldr	r1, [pc, #48]	; (8002d80 <__NVIC_SetPriority+0x4c>)
 8002d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d52:	0112      	lsls	r2, r2, #4
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	440b      	add	r3, r1
 8002d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d5c:	e00a      	b.n	8002d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	4908      	ldr	r1, [pc, #32]	; (8002d84 <__NVIC_SetPriority+0x50>)
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	3b04      	subs	r3, #4
 8002d6c:	0112      	lsls	r2, r2, #4
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	440b      	add	r3, r1
 8002d72:	761a      	strb	r2, [r3, #24]
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	e000e100 	.word	0xe000e100
 8002d84:	e000ed00 	.word	0xe000ed00

08002d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b089      	sub	sp, #36	; 0x24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f1c3 0307 	rsb	r3, r3, #7
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	bf28      	it	cs
 8002da6:	2304      	movcs	r3, #4
 8002da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	3304      	adds	r3, #4
 8002dae:	2b06      	cmp	r3, #6
 8002db0:	d902      	bls.n	8002db8 <NVIC_EncodePriority+0x30>
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	3b03      	subs	r3, #3
 8002db6:	e000      	b.n	8002dba <NVIC_EncodePriority+0x32>
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43da      	mvns	r2, r3
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	401a      	ands	r2, r3
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dda:	43d9      	mvns	r1, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de0:	4313      	orrs	r3, r2
         );
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3724      	adds	r7, #36	; 0x24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
	...

08002df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e00:	d301      	bcc.n	8002e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e02:	2301      	movs	r3, #1
 8002e04:	e00f      	b.n	8002e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e06:	4a0a      	ldr	r2, [pc, #40]	; (8002e30 <SysTick_Config+0x40>)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e0e:	210f      	movs	r1, #15
 8002e10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e14:	f7ff ff8e 	bl	8002d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e18:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <SysTick_Config+0x40>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e1e:	4b04      	ldr	r3, [pc, #16]	; (8002e30 <SysTick_Config+0x40>)
 8002e20:	2207      	movs	r2, #7
 8002e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	e000e010 	.word	0xe000e010

08002e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7ff ff29 	bl	8002c94 <__NVIC_SetPriorityGrouping>
}
 8002e42:	bf00      	nop
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b086      	sub	sp, #24
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	4603      	mov	r3, r0
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	607a      	str	r2, [r7, #4]
 8002e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e5c:	f7ff ff3e 	bl	8002cdc <__NVIC_GetPriorityGrouping>
 8002e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	68b9      	ldr	r1, [r7, #8]
 8002e66:	6978      	ldr	r0, [r7, #20]
 8002e68:	f7ff ff8e 	bl	8002d88 <NVIC_EncodePriority>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e72:	4611      	mov	r1, r2
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff ff5d 	bl	8002d34 <__NVIC_SetPriority>
}
 8002e7a:	bf00      	nop
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	4603      	mov	r3, r0
 8002e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff ff31 	bl	8002cf8 <__NVIC_EnableIRQ>
}
 8002e96:	bf00      	nop
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b082      	sub	sp, #8
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7ff ffa2 	bl	8002df0 <SysTick_Config>
 8002eac:	4603      	mov	r3, r0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
	...

08002eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b089      	sub	sp, #36	; 0x24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61fb      	str	r3, [r7, #28]
 8002ed2:	e165      	b.n	80031a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	f040 8154 	bne.w	800319a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d005      	beq.n	8002f0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d130      	bne.n	8002f6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	2203      	movs	r2, #3
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f40:	2201      	movs	r2, #1
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	091b      	lsrs	r3, r3, #4
 8002f56:	f003 0201 	and.w	r2, r3, #1
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 0303 	and.w	r3, r3, #3
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	d017      	beq.n	8002fa8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	2203      	movs	r2, #3
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f003 0303 	and.w	r3, r3, #3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d123      	bne.n	8002ffc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	08da      	lsrs	r2, r3, #3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3208      	adds	r2, #8
 8002fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	220f      	movs	r2, #15
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	691a      	ldr	r2, [r3, #16]
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	08da      	lsrs	r2, r3, #3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	3208      	adds	r2, #8
 8002ff6:	69b9      	ldr	r1, [r7, #24]
 8002ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	2203      	movs	r2, #3
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f003 0203 	and.w	r2, r3, #3
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4313      	orrs	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 80ae 	beq.w	800319a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	4b5d      	ldr	r3, [pc, #372]	; (80031b8 <HAL_GPIO_Init+0x300>)
 8003044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003046:	4a5c      	ldr	r2, [pc, #368]	; (80031b8 <HAL_GPIO_Init+0x300>)
 8003048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800304c:	6453      	str	r3, [r2, #68]	; 0x44
 800304e:	4b5a      	ldr	r3, [pc, #360]	; (80031b8 <HAL_GPIO_Init+0x300>)
 8003050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800305a:	4a58      	ldr	r2, [pc, #352]	; (80031bc <HAL_GPIO_Init+0x304>)
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	089b      	lsrs	r3, r3, #2
 8003060:	3302      	adds	r3, #2
 8003062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003066:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	220f      	movs	r2, #15
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	43db      	mvns	r3, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4013      	ands	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a4f      	ldr	r2, [pc, #316]	; (80031c0 <HAL_GPIO_Init+0x308>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d025      	beq.n	80030d2 <HAL_GPIO_Init+0x21a>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a4e      	ldr	r2, [pc, #312]	; (80031c4 <HAL_GPIO_Init+0x30c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d01f      	beq.n	80030ce <HAL_GPIO_Init+0x216>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a4d      	ldr	r2, [pc, #308]	; (80031c8 <HAL_GPIO_Init+0x310>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d019      	beq.n	80030ca <HAL_GPIO_Init+0x212>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a4c      	ldr	r2, [pc, #304]	; (80031cc <HAL_GPIO_Init+0x314>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d013      	beq.n	80030c6 <HAL_GPIO_Init+0x20e>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a4b      	ldr	r2, [pc, #300]	; (80031d0 <HAL_GPIO_Init+0x318>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d00d      	beq.n	80030c2 <HAL_GPIO_Init+0x20a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a4a      	ldr	r2, [pc, #296]	; (80031d4 <HAL_GPIO_Init+0x31c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d007      	beq.n	80030be <HAL_GPIO_Init+0x206>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a49      	ldr	r2, [pc, #292]	; (80031d8 <HAL_GPIO_Init+0x320>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d101      	bne.n	80030ba <HAL_GPIO_Init+0x202>
 80030b6:	2306      	movs	r3, #6
 80030b8:	e00c      	b.n	80030d4 <HAL_GPIO_Init+0x21c>
 80030ba:	2307      	movs	r3, #7
 80030bc:	e00a      	b.n	80030d4 <HAL_GPIO_Init+0x21c>
 80030be:	2305      	movs	r3, #5
 80030c0:	e008      	b.n	80030d4 <HAL_GPIO_Init+0x21c>
 80030c2:	2304      	movs	r3, #4
 80030c4:	e006      	b.n	80030d4 <HAL_GPIO_Init+0x21c>
 80030c6:	2303      	movs	r3, #3
 80030c8:	e004      	b.n	80030d4 <HAL_GPIO_Init+0x21c>
 80030ca:	2302      	movs	r3, #2
 80030cc:	e002      	b.n	80030d4 <HAL_GPIO_Init+0x21c>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <HAL_GPIO_Init+0x21c>
 80030d2:	2300      	movs	r3, #0
 80030d4:	69fa      	ldr	r2, [r7, #28]
 80030d6:	f002 0203 	and.w	r2, r2, #3
 80030da:	0092      	lsls	r2, r2, #2
 80030dc:	4093      	lsls	r3, r2
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030e4:	4935      	ldr	r1, [pc, #212]	; (80031bc <HAL_GPIO_Init+0x304>)
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	089b      	lsrs	r3, r3, #2
 80030ea:	3302      	adds	r3, #2
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030f2:	4b3a      	ldr	r3, [pc, #232]	; (80031dc <HAL_GPIO_Init+0x324>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	43db      	mvns	r3, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4013      	ands	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	4313      	orrs	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003116:	4a31      	ldr	r2, [pc, #196]	; (80031dc <HAL_GPIO_Init+0x324>)
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800311c:	4b2f      	ldr	r3, [pc, #188]	; (80031dc <HAL_GPIO_Init+0x324>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	43db      	mvns	r3, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4013      	ands	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	4313      	orrs	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003140:	4a26      	ldr	r2, [pc, #152]	; (80031dc <HAL_GPIO_Init+0x324>)
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003146:	4b25      	ldr	r3, [pc, #148]	; (80031dc <HAL_GPIO_Init+0x324>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	43db      	mvns	r3, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4013      	ands	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	4313      	orrs	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800316a:	4a1c      	ldr	r2, [pc, #112]	; (80031dc <HAL_GPIO_Init+0x324>)
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003170:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <HAL_GPIO_Init+0x324>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	43db      	mvns	r3, r3
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	4013      	ands	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d003      	beq.n	8003194 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	4313      	orrs	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003194:	4a11      	ldr	r2, [pc, #68]	; (80031dc <HAL_GPIO_Init+0x324>)
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	3301      	adds	r3, #1
 800319e:	61fb      	str	r3, [r7, #28]
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	2b0f      	cmp	r3, #15
 80031a4:	f67f ae96 	bls.w	8002ed4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031a8:	bf00      	nop
 80031aa:	bf00      	nop
 80031ac:	3724      	adds	r7, #36	; 0x24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	40023800 	.word	0x40023800
 80031bc:	40013800 	.word	0x40013800
 80031c0:	40020000 	.word	0x40020000
 80031c4:	40020400 	.word	0x40020400
 80031c8:	40020800 	.word	0x40020800
 80031cc:	40020c00 	.word	0x40020c00
 80031d0:	40021000 	.word	0x40021000
 80031d4:	40021400 	.word	0x40021400
 80031d8:	40021800 	.word	0x40021800
 80031dc:	40013c00 	.word	0x40013c00

080031e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	460b      	mov	r3, r1
 80031ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691a      	ldr	r2, [r3, #16]
 80031f0:	887b      	ldrh	r3, [r7, #2]
 80031f2:	4013      	ands	r3, r2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d002      	beq.n	80031fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031f8:	2301      	movs	r3, #1
 80031fa:	73fb      	strb	r3, [r7, #15]
 80031fc:	e001      	b.n	8003202 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031fe:	2300      	movs	r3, #0
 8003200:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003202:	7bfb      	ldrb	r3, [r7, #15]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	807b      	strh	r3, [r7, #2]
 800321c:	4613      	mov	r3, r2
 800321e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003220:	787b      	ldrb	r3, [r7, #1]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003226:	887a      	ldrh	r2, [r7, #2]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800322c:	e003      	b.n	8003236 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800322e:	887b      	ldrh	r3, [r7, #2]
 8003230:	041a      	lsls	r2, r3, #16
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	619a      	str	r2, [r3, #24]
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
	...

08003244 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800324e:	4b08      	ldr	r3, [pc, #32]	; (8003270 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003250:	695a      	ldr	r2, [r3, #20]
 8003252:	88fb      	ldrh	r3, [r7, #6]
 8003254:	4013      	ands	r3, r2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d006      	beq.n	8003268 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800325a:	4a05      	ldr	r2, [pc, #20]	; (8003270 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800325c:	88fb      	ldrh	r3, [r7, #6]
 800325e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003260:	88fb      	ldrh	r3, [r7, #6]
 8003262:	4618      	mov	r0, r3
 8003264:	f7fd ff58 	bl	8001118 <HAL_GPIO_EXTI_Callback>
  }
}
 8003268:	bf00      	nop
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40013c00 	.word	0x40013c00

08003274 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e12b      	b.n	80034de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d106      	bne.n	80032a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7fe f858 	bl	8001350 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2224      	movs	r2, #36	; 0x24
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0201 	bic.w	r2, r2, #1
 80032b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032d8:	f000 fdc0 	bl	8003e5c <HAL_RCC_GetPCLK1Freq>
 80032dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	4a81      	ldr	r2, [pc, #516]	; (80034e8 <HAL_I2C_Init+0x274>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d807      	bhi.n	80032f8 <HAL_I2C_Init+0x84>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4a80      	ldr	r2, [pc, #512]	; (80034ec <HAL_I2C_Init+0x278>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	bf94      	ite	ls
 80032f0:	2301      	movls	r3, #1
 80032f2:	2300      	movhi	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	e006      	b.n	8003306 <HAL_I2C_Init+0x92>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4a7d      	ldr	r2, [pc, #500]	; (80034f0 <HAL_I2C_Init+0x27c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	bf94      	ite	ls
 8003300:	2301      	movls	r3, #1
 8003302:	2300      	movhi	r3, #0
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e0e7      	b.n	80034de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	4a78      	ldr	r2, [pc, #480]	; (80034f4 <HAL_I2C_Init+0x280>)
 8003312:	fba2 2303 	umull	r2, r3, r2, r3
 8003316:	0c9b      	lsrs	r3, r3, #18
 8003318:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	430a      	orrs	r2, r1
 800332c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	4a6a      	ldr	r2, [pc, #424]	; (80034e8 <HAL_I2C_Init+0x274>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d802      	bhi.n	8003348 <HAL_I2C_Init+0xd4>
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	3301      	adds	r3, #1
 8003346:	e009      	b.n	800335c <HAL_I2C_Init+0xe8>
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800334e:	fb02 f303 	mul.w	r3, r2, r3
 8003352:	4a69      	ldr	r2, [pc, #420]	; (80034f8 <HAL_I2C_Init+0x284>)
 8003354:	fba2 2303 	umull	r2, r3, r2, r3
 8003358:	099b      	lsrs	r3, r3, #6
 800335a:	3301      	adds	r3, #1
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6812      	ldr	r2, [r2, #0]
 8003360:	430b      	orrs	r3, r1
 8003362:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800336e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	495c      	ldr	r1, [pc, #368]	; (80034e8 <HAL_I2C_Init+0x274>)
 8003378:	428b      	cmp	r3, r1
 800337a:	d819      	bhi.n	80033b0 <HAL_I2C_Init+0x13c>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	1e59      	subs	r1, r3, #1
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	fbb1 f3f3 	udiv	r3, r1, r3
 800338a:	1c59      	adds	r1, r3, #1
 800338c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003390:	400b      	ands	r3, r1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <HAL_I2C_Init+0x138>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	1e59      	subs	r1, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80033a4:	3301      	adds	r3, #1
 80033a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033aa:	e051      	b.n	8003450 <HAL_I2C_Init+0x1dc>
 80033ac:	2304      	movs	r3, #4
 80033ae:	e04f      	b.n	8003450 <HAL_I2C_Init+0x1dc>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d111      	bne.n	80033dc <HAL_I2C_Init+0x168>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	1e58      	subs	r0, r3, #1
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6859      	ldr	r1, [r3, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	440b      	add	r3, r1
 80033c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ca:	3301      	adds	r3, #1
 80033cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	bf0c      	ite	eq
 80033d4:	2301      	moveq	r3, #1
 80033d6:	2300      	movne	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	e012      	b.n	8003402 <HAL_I2C_Init+0x18e>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	1e58      	subs	r0, r3, #1
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6859      	ldr	r1, [r3, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	0099      	lsls	r1, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80033f2:	3301      	adds	r3, #1
 80033f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	bf0c      	ite	eq
 80033fc:	2301      	moveq	r3, #1
 80033fe:	2300      	movne	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_I2C_Init+0x196>
 8003406:	2301      	movs	r3, #1
 8003408:	e022      	b.n	8003450 <HAL_I2C_Init+0x1dc>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10e      	bne.n	8003430 <HAL_I2C_Init+0x1bc>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	1e58      	subs	r0, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6859      	ldr	r1, [r3, #4]
 800341a:	460b      	mov	r3, r1
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	440b      	add	r3, r1
 8003420:	fbb0 f3f3 	udiv	r3, r0, r3
 8003424:	3301      	adds	r3, #1
 8003426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800342a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800342e:	e00f      	b.n	8003450 <HAL_I2C_Init+0x1dc>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	1e58      	subs	r0, r3, #1
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6859      	ldr	r1, [r3, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	0099      	lsls	r1, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	fbb0 f3f3 	udiv	r3, r0, r3
 8003446:	3301      	adds	r3, #1
 8003448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800344c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	6809      	ldr	r1, [r1, #0]
 8003454:	4313      	orrs	r3, r2
 8003456:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69da      	ldr	r2, [r3, #28]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	430a      	orrs	r2, r1
 8003472:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800347e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6911      	ldr	r1, [r2, #16]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	68d2      	ldr	r2, [r2, #12]
 800348a:	4311      	orrs	r1, r2
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6812      	ldr	r2, [r2, #0]
 8003490:	430b      	orrs	r3, r1
 8003492:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695a      	ldr	r2, [r3, #20]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0201 	orr.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2220      	movs	r2, #32
 80034ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	000186a0 	.word	0x000186a0
 80034ec:	001e847f 	.word	0x001e847f
 80034f0:	003d08ff 	.word	0x003d08ff
 80034f4:	431bde83 	.word	0x431bde83
 80034f8:	10624dd3 	.word	0x10624dd3

080034fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b088      	sub	sp, #32
 8003500:	af02      	add	r7, sp, #8
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	607a      	str	r2, [r7, #4]
 8003506:	461a      	mov	r2, r3
 8003508:	460b      	mov	r3, r1
 800350a:	817b      	strh	r3, [r7, #10]
 800350c:	4613      	mov	r3, r2
 800350e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003510:	f7fe f93e 	bl	8001790 <HAL_GetTick>
 8003514:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b20      	cmp	r3, #32
 8003520:	f040 80e0 	bne.w	80036e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	2319      	movs	r3, #25
 800352a:	2201      	movs	r2, #1
 800352c:	4970      	ldr	r1, [pc, #448]	; (80036f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 f964 	bl	80037fc <I2C_WaitOnFlagUntilTimeout>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800353a:	2302      	movs	r3, #2
 800353c:	e0d3      	b.n	80036e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <HAL_I2C_Master_Transmit+0x50>
 8003548:	2302      	movs	r3, #2
 800354a:	e0cc      	b.n	80036e6 <HAL_I2C_Master_Transmit+0x1ea>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b01      	cmp	r3, #1
 8003560:	d007      	beq.n	8003572 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 0201 	orr.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003580:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2221      	movs	r2, #33	; 0x21
 8003586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2210      	movs	r2, #16
 800358e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	893a      	ldrh	r2, [r7, #8]
 80035a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4a50      	ldr	r2, [pc, #320]	; (80036f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80035b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035b4:	8979      	ldrh	r1, [r7, #10]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	6a3a      	ldr	r2, [r7, #32]
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 f89c 	bl	80036f8 <I2C_MasterRequestWrite>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e08d      	b.n	80036e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ca:	2300      	movs	r3, #0
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80035e0:	e066      	b.n	80036b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	6a39      	ldr	r1, [r7, #32]
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 f9de 	bl	80039a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00d      	beq.n	800360e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d107      	bne.n	800360a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003608:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e06b      	b.n	80036e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	781a      	ldrb	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003628:	b29b      	uxth	r3, r3
 800362a:	3b01      	subs	r3, #1
 800362c:	b29a      	uxth	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003636:	3b01      	subs	r3, #1
 8003638:	b29a      	uxth	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b04      	cmp	r3, #4
 800364a:	d11b      	bne.n	8003684 <HAL_I2C_Master_Transmit+0x188>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003650:	2b00      	cmp	r3, #0
 8003652:	d017      	beq.n	8003684 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	781a      	ldrb	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	1c5a      	adds	r2, r3, #1
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366e:	b29b      	uxth	r3, r3
 8003670:	3b01      	subs	r3, #1
 8003672:	b29a      	uxth	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367c:	3b01      	subs	r3, #1
 800367e:	b29a      	uxth	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	6a39      	ldr	r1, [r7, #32]
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 f9ce 	bl	8003a2a <I2C_WaitOnBTFFlagUntilTimeout>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00d      	beq.n	80036b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	2b04      	cmp	r3, #4
 800369a:	d107      	bne.n	80036ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e01a      	b.n	80036e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d194      	bne.n	80035e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036e0:	2300      	movs	r3, #0
 80036e2:	e000      	b.n	80036e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80036e4:	2302      	movs	r3, #2
  }
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	00100002 	.word	0x00100002
 80036f4:	ffff0000 	.word	0xffff0000

080036f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af02      	add	r7, sp, #8
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	607a      	str	r2, [r7, #4]
 8003702:	603b      	str	r3, [r7, #0]
 8003704:	460b      	mov	r3, r1
 8003706:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2b08      	cmp	r3, #8
 8003712:	d006      	beq.n	8003722 <I2C_MasterRequestWrite+0x2a>
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d003      	beq.n	8003722 <I2C_MasterRequestWrite+0x2a>
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003720:	d108      	bne.n	8003734 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	e00b      	b.n	800374c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003738:	2b12      	cmp	r3, #18
 800373a:	d107      	bne.n	800374c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800374a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 f84f 	bl	80037fc <I2C_WaitOnFlagUntilTimeout>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00d      	beq.n	8003780 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003772:	d103      	bne.n	800377c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f44f 7200 	mov.w	r2, #512	; 0x200
 800377a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e035      	b.n	80037ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003788:	d108      	bne.n	800379c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800378a:	897b      	ldrh	r3, [r7, #10]
 800378c:	b2db      	uxtb	r3, r3
 800378e:	461a      	mov	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003798:	611a      	str	r2, [r3, #16]
 800379a:	e01b      	b.n	80037d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800379c:	897b      	ldrh	r3, [r7, #10]
 800379e:	11db      	asrs	r3, r3, #7
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	f003 0306 	and.w	r3, r3, #6
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	f063 030f 	orn	r3, r3, #15
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	490e      	ldr	r1, [pc, #56]	; (80037f4 <I2C_MasterRequestWrite+0xfc>)
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f875 	bl	80038aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e010      	b.n	80037ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037ca:	897b      	ldrh	r3, [r7, #10]
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	4907      	ldr	r1, [pc, #28]	; (80037f8 <I2C_MasterRequestWrite+0x100>)
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 f865 	bl	80038aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e000      	b.n	80037ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	00010008 	.word	0x00010008
 80037f8:	00010002 	.word	0x00010002

080037fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	603b      	str	r3, [r7, #0]
 8003808:	4613      	mov	r3, r2
 800380a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800380c:	e025      	b.n	800385a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003814:	d021      	beq.n	800385a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003816:	f7fd ffbb 	bl	8001790 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	429a      	cmp	r2, r3
 8003824:	d302      	bcc.n	800382c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d116      	bne.n	800385a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2220      	movs	r2, #32
 8003836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	f043 0220 	orr.w	r2, r3, #32
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e023      	b.n	80038a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	0c1b      	lsrs	r3, r3, #16
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b01      	cmp	r3, #1
 8003862:	d10d      	bne.n	8003880 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	43da      	mvns	r2, r3
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	4013      	ands	r3, r2
 8003870:	b29b      	uxth	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	bf0c      	ite	eq
 8003876:	2301      	moveq	r3, #1
 8003878:	2300      	movne	r3, #0
 800387a:	b2db      	uxtb	r3, r3
 800387c:	461a      	mov	r2, r3
 800387e:	e00c      	b.n	800389a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	43da      	mvns	r2, r3
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	4013      	ands	r3, r2
 800388c:	b29b      	uxth	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	bf0c      	ite	eq
 8003892:	2301      	moveq	r3, #1
 8003894:	2300      	movne	r3, #0
 8003896:	b2db      	uxtb	r3, r3
 8003898:	461a      	mov	r2, r3
 800389a:	79fb      	ldrb	r3, [r7, #7]
 800389c:	429a      	cmp	r2, r3
 800389e:	d0b6      	beq.n	800380e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b084      	sub	sp, #16
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	60f8      	str	r0, [r7, #12]
 80038b2:	60b9      	str	r1, [r7, #8]
 80038b4:	607a      	str	r2, [r7, #4]
 80038b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038b8:	e051      	b.n	800395e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c8:	d123      	bne.n	8003912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f043 0204 	orr.w	r2, r3, #4
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e046      	b.n	80039a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003918:	d021      	beq.n	800395e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800391a:	f7fd ff39 	bl	8001790 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	429a      	cmp	r2, r3
 8003928:	d302      	bcc.n	8003930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d116      	bne.n	800395e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2220      	movs	r2, #32
 800393a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f043 0220 	orr.w	r2, r3, #32
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e020      	b.n	80039a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	0c1b      	lsrs	r3, r3, #16
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b01      	cmp	r3, #1
 8003966:	d10c      	bne.n	8003982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	43da      	mvns	r2, r3
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	4013      	ands	r3, r2
 8003974:	b29b      	uxth	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	bf14      	ite	ne
 800397a:	2301      	movne	r3, #1
 800397c:	2300      	moveq	r3, #0
 800397e:	b2db      	uxtb	r3, r3
 8003980:	e00b      	b.n	800399a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	43da      	mvns	r2, r3
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	4013      	ands	r3, r2
 800398e:	b29b      	uxth	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	bf14      	ite	ne
 8003994:	2301      	movne	r3, #1
 8003996:	2300      	moveq	r3, #0
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d18d      	bne.n	80038ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039b4:	e02d      	b.n	8003a12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 f878 	bl	8003aac <I2C_IsAcknowledgeFailed>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e02d      	b.n	8003a22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039cc:	d021      	beq.n	8003a12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ce:	f7fd fedf 	bl	8001790 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d302      	bcc.n	80039e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d116      	bne.n	8003a12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2220      	movs	r2, #32
 80039ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	f043 0220 	orr.w	r2, r3, #32
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e007      	b.n	8003a22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1c:	2b80      	cmp	r3, #128	; 0x80
 8003a1e:	d1ca      	bne.n	80039b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b084      	sub	sp, #16
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a36:	e02d      	b.n	8003a94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 f837 	bl	8003aac <I2C_IsAcknowledgeFailed>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e02d      	b.n	8003aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a4e:	d021      	beq.n	8003a94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a50:	f7fd fe9e 	bl	8001790 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d302      	bcc.n	8003a66 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d116      	bne.n	8003a94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a80:	f043 0220 	orr.w	r2, r3, #32
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e007      	b.n	8003aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	f003 0304 	and.w	r3, r3, #4
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d1ca      	bne.n	8003a38 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ac2:	d11b      	bne.n	8003afc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003acc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae8:	f043 0204 	orr.w	r2, r3, #4
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e000      	b.n	8003afe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
	...

08003b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e0cc      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b20:	4b68      	ldr	r3, [pc, #416]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d90c      	bls.n	8003b48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b2e:	4b65      	ldr	r3, [pc, #404]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b36:	4b63      	ldr	r3, [pc, #396]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d001      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0b8      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d020      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b60:	4b59      	ldr	r3, [pc, #356]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	4a58      	ldr	r2, [pc, #352]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d005      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b78:	4b53      	ldr	r3, [pc, #332]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	4a52      	ldr	r2, [pc, #328]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b84:	4b50      	ldr	r3, [pc, #320]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	494d      	ldr	r1, [pc, #308]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d044      	beq.n	8003c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d107      	bne.n	8003bba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003baa:	4b47      	ldr	r3, [pc, #284]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d119      	bne.n	8003bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e07f      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d003      	beq.n	8003bca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bc6:	2b03      	cmp	r3, #3
 8003bc8:	d107      	bne.n	8003bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bca:	4b3f      	ldr	r3, [pc, #252]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d109      	bne.n	8003bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e06f      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bda:	4b3b      	ldr	r3, [pc, #236]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e067      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bea:	4b37      	ldr	r3, [pc, #220]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f023 0203 	bic.w	r2, r3, #3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	4934      	ldr	r1, [pc, #208]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bfc:	f7fd fdc8 	bl	8001790 <HAL_GetTick>
 8003c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c02:	e00a      	b.n	8003c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c04:	f7fd fdc4 	bl	8001790 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e04f      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c1a:	4b2b      	ldr	r3, [pc, #172]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 020c 	and.w	r2, r3, #12
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d1eb      	bne.n	8003c04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c2c:	4b25      	ldr	r3, [pc, #148]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d20c      	bcs.n	8003c54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3a:	4b22      	ldr	r3, [pc, #136]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	b2d2      	uxtb	r2, r2
 8003c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c42:	4b20      	ldr	r3, [pc, #128]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d001      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e032      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c60:	4b19      	ldr	r3, [pc, #100]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	4916      	ldr	r1, [pc, #88]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d009      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c7e:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	490e      	ldr	r1, [pc, #56]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c92:	f000 f821 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8003c96:	4602      	mov	r2, r0
 8003c98:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	091b      	lsrs	r3, r3, #4
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	490a      	ldr	r1, [pc, #40]	; (8003ccc <HAL_RCC_ClockConfig+0x1c0>)
 8003ca4:	5ccb      	ldrb	r3, [r1, r3]
 8003ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8003caa:	4a09      	ldr	r2, [pc, #36]	; (8003cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cae:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fd fd28 	bl	8001708 <HAL_InitTick>

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40023c00 	.word	0x40023c00
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	08005398 	.word	0x08005398
 8003cd0:	20000000 	.word	0x20000000
 8003cd4:	20000004 	.word	0x20000004

08003cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cd8:	b5b0      	push	{r4, r5, r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003cde:	2100      	movs	r1, #0
 8003ce0:	6079      	str	r1, [r7, #4]
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	60f9      	str	r1, [r7, #12]
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003cea:	2100      	movs	r1, #0
 8003cec:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cee:	4952      	ldr	r1, [pc, #328]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x160>)
 8003cf0:	6889      	ldr	r1, [r1, #8]
 8003cf2:	f001 010c 	and.w	r1, r1, #12
 8003cf6:	2908      	cmp	r1, #8
 8003cf8:	d00d      	beq.n	8003d16 <HAL_RCC_GetSysClockFreq+0x3e>
 8003cfa:	2908      	cmp	r1, #8
 8003cfc:	f200 8094 	bhi.w	8003e28 <HAL_RCC_GetSysClockFreq+0x150>
 8003d00:	2900      	cmp	r1, #0
 8003d02:	d002      	beq.n	8003d0a <HAL_RCC_GetSysClockFreq+0x32>
 8003d04:	2904      	cmp	r1, #4
 8003d06:	d003      	beq.n	8003d10 <HAL_RCC_GetSysClockFreq+0x38>
 8003d08:	e08e      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d0a:	4b4c      	ldr	r3, [pc, #304]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x164>)
 8003d0c:	60bb      	str	r3, [r7, #8]
       break;
 8003d0e:	e08e      	b.n	8003e2e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d10:	4b4b      	ldr	r3, [pc, #300]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x168>)
 8003d12:	60bb      	str	r3, [r7, #8]
      break;
 8003d14:	e08b      	b.n	8003e2e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d16:	4948      	ldr	r1, [pc, #288]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d18:	6849      	ldr	r1, [r1, #4]
 8003d1a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003d1e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d20:	4945      	ldr	r1, [pc, #276]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d22:	6849      	ldr	r1, [r1, #4]
 8003d24:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003d28:	2900      	cmp	r1, #0
 8003d2a:	d024      	beq.n	8003d76 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d2c:	4942      	ldr	r1, [pc, #264]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d2e:	6849      	ldr	r1, [r1, #4]
 8003d30:	0989      	lsrs	r1, r1, #6
 8003d32:	4608      	mov	r0, r1
 8003d34:	f04f 0100 	mov.w	r1, #0
 8003d38:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003d3c:	f04f 0500 	mov.w	r5, #0
 8003d40:	ea00 0204 	and.w	r2, r0, r4
 8003d44:	ea01 0305 	and.w	r3, r1, r5
 8003d48:	493d      	ldr	r1, [pc, #244]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x168>)
 8003d4a:	fb01 f003 	mul.w	r0, r1, r3
 8003d4e:	2100      	movs	r1, #0
 8003d50:	fb01 f102 	mul.w	r1, r1, r2
 8003d54:	1844      	adds	r4, r0, r1
 8003d56:	493a      	ldr	r1, [pc, #232]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x168>)
 8003d58:	fba2 0101 	umull	r0, r1, r2, r1
 8003d5c:	1863      	adds	r3, r4, r1
 8003d5e:	4619      	mov	r1, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	461a      	mov	r2, r3
 8003d64:	f04f 0300 	mov.w	r3, #0
 8003d68:	f7fc fa56 	bl	8000218 <__aeabi_uldivmod>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	4613      	mov	r3, r2
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	e04a      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d76:	4b30      	ldr	r3, [pc, #192]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	099b      	lsrs	r3, r3, #6
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	f04f 0300 	mov.w	r3, #0
 8003d82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d86:	f04f 0100 	mov.w	r1, #0
 8003d8a:	ea02 0400 	and.w	r4, r2, r0
 8003d8e:	ea03 0501 	and.w	r5, r3, r1
 8003d92:	4620      	mov	r0, r4
 8003d94:	4629      	mov	r1, r5
 8003d96:	f04f 0200 	mov.w	r2, #0
 8003d9a:	f04f 0300 	mov.w	r3, #0
 8003d9e:	014b      	lsls	r3, r1, #5
 8003da0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003da4:	0142      	lsls	r2, r0, #5
 8003da6:	4610      	mov	r0, r2
 8003da8:	4619      	mov	r1, r3
 8003daa:	1b00      	subs	r0, r0, r4
 8003dac:	eb61 0105 	sbc.w	r1, r1, r5
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	f04f 0300 	mov.w	r3, #0
 8003db8:	018b      	lsls	r3, r1, #6
 8003dba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003dbe:	0182      	lsls	r2, r0, #6
 8003dc0:	1a12      	subs	r2, r2, r0
 8003dc2:	eb63 0301 	sbc.w	r3, r3, r1
 8003dc6:	f04f 0000 	mov.w	r0, #0
 8003dca:	f04f 0100 	mov.w	r1, #0
 8003dce:	00d9      	lsls	r1, r3, #3
 8003dd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dd4:	00d0      	lsls	r0, r2, #3
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	1912      	adds	r2, r2, r4
 8003ddc:	eb45 0303 	adc.w	r3, r5, r3
 8003de0:	f04f 0000 	mov.w	r0, #0
 8003de4:	f04f 0100 	mov.w	r1, #0
 8003de8:	0299      	lsls	r1, r3, #10
 8003dea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003dee:	0290      	lsls	r0, r2, #10
 8003df0:	4602      	mov	r2, r0
 8003df2:	460b      	mov	r3, r1
 8003df4:	4610      	mov	r0, r2
 8003df6:	4619      	mov	r1, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	f04f 0300 	mov.w	r3, #0
 8003e00:	f7fc fa0a 	bl	8000218 <__aeabi_uldivmod>
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	4613      	mov	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e0c:	4b0a      	ldr	r3, [pc, #40]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	0c1b      	lsrs	r3, r3, #16
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	3301      	adds	r3, #1
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e24:	60bb      	str	r3, [r7, #8]
      break;
 8003e26:	e002      	b.n	8003e2e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e28:	4b04      	ldr	r3, [pc, #16]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x164>)
 8003e2a:	60bb      	str	r3, [r7, #8]
      break;
 8003e2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e2e:	68bb      	ldr	r3, [r7, #8]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bdb0      	pop	{r4, r5, r7, pc}
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	00f42400 	.word	0x00f42400
 8003e40:	017d7840 	.word	0x017d7840

08003e44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e48:	4b03      	ldr	r3, [pc, #12]	; (8003e58 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	20000000 	.word	0x20000000

08003e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e60:	f7ff fff0 	bl	8003e44 <HAL_RCC_GetHCLKFreq>
 8003e64:	4602      	mov	r2, r0
 8003e66:	4b05      	ldr	r3, [pc, #20]	; (8003e7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	0a9b      	lsrs	r3, r3, #10
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	4903      	ldr	r1, [pc, #12]	; (8003e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e72:	5ccb      	ldrb	r3, [r1, r3]
 8003e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	080053a8 	.word	0x080053a8

08003e84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e88:	f7ff ffdc 	bl	8003e44 <HAL_RCC_GetHCLKFreq>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	0b5b      	lsrs	r3, r3, #13
 8003e94:	f003 0307 	and.w	r3, r3, #7
 8003e98:	4903      	ldr	r1, [pc, #12]	; (8003ea8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e9a:	5ccb      	ldrb	r3, [r1, r3]
 8003e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	080053a8 	.word	0x080053a8

08003eac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e270      	b.n	80043a0 <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d075      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003eca:	4ba3      	ldr	r3, [pc, #652]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 030c 	and.w	r3, r3, #12
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d00c      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ed6:	4ba0      	ldr	r3, [pc, #640]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d112      	bne.n	8003f08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ee2:	4b9d      	ldr	r3, [pc, #628]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eee:	d10b      	bne.n	8003f08 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef0:	4b99      	ldr	r3, [pc, #612]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d05b      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x108>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d157      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e24b      	b.n	80043a0 <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f10:	d106      	bne.n	8003f20 <HAL_RCC_OscConfig+0x74>
 8003f12:	4b91      	ldr	r3, [pc, #580]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a90      	ldr	r2, [pc, #576]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	e01d      	b.n	8003f5c <HAL_RCC_OscConfig+0xb0>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f28:	d10c      	bne.n	8003f44 <HAL_RCC_OscConfig+0x98>
 8003f2a:	4b8b      	ldr	r3, [pc, #556]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a8a      	ldr	r2, [pc, #552]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	4b88      	ldr	r3, [pc, #544]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a87      	ldr	r2, [pc, #540]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	e00b      	b.n	8003f5c <HAL_RCC_OscConfig+0xb0>
 8003f44:	4b84      	ldr	r3, [pc, #528]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a83      	ldr	r2, [pc, #524]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f4e:	6013      	str	r3, [r2, #0]
 8003f50:	4b81      	ldr	r3, [pc, #516]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a80      	ldr	r2, [pc, #512]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d013      	beq.n	8003f8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f64:	f7fd fc14 	bl	8001790 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f6c:	f7fd fc10 	bl	8001790 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b64      	cmp	r3, #100	; 0x64
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e210      	b.n	80043a0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f7e:	4b76      	ldr	r3, [pc, #472]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d0f0      	beq.n	8003f6c <HAL_RCC_OscConfig+0xc0>
 8003f8a:	e014      	b.n	8003fb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8c:	f7fd fc00 	bl	8001790 <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f94:	f7fd fbfc 	bl	8001790 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b64      	cmp	r3, #100	; 0x64
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e1fc      	b.n	80043a0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fa6:	4b6c      	ldr	r3, [pc, #432]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1f0      	bne.n	8003f94 <HAL_RCC_OscConfig+0xe8>
 8003fb2:	e000      	b.n	8003fb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d063      	beq.n	800408a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003fc2:	4b65      	ldr	r3, [pc, #404]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 030c 	and.w	r3, r3, #12
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00b      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fce:	4b62      	ldr	r3, [pc, #392]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003fd6:	2b08      	cmp	r3, #8
 8003fd8:	d11c      	bne.n	8004014 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fda:	4b5f      	ldr	r3, [pc, #380]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d116      	bne.n	8004014 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fe6:	4b5c      	ldr	r3, [pc, #368]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d005      	beq.n	8003ffe <HAL_RCC_OscConfig+0x152>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d001      	beq.n	8003ffe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e1d0      	b.n	80043a0 <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ffe:	4b56      	ldr	r3, [pc, #344]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	4952      	ldr	r1, [pc, #328]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 800400e:	4313      	orrs	r3, r2
 8004010:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004012:	e03a      	b.n	800408a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d020      	beq.n	800405e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800401c:	4b4f      	ldr	r3, [pc, #316]	; (800415c <HAL_RCC_OscConfig+0x2b0>)
 800401e:	2201      	movs	r2, #1
 8004020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004022:	f7fd fbb5 	bl	8001790 <HAL_GetTick>
 8004026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800402a:	f7fd fbb1 	bl	8001790 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e1b1      	b.n	80043a0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800403c:	4b46      	ldr	r3, [pc, #280]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d0f0      	beq.n	800402a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004048:	4b43      	ldr	r3, [pc, #268]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	4940      	ldr	r1, [pc, #256]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8004058:	4313      	orrs	r3, r2
 800405a:	600b      	str	r3, [r1, #0]
 800405c:	e015      	b.n	800408a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800405e:	4b3f      	ldr	r3, [pc, #252]	; (800415c <HAL_RCC_OscConfig+0x2b0>)
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004064:	f7fd fb94 	bl	8001790 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800406c:	f7fd fb90 	bl	8001790 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e190      	b.n	80043a0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800407e:	4b36      	ldr	r3, [pc, #216]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f0      	bne.n	800406c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0308 	and.w	r3, r3, #8
 8004092:	2b00      	cmp	r3, #0
 8004094:	d030      	beq.n	80040f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d016      	beq.n	80040cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800409e:	4b30      	ldr	r3, [pc, #192]	; (8004160 <HAL_RCC_OscConfig+0x2b4>)
 80040a0:	2201      	movs	r2, #1
 80040a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a4:	f7fd fb74 	bl	8001790 <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040ac:	f7fd fb70 	bl	8001790 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e170      	b.n	80043a0 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040be:	4b26      	ldr	r3, [pc, #152]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 80040c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d0f0      	beq.n	80040ac <HAL_RCC_OscConfig+0x200>
 80040ca:	e015      	b.n	80040f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040cc:	4b24      	ldr	r3, [pc, #144]	; (8004160 <HAL_RCC_OscConfig+0x2b4>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d2:	f7fd fb5d 	bl	8001790 <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040da:	f7fd fb59 	bl	8001790 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e159      	b.n	80043a0 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040ec:	4b1a      	ldr	r3, [pc, #104]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 80040ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1f0      	bne.n	80040da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 80a0 	beq.w	8004246 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004106:	2300      	movs	r3, #0
 8004108:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800410a:	4b13      	ldr	r3, [pc, #76]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10f      	bne.n	8004136 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004116:	2300      	movs	r3, #0
 8004118:	60bb      	str	r3, [r7, #8]
 800411a:	4b0f      	ldr	r3, [pc, #60]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	4a0e      	ldr	r2, [pc, #56]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8004120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004124:	6413      	str	r3, [r2, #64]	; 0x40
 8004126:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800412e:	60bb      	str	r3, [r7, #8]
 8004130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004132:	2301      	movs	r3, #1
 8004134:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004136:	4b0b      	ldr	r3, [pc, #44]	; (8004164 <HAL_RCC_OscConfig+0x2b8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413e:	2b00      	cmp	r3, #0
 8004140:	d121      	bne.n	8004186 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004142:	4b08      	ldr	r3, [pc, #32]	; (8004164 <HAL_RCC_OscConfig+0x2b8>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a07      	ldr	r2, [pc, #28]	; (8004164 <HAL_RCC_OscConfig+0x2b8>)
 8004148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800414c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800414e:	f7fd fb1f 	bl	8001790 <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004154:	e011      	b.n	800417a <HAL_RCC_OscConfig+0x2ce>
 8004156:	bf00      	nop
 8004158:	40023800 	.word	0x40023800
 800415c:	42470000 	.word	0x42470000
 8004160:	42470e80 	.word	0x42470e80
 8004164:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004168:	f7fd fb12 	bl	8001790 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e112      	b.n	80043a0 <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800417a:	4b8b      	ldr	r3, [pc, #556]	; (80043a8 <HAL_RCC_OscConfig+0x4fc>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0f0      	beq.n	8004168 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d106      	bne.n	800419c <HAL_RCC_OscConfig+0x2f0>
 800418e:	4b87      	ldr	r3, [pc, #540]	; (80043ac <HAL_RCC_OscConfig+0x500>)
 8004190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004192:	4a86      	ldr	r2, [pc, #536]	; (80043ac <HAL_RCC_OscConfig+0x500>)
 8004194:	f043 0301 	orr.w	r3, r3, #1
 8004198:	6713      	str	r3, [r2, #112]	; 0x70
 800419a:	e01c      	b.n	80041d6 <HAL_RCC_OscConfig+0x32a>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	2b05      	cmp	r3, #5
 80041a2:	d10c      	bne.n	80041be <HAL_RCC_OscConfig+0x312>
 80041a4:	4b81      	ldr	r3, [pc, #516]	; (80043ac <HAL_RCC_OscConfig+0x500>)
 80041a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a8:	4a80      	ldr	r2, [pc, #512]	; (80043ac <HAL_RCC_OscConfig+0x500>)
 80041aa:	f043 0304 	orr.w	r3, r3, #4
 80041ae:	6713      	str	r3, [r2, #112]	; 0x70
 80041b0:	4b7e      	ldr	r3, [pc, #504]	; (80043ac <HAL_RCC_OscConfig+0x500>)
 80041b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b4:	4a7d      	ldr	r2, [pc, #500]	; (80043ac <HAL_RCC_OscConfig+0x500>)
 80041b6:	f043 0301 	orr.w	r3, r3, #1
 80041ba:	6713      	str	r3, [r2, #112]	; 0x70
 80041bc:	e00b      	b.n	80041d6 <HAL_RCC_OscConfig+0x32a>
 80041be:	4b7b      	ldr	r3, [pc, #492]	; (80043ac <HAL_RCC_OscConfig+0x500>)
 80041c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c2:	4a7a      	ldr	r2, [pc, #488]	; (80043ac <HAL_RCC_OscConfig+0x500>)
 80041c4:	f023 0301 	bic.w	r3, r3, #1
 80041c8:	6713      	str	r3, [r2, #112]	; 0x70
 80041ca:	4b78      	ldr	r3, [pc, #480]	; (80043ac <HAL_RCC_OscConfig+0x500>)
 80041cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ce:	4a77      	ldr	r2, [pc, #476]	; (80043ac <HAL_RCC_OscConfig+0x500>)
 80041d0:	f023 0304 	bic.w	r3, r3, #4
 80041d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d015      	beq.n	800420a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041de:	f7fd fad7 	bl	8001790 <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e4:	e00a      	b.n	80041fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041e6:	f7fd fad3 	bl	8001790 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e0d1      	b.n	80043a0 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041fc:	4b6b      	ldr	r3, [pc, #428]	; (80043ac <HAL_RCC_OscConfig+0x500>)
 80041fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0ee      	beq.n	80041e6 <HAL_RCC_OscConfig+0x33a>
 8004208:	e014      	b.n	8004234 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420a:	f7fd fac1 	bl	8001790 <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004210:	e00a      	b.n	8004228 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004212:	f7fd fabd 	bl	8001790 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004220:	4293      	cmp	r3, r2
 8004222:	d901      	bls.n	8004228 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e0bb      	b.n	80043a0 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004228:	4b60      	ldr	r3, [pc, #384]	; (80043ac <HAL_RCC_OscConfig+0x500>)
 800422a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1ee      	bne.n	8004212 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004234:	7dfb      	ldrb	r3, [r7, #23]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d105      	bne.n	8004246 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800423a:	4b5c      	ldr	r3, [pc, #368]	; (80043ac <HAL_RCC_OscConfig+0x500>)
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	4a5b      	ldr	r2, [pc, #364]	; (80043ac <HAL_RCC_OscConfig+0x500>)
 8004240:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004244:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 80a7 	beq.w	800439e <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004250:	4b56      	ldr	r3, [pc, #344]	; (80043ac <HAL_RCC_OscConfig+0x500>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 030c 	and.w	r3, r3, #12
 8004258:	2b08      	cmp	r3, #8
 800425a:	d060      	beq.n	800431e <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	2b02      	cmp	r3, #2
 8004262:	d145      	bne.n	80042f0 <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004264:	4b52      	ldr	r3, [pc, #328]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426a:	f7fd fa91 	bl	8001790 <HAL_GetTick>
 800426e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004270:	e008      	b.n	8004284 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004272:	f7fd fa8d 	bl	8001790 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d901      	bls.n	8004284 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e08d      	b.n	80043a0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004284:	4b49      	ldr	r3, [pc, #292]	; (80043ac <HAL_RCC_OscConfig+0x500>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1f0      	bne.n	8004272 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	69da      	ldr	r2, [r3, #28]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	431a      	orrs	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	019b      	lsls	r3, r3, #6
 80042a0:	431a      	orrs	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a6:	085b      	lsrs	r3, r3, #1
 80042a8:	3b01      	subs	r3, #1
 80042aa:	041b      	lsls	r3, r3, #16
 80042ac:	431a      	orrs	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b2:	061b      	lsls	r3, r3, #24
 80042b4:	431a      	orrs	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ba:	071b      	lsls	r3, r3, #28
 80042bc:	493b      	ldr	r1, [pc, #236]	; (80043ac <HAL_RCC_OscConfig+0x500>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042c2:	4b3b      	ldr	r3, [pc, #236]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 80042c4:	2201      	movs	r2, #1
 80042c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c8:	f7fd fa62 	bl	8001790 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042d0:	f7fd fa5e 	bl	8001790 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e05e      	b.n	80043a0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042e2:	4b32      	ldr	r3, [pc, #200]	; (80043ac <HAL_RCC_OscConfig+0x500>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0f0      	beq.n	80042d0 <HAL_RCC_OscConfig+0x424>
 80042ee:	e056      	b.n	800439e <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f0:	4b2f      	ldr	r3, [pc, #188]	; (80043b0 <HAL_RCC_OscConfig+0x504>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f6:	f7fd fa4b 	bl	8001790 <HAL_GetTick>
 80042fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042fc:	e008      	b.n	8004310 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042fe:	f7fd fa47 	bl	8001790 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e047      	b.n	80043a0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004310:	4b26      	ldr	r3, [pc, #152]	; (80043ac <HAL_RCC_OscConfig+0x500>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1f0      	bne.n	80042fe <HAL_RCC_OscConfig+0x452>
 800431c:	e03f      	b.n	800439e <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d101      	bne.n	800432a <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e03a      	b.n	80043a0 <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800432a:	4b20      	ldr	r3, [pc, #128]	; (80043ac <HAL_RCC_OscConfig+0x500>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d030      	beq.n	800439a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004342:	429a      	cmp	r2, r3
 8004344:	d129      	bne.n	800439a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004350:	429a      	cmp	r2, r3
 8004352:	d122      	bne.n	800439a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800435a:	4013      	ands	r3, r2
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004360:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004362:	4293      	cmp	r3, r2
 8004364:	d119      	bne.n	800439a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004370:	085b      	lsrs	r3, r3, #1
 8004372:	3b01      	subs	r3, #1
 8004374:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004376:	429a      	cmp	r2, r3
 8004378:	d10f      	bne.n	800439a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004384:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004386:	429a      	cmp	r2, r3
 8004388:	d107      	bne.n	800439a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004394:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004396:	429a      	cmp	r2, r3
 8004398:	d001      	beq.n	800439e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e000      	b.n	80043a0 <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	40007000 	.word	0x40007000
 80043ac:	40023800 	.word	0x40023800
 80043b0:	42470060 	.word	0x42470060

080043b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e041      	b.n	800444a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d106      	bne.n	80043e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7fd f858 	bl	8001490 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3304      	adds	r3, #4
 80043f0:	4619      	mov	r1, r3
 80043f2:	4610      	mov	r0, r2
 80043f4:	f000 faa0 	bl	8004938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b01      	cmp	r3, #1
 8004466:	d001      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e04e      	b.n	800450a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0201 	orr.w	r2, r2, #1
 8004482:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a23      	ldr	r2, [pc, #140]	; (8004518 <HAL_TIM_Base_Start_IT+0xc4>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d022      	beq.n	80044d4 <HAL_TIM_Base_Start_IT+0x80>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004496:	d01d      	beq.n	80044d4 <HAL_TIM_Base_Start_IT+0x80>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a1f      	ldr	r2, [pc, #124]	; (800451c <HAL_TIM_Base_Start_IT+0xc8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d018      	beq.n	80044d4 <HAL_TIM_Base_Start_IT+0x80>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a1e      	ldr	r2, [pc, #120]	; (8004520 <HAL_TIM_Base_Start_IT+0xcc>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d013      	beq.n	80044d4 <HAL_TIM_Base_Start_IT+0x80>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a1c      	ldr	r2, [pc, #112]	; (8004524 <HAL_TIM_Base_Start_IT+0xd0>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00e      	beq.n	80044d4 <HAL_TIM_Base_Start_IT+0x80>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a1b      	ldr	r2, [pc, #108]	; (8004528 <HAL_TIM_Base_Start_IT+0xd4>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d009      	beq.n	80044d4 <HAL_TIM_Base_Start_IT+0x80>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a19      	ldr	r2, [pc, #100]	; (800452c <HAL_TIM_Base_Start_IT+0xd8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d004      	beq.n	80044d4 <HAL_TIM_Base_Start_IT+0x80>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a18      	ldr	r2, [pc, #96]	; (8004530 <HAL_TIM_Base_Start_IT+0xdc>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d111      	bne.n	80044f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2b06      	cmp	r3, #6
 80044e4:	d010      	beq.n	8004508 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f042 0201 	orr.w	r2, r2, #1
 80044f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f6:	e007      	b.n	8004508 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0201 	orr.w	r2, r2, #1
 8004506:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	40010000 	.word	0x40010000
 800451c:	40000400 	.word	0x40000400
 8004520:	40000800 	.word	0x40000800
 8004524:	40000c00 	.word	0x40000c00
 8004528:	40010400 	.word	0x40010400
 800452c:	40014000 	.word	0x40014000
 8004530:	40001800 	.word	0x40001800

08004534 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b02      	cmp	r3, #2
 8004548:	d122      	bne.n	8004590 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b02      	cmp	r3, #2
 8004556:	d11b      	bne.n	8004590 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f06f 0202 	mvn.w	r2, #2
 8004560:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f9bf 	bl	80048fa <HAL_TIM_IC_CaptureCallback>
 800457c:	e005      	b.n	800458a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f9b1 	bl	80048e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f9c2 	bl	800490e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0304 	and.w	r3, r3, #4
 800459a:	2b04      	cmp	r3, #4
 800459c:	d122      	bne.n	80045e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d11b      	bne.n	80045e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f06f 0204 	mvn.w	r2, #4
 80045b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2202      	movs	r2, #2
 80045ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f995 	bl	80048fa <HAL_TIM_IC_CaptureCallback>
 80045d0:	e005      	b.n	80045de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f987 	bl	80048e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f998 	bl	800490e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	2b08      	cmp	r3, #8
 80045f0:	d122      	bne.n	8004638 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d11b      	bne.n	8004638 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0208 	mvn.w	r2, #8
 8004608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2204      	movs	r2, #4
 800460e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	f003 0303 	and.w	r3, r3, #3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f96b 	bl	80048fa <HAL_TIM_IC_CaptureCallback>
 8004624:	e005      	b.n	8004632 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f95d 	bl	80048e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f96e 	bl	800490e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f003 0310 	and.w	r3, r3, #16
 8004642:	2b10      	cmp	r3, #16
 8004644:	d122      	bne.n	800468c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f003 0310 	and.w	r3, r3, #16
 8004650:	2b10      	cmp	r3, #16
 8004652:	d11b      	bne.n	800468c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f06f 0210 	mvn.w	r2, #16
 800465c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2208      	movs	r2, #8
 8004662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f941 	bl	80048fa <HAL_TIM_IC_CaptureCallback>
 8004678:	e005      	b.n	8004686 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f933 	bl	80048e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f944 	bl	800490e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b01      	cmp	r3, #1
 8004698:	d10e      	bne.n	80046b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d107      	bne.n	80046b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f06f 0201 	mvn.w	r2, #1
 80046b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f90d 	bl	80048d2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c2:	2b80      	cmp	r3, #128	; 0x80
 80046c4:	d10e      	bne.n	80046e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d0:	2b80      	cmp	r3, #128	; 0x80
 80046d2:	d107      	bne.n	80046e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 faea 	bl	8004cb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ee:	2b40      	cmp	r3, #64	; 0x40
 80046f0:	d10e      	bne.n	8004710 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fc:	2b40      	cmp	r3, #64	; 0x40
 80046fe:	d107      	bne.n	8004710 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f909 	bl	8004922 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	f003 0320 	and.w	r3, r3, #32
 800471a:	2b20      	cmp	r3, #32
 800471c:	d10e      	bne.n	800473c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f003 0320 	and.w	r3, r3, #32
 8004728:	2b20      	cmp	r3, #32
 800472a:	d107      	bne.n	800473c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f06f 0220 	mvn.w	r2, #32
 8004734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fab4 	bl	8004ca4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800473c:	bf00      	nop
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_TIM_ConfigClockSource+0x1c>
 800475c:	2302      	movs	r3, #2
 800475e:	e0b4      	b.n	80048ca <HAL_TIM_ConfigClockSource+0x186>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2202      	movs	r2, #2
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800477e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004786:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004798:	d03e      	beq.n	8004818 <HAL_TIM_ConfigClockSource+0xd4>
 800479a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800479e:	f200 8087 	bhi.w	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
 80047a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a6:	f000 8086 	beq.w	80048b6 <HAL_TIM_ConfigClockSource+0x172>
 80047aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ae:	d87f      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
 80047b0:	2b70      	cmp	r3, #112	; 0x70
 80047b2:	d01a      	beq.n	80047ea <HAL_TIM_ConfigClockSource+0xa6>
 80047b4:	2b70      	cmp	r3, #112	; 0x70
 80047b6:	d87b      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
 80047b8:	2b60      	cmp	r3, #96	; 0x60
 80047ba:	d050      	beq.n	800485e <HAL_TIM_ConfigClockSource+0x11a>
 80047bc:	2b60      	cmp	r3, #96	; 0x60
 80047be:	d877      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
 80047c0:	2b50      	cmp	r3, #80	; 0x50
 80047c2:	d03c      	beq.n	800483e <HAL_TIM_ConfigClockSource+0xfa>
 80047c4:	2b50      	cmp	r3, #80	; 0x50
 80047c6:	d873      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
 80047c8:	2b40      	cmp	r3, #64	; 0x40
 80047ca:	d058      	beq.n	800487e <HAL_TIM_ConfigClockSource+0x13a>
 80047cc:	2b40      	cmp	r3, #64	; 0x40
 80047ce:	d86f      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
 80047d0:	2b30      	cmp	r3, #48	; 0x30
 80047d2:	d064      	beq.n	800489e <HAL_TIM_ConfigClockSource+0x15a>
 80047d4:	2b30      	cmp	r3, #48	; 0x30
 80047d6:	d86b      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
 80047d8:	2b20      	cmp	r3, #32
 80047da:	d060      	beq.n	800489e <HAL_TIM_ConfigClockSource+0x15a>
 80047dc:	2b20      	cmp	r3, #32
 80047de:	d867      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d05c      	beq.n	800489e <HAL_TIM_ConfigClockSource+0x15a>
 80047e4:	2b10      	cmp	r3, #16
 80047e6:	d05a      	beq.n	800489e <HAL_TIM_ConfigClockSource+0x15a>
 80047e8:	e062      	b.n	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6818      	ldr	r0, [r3, #0]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	6899      	ldr	r1, [r3, #8]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f000 f9b7 	bl	8004b6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800480c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	609a      	str	r2, [r3, #8]
      break;
 8004816:	e04f      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6818      	ldr	r0, [r3, #0]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	6899      	ldr	r1, [r3, #8]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f000 f9a0 	bl	8004b6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689a      	ldr	r2, [r3, #8]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800483a:	609a      	str	r2, [r3, #8]
      break;
 800483c:	e03c      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6818      	ldr	r0, [r3, #0]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	6859      	ldr	r1, [r3, #4]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	461a      	mov	r2, r3
 800484c:	f000 f914 	bl	8004a78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2150      	movs	r1, #80	; 0x50
 8004856:	4618      	mov	r0, r3
 8004858:	f000 f96d 	bl	8004b36 <TIM_ITRx_SetConfig>
      break;
 800485c:	e02c      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6818      	ldr	r0, [r3, #0]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	6859      	ldr	r1, [r3, #4]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	461a      	mov	r2, r3
 800486c:	f000 f933 	bl	8004ad6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2160      	movs	r1, #96	; 0x60
 8004876:	4618      	mov	r0, r3
 8004878:	f000 f95d 	bl	8004b36 <TIM_ITRx_SetConfig>
      break;
 800487c:	e01c      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6818      	ldr	r0, [r3, #0]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	6859      	ldr	r1, [r3, #4]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	461a      	mov	r2, r3
 800488c:	f000 f8f4 	bl	8004a78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2140      	movs	r1, #64	; 0x40
 8004896:	4618      	mov	r0, r3
 8004898:	f000 f94d 	bl	8004b36 <TIM_ITRx_SetConfig>
      break;
 800489c:	e00c      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4619      	mov	r1, r3
 80048a8:	4610      	mov	r0, r2
 80048aa:	f000 f944 	bl	8004b36 <TIM_ITRx_SetConfig>
      break;
 80048ae:	e003      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	73fb      	strb	r3, [r7, #15]
      break;
 80048b4:	e000      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b083      	sub	sp, #12
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048ee:	bf00      	nop
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b083      	sub	sp, #12
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004902:	bf00      	nop
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004922:	b480      	push	{r7}
 8004924:	b083      	sub	sp, #12
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800492a:	bf00      	nop
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
	...

08004938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a40      	ldr	r2, [pc, #256]	; (8004a4c <TIM_Base_SetConfig+0x114>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d013      	beq.n	8004978 <TIM_Base_SetConfig+0x40>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004956:	d00f      	beq.n	8004978 <TIM_Base_SetConfig+0x40>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a3d      	ldr	r2, [pc, #244]	; (8004a50 <TIM_Base_SetConfig+0x118>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d00b      	beq.n	8004978 <TIM_Base_SetConfig+0x40>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a3c      	ldr	r2, [pc, #240]	; (8004a54 <TIM_Base_SetConfig+0x11c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d007      	beq.n	8004978 <TIM_Base_SetConfig+0x40>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a3b      	ldr	r2, [pc, #236]	; (8004a58 <TIM_Base_SetConfig+0x120>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d003      	beq.n	8004978 <TIM_Base_SetConfig+0x40>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a3a      	ldr	r2, [pc, #232]	; (8004a5c <TIM_Base_SetConfig+0x124>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d108      	bne.n	800498a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800497e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a2f      	ldr	r2, [pc, #188]	; (8004a4c <TIM_Base_SetConfig+0x114>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d02b      	beq.n	80049ea <TIM_Base_SetConfig+0xb2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004998:	d027      	beq.n	80049ea <TIM_Base_SetConfig+0xb2>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a2c      	ldr	r2, [pc, #176]	; (8004a50 <TIM_Base_SetConfig+0x118>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d023      	beq.n	80049ea <TIM_Base_SetConfig+0xb2>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a2b      	ldr	r2, [pc, #172]	; (8004a54 <TIM_Base_SetConfig+0x11c>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d01f      	beq.n	80049ea <TIM_Base_SetConfig+0xb2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a2a      	ldr	r2, [pc, #168]	; (8004a58 <TIM_Base_SetConfig+0x120>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d01b      	beq.n	80049ea <TIM_Base_SetConfig+0xb2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a29      	ldr	r2, [pc, #164]	; (8004a5c <TIM_Base_SetConfig+0x124>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d017      	beq.n	80049ea <TIM_Base_SetConfig+0xb2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a28      	ldr	r2, [pc, #160]	; (8004a60 <TIM_Base_SetConfig+0x128>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d013      	beq.n	80049ea <TIM_Base_SetConfig+0xb2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a27      	ldr	r2, [pc, #156]	; (8004a64 <TIM_Base_SetConfig+0x12c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d00f      	beq.n	80049ea <TIM_Base_SetConfig+0xb2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a26      	ldr	r2, [pc, #152]	; (8004a68 <TIM_Base_SetConfig+0x130>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d00b      	beq.n	80049ea <TIM_Base_SetConfig+0xb2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a25      	ldr	r2, [pc, #148]	; (8004a6c <TIM_Base_SetConfig+0x134>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d007      	beq.n	80049ea <TIM_Base_SetConfig+0xb2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a24      	ldr	r2, [pc, #144]	; (8004a70 <TIM_Base_SetConfig+0x138>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d003      	beq.n	80049ea <TIM_Base_SetConfig+0xb2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a23      	ldr	r2, [pc, #140]	; (8004a74 <TIM_Base_SetConfig+0x13c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d108      	bne.n	80049fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a0a      	ldr	r2, [pc, #40]	; (8004a4c <TIM_Base_SetConfig+0x114>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d003      	beq.n	8004a30 <TIM_Base_SetConfig+0xf8>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a0c      	ldr	r2, [pc, #48]	; (8004a5c <TIM_Base_SetConfig+0x124>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d103      	bne.n	8004a38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	691a      	ldr	r2, [r3, #16]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	615a      	str	r2, [r3, #20]
}
 8004a3e:	bf00      	nop
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	40010000 	.word	0x40010000
 8004a50:	40000400 	.word	0x40000400
 8004a54:	40000800 	.word	0x40000800
 8004a58:	40000c00 	.word	0x40000c00
 8004a5c:	40010400 	.word	0x40010400
 8004a60:	40014000 	.word	0x40014000
 8004a64:	40014400 	.word	0x40014400
 8004a68:	40014800 	.word	0x40014800
 8004a6c:	40001800 	.word	0x40001800
 8004a70:	40001c00 	.word	0x40001c00
 8004a74:	40002000 	.word	0x40002000

08004a78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	f023 0201 	bic.w	r2, r3, #1
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004aa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	011b      	lsls	r3, r3, #4
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f023 030a 	bic.w	r3, r3, #10
 8004ab4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	621a      	str	r2, [r3, #32]
}
 8004aca:	bf00      	nop
 8004acc:	371c      	adds	r7, #28
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b087      	sub	sp, #28
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	60f8      	str	r0, [r7, #12]
 8004ade:	60b9      	str	r1, [r7, #8]
 8004ae0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	f023 0210 	bic.w	r2, r3, #16
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	031b      	lsls	r3, r3, #12
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	011b      	lsls	r3, r3, #4
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	621a      	str	r2, [r3, #32]
}
 8004b2a:	bf00      	nop
 8004b2c:	371c      	adds	r7, #28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b085      	sub	sp, #20
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
 8004b3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	f043 0307 	orr.w	r3, r3, #7
 8004b58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	609a      	str	r2, [r3, #8]
}
 8004b60:	bf00      	nop
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
 8004b78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	021a      	lsls	r2, r3, #8
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	609a      	str	r2, [r3, #8]
}
 8004ba0:	bf00      	nop
 8004ba2:	371c      	adds	r7, #28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d101      	bne.n	8004bc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	e05a      	b.n	8004c7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a21      	ldr	r2, [pc, #132]	; (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d022      	beq.n	8004c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c10:	d01d      	beq.n	8004c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a1d      	ldr	r2, [pc, #116]	; (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d018      	beq.n	8004c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a1b      	ldr	r2, [pc, #108]	; (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d013      	beq.n	8004c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a1a      	ldr	r2, [pc, #104]	; (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d00e      	beq.n	8004c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a18      	ldr	r2, [pc, #96]	; (8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d009      	beq.n	8004c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a17      	ldr	r2, [pc, #92]	; (8004c9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d004      	beq.n	8004c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a15      	ldr	r2, [pc, #84]	; (8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d10c      	bne.n	8004c68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3714      	adds	r7, #20
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	40010000 	.word	0x40010000
 8004c8c:	40000400 	.word	0x40000400
 8004c90:	40000800 	.word	0x40000800
 8004c94:	40000c00 	.word	0x40000c00
 8004c98:	40010400 	.word	0x40010400
 8004c9c:	40014000 	.word	0x40014000
 8004ca0:	40001800 	.word	0x40001800

08004ca4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e03f      	b.n	8004d5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d106      	bne.n	8004cf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7fc fbf4 	bl	80014e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2224      	movs	r2, #36	; 0x24
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f929 	bl	8004f68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	691a      	ldr	r2, [r3, #16]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	695a      	ldr	r2, [r3, #20]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68da      	ldr	r2, [r3, #12]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2220      	movs	r2, #32
 8004d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b08a      	sub	sp, #40	; 0x28
 8004d6a:	af02      	add	r7, sp, #8
 8004d6c:	60f8      	str	r0, [r7, #12]
 8004d6e:	60b9      	str	r1, [r7, #8]
 8004d70:	603b      	str	r3, [r7, #0]
 8004d72:	4613      	mov	r3, r2
 8004d74:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b20      	cmp	r3, #32
 8004d84:	d17c      	bne.n	8004e80 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d002      	beq.n	8004d92 <HAL_UART_Transmit+0x2c>
 8004d8c:	88fb      	ldrh	r3, [r7, #6]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e075      	b.n	8004e82 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_UART_Transmit+0x3e>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e06e      	b.n	8004e82 <HAL_UART_Transmit+0x11c>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2221      	movs	r2, #33	; 0x21
 8004db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dba:	f7fc fce9 	bl	8001790 <HAL_GetTick>
 8004dbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	88fa      	ldrh	r2, [r7, #6]
 8004dc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	88fa      	ldrh	r2, [r7, #6]
 8004dca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd4:	d108      	bne.n	8004de8 <HAL_UART_Transmit+0x82>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d104      	bne.n	8004de8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	61bb      	str	r3, [r7, #24]
 8004de6:	e003      	b.n	8004df0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dec:	2300      	movs	r3, #0
 8004dee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004df8:	e02a      	b.n	8004e50 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2200      	movs	r2, #0
 8004e02:	2180      	movs	r1, #128	; 0x80
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 f840 	bl	8004e8a <UART_WaitOnFlagUntilTimeout>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e036      	b.n	8004e82 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10b      	bne.n	8004e32 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	881b      	ldrh	r3, [r3, #0]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	3302      	adds	r3, #2
 8004e2e:	61bb      	str	r3, [r7, #24]
 8004e30:	e007      	b.n	8004e42 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	781a      	ldrb	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1cf      	bne.n	8004dfa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2200      	movs	r2, #0
 8004e62:	2140      	movs	r1, #64	; 0x40
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 f810 	bl	8004e8a <UART_WaitOnFlagUntilTimeout>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e006      	b.n	8004e82 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2220      	movs	r2, #32
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	e000      	b.n	8004e82 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e80:	2302      	movs	r3, #2
  }
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3720      	adds	r7, #32
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b090      	sub	sp, #64	; 0x40
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	60f8      	str	r0, [r7, #12]
 8004e92:	60b9      	str	r1, [r7, #8]
 8004e94:	603b      	str	r3, [r7, #0]
 8004e96:	4613      	mov	r3, r2
 8004e98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e9a:	e050      	b.n	8004f3e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ea2:	d04c      	beq.n	8004f3e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d007      	beq.n	8004eba <UART_WaitOnFlagUntilTimeout+0x30>
 8004eaa:	f7fc fc71 	bl	8001790 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d241      	bcs.n	8004f3e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	330c      	adds	r3, #12
 8004ec0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec4:	e853 3f00 	ldrex	r3, [r3]
 8004ec8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	330c      	adds	r3, #12
 8004ed8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004eda:	637a      	str	r2, [r7, #52]	; 0x34
 8004edc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ede:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ee0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ee2:	e841 2300 	strex	r3, r2, [r1]
 8004ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1e5      	bne.n	8004eba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	3314      	adds	r3, #20
 8004ef4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	e853 3f00 	ldrex	r3, [r3]
 8004efc:	613b      	str	r3, [r7, #16]
   return(result);
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f023 0301 	bic.w	r3, r3, #1
 8004f04:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	3314      	adds	r3, #20
 8004f0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f0e:	623a      	str	r2, [r7, #32]
 8004f10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f12:	69f9      	ldr	r1, [r7, #28]
 8004f14:	6a3a      	ldr	r2, [r7, #32]
 8004f16:	e841 2300 	strex	r3, r2, [r1]
 8004f1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1e5      	bne.n	8004eee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2220      	movs	r2, #32
 8004f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e00f      	b.n	8004f5e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	4013      	ands	r3, r2
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	bf0c      	ite	eq
 8004f4e:	2301      	moveq	r3, #1
 8004f50:	2300      	movne	r3, #0
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	461a      	mov	r2, r3
 8004f56:	79fb      	ldrb	r3, [r7, #7]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d09f      	beq.n	8004e9c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3740      	adds	r7, #64	; 0x40
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f6c:	b09f      	sub	sp, #124	; 0x7c
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f7e:	68d9      	ldr	r1, [r3, #12]
 8004f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	ea40 0301 	orr.w	r3, r0, r1
 8004f88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f8c:	689a      	ldr	r2, [r3, #8]
 8004f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	431a      	orrs	r2, r3
 8004f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004fac:	f021 010c 	bic.w	r1, r1, #12
 8004fb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fb6:	430b      	orrs	r3, r1
 8004fb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc6:	6999      	ldr	r1, [r3, #24]
 8004fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	ea40 0301 	orr.w	r3, r0, r1
 8004fd0:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8004fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	4b6a      	ldr	r3, [pc, #424]	; (8005180 <UART_SetConfig+0x218>)
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d00e      	beq.n	8004ffa <UART_SetConfig+0x92>
 8004fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	4b68      	ldr	r3, [pc, #416]	; (8005184 <UART_SetConfig+0x21c>)
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d009      	beq.n	8004ffa <UART_SetConfig+0x92>
 8004fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	4b67      	ldr	r3, [pc, #412]	; (8005188 <UART_SetConfig+0x220>)
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d004      	beq.n	8004ffa <UART_SetConfig+0x92>
 8004ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	4b65      	ldr	r3, [pc, #404]	; (800518c <UART_SetConfig+0x224>)
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d103      	bne.n	8005002 <UART_SetConfig+0x9a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ffa:	f7fe ff43 	bl	8003e84 <HAL_RCC_GetPCLK2Freq>
 8004ffe:	6778      	str	r0, [r7, #116]	; 0x74
 8005000:	e002      	b.n	8005008 <UART_SetConfig+0xa0>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005002:	f7fe ff2b 	bl	8003e5c <HAL_RCC_GetPCLK1Freq>
 8005006:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005010:	f040 80c0 	bne.w	8005194 <UART_SetConfig+0x22c>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005014:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005016:	461c      	mov	r4, r3
 8005018:	f04f 0500 	mov.w	r5, #0
 800501c:	4622      	mov	r2, r4
 800501e:	462b      	mov	r3, r5
 8005020:	1891      	adds	r1, r2, r2
 8005022:	6439      	str	r1, [r7, #64]	; 0x40
 8005024:	415b      	adcs	r3, r3
 8005026:	647b      	str	r3, [r7, #68]	; 0x44
 8005028:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800502c:	1912      	adds	r2, r2, r4
 800502e:	eb45 0303 	adc.w	r3, r5, r3
 8005032:	f04f 0000 	mov.w	r0, #0
 8005036:	f04f 0100 	mov.w	r1, #0
 800503a:	00d9      	lsls	r1, r3, #3
 800503c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005040:	00d0      	lsls	r0, r2, #3
 8005042:	4602      	mov	r2, r0
 8005044:	460b      	mov	r3, r1
 8005046:	1911      	adds	r1, r2, r4
 8005048:	6639      	str	r1, [r7, #96]	; 0x60
 800504a:	416b      	adcs	r3, r5
 800504c:	667b      	str	r3, [r7, #100]	; 0x64
 800504e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	461a      	mov	r2, r3
 8005054:	f04f 0300 	mov.w	r3, #0
 8005058:	1891      	adds	r1, r2, r2
 800505a:	63b9      	str	r1, [r7, #56]	; 0x38
 800505c:	415b      	adcs	r3, r3
 800505e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005060:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005064:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005068:	f7fb f8d6 	bl	8000218 <__aeabi_uldivmod>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	4b47      	ldr	r3, [pc, #284]	; (8005190 <UART_SetConfig+0x228>)
 8005072:	fba3 2302 	umull	r2, r3, r3, r2
 8005076:	095b      	lsrs	r3, r3, #5
 8005078:	011e      	lsls	r6, r3, #4
 800507a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800507c:	461c      	mov	r4, r3
 800507e:	f04f 0500 	mov.w	r5, #0
 8005082:	4622      	mov	r2, r4
 8005084:	462b      	mov	r3, r5
 8005086:	1891      	adds	r1, r2, r2
 8005088:	6339      	str	r1, [r7, #48]	; 0x30
 800508a:	415b      	adcs	r3, r3
 800508c:	637b      	str	r3, [r7, #52]	; 0x34
 800508e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005092:	1912      	adds	r2, r2, r4
 8005094:	eb45 0303 	adc.w	r3, r5, r3
 8005098:	f04f 0000 	mov.w	r0, #0
 800509c:	f04f 0100 	mov.w	r1, #0
 80050a0:	00d9      	lsls	r1, r3, #3
 80050a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050a6:	00d0      	lsls	r0, r2, #3
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	1911      	adds	r1, r2, r4
 80050ae:	65b9      	str	r1, [r7, #88]	; 0x58
 80050b0:	416b      	adcs	r3, r5
 80050b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	461a      	mov	r2, r3
 80050ba:	f04f 0300 	mov.w	r3, #0
 80050be:	1891      	adds	r1, r2, r2
 80050c0:	62b9      	str	r1, [r7, #40]	; 0x28
 80050c2:	415b      	adcs	r3, r3
 80050c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050ca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80050ce:	f7fb f8a3 	bl	8000218 <__aeabi_uldivmod>
 80050d2:	4602      	mov	r2, r0
 80050d4:	460b      	mov	r3, r1
 80050d6:	4b2e      	ldr	r3, [pc, #184]	; (8005190 <UART_SetConfig+0x228>)
 80050d8:	fba3 1302 	umull	r1, r3, r3, r2
 80050dc:	095b      	lsrs	r3, r3, #5
 80050de:	2164      	movs	r1, #100	; 0x64
 80050e0:	fb01 f303 	mul.w	r3, r1, r3
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	3332      	adds	r3, #50	; 0x32
 80050ea:	4a29      	ldr	r2, [pc, #164]	; (8005190 <UART_SetConfig+0x228>)
 80050ec:	fba2 2303 	umull	r2, r3, r2, r3
 80050f0:	095b      	lsrs	r3, r3, #5
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050f8:	441e      	add	r6, r3
 80050fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050fc:	4618      	mov	r0, r3
 80050fe:	f04f 0100 	mov.w	r1, #0
 8005102:	4602      	mov	r2, r0
 8005104:	460b      	mov	r3, r1
 8005106:	1894      	adds	r4, r2, r2
 8005108:	623c      	str	r4, [r7, #32]
 800510a:	415b      	adcs	r3, r3
 800510c:	627b      	str	r3, [r7, #36]	; 0x24
 800510e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005112:	1812      	adds	r2, r2, r0
 8005114:	eb41 0303 	adc.w	r3, r1, r3
 8005118:	f04f 0400 	mov.w	r4, #0
 800511c:	f04f 0500 	mov.w	r5, #0
 8005120:	00dd      	lsls	r5, r3, #3
 8005122:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005126:	00d4      	lsls	r4, r2, #3
 8005128:	4622      	mov	r2, r4
 800512a:	462b      	mov	r3, r5
 800512c:	1814      	adds	r4, r2, r0
 800512e:	653c      	str	r4, [r7, #80]	; 0x50
 8005130:	414b      	adcs	r3, r1
 8005132:	657b      	str	r3, [r7, #84]	; 0x54
 8005134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	461a      	mov	r2, r3
 800513a:	f04f 0300 	mov.w	r3, #0
 800513e:	1891      	adds	r1, r2, r2
 8005140:	61b9      	str	r1, [r7, #24]
 8005142:	415b      	adcs	r3, r3
 8005144:	61fb      	str	r3, [r7, #28]
 8005146:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800514a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800514e:	f7fb f863 	bl	8000218 <__aeabi_uldivmod>
 8005152:	4602      	mov	r2, r0
 8005154:	460b      	mov	r3, r1
 8005156:	4b0e      	ldr	r3, [pc, #56]	; (8005190 <UART_SetConfig+0x228>)
 8005158:	fba3 1302 	umull	r1, r3, r3, r2
 800515c:	095b      	lsrs	r3, r3, #5
 800515e:	2164      	movs	r1, #100	; 0x64
 8005160:	fb01 f303 	mul.w	r3, r1, r3
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	3332      	adds	r3, #50	; 0x32
 800516a:	4a09      	ldr	r2, [pc, #36]	; (8005190 <UART_SetConfig+0x228>)
 800516c:	fba2 2303 	umull	r2, r3, r2, r3
 8005170:	095b      	lsrs	r3, r3, #5
 8005172:	f003 0207 	and.w	r2, r3, #7
 8005176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4432      	add	r2, r6
 800517c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800517e:	e0c3      	b.n	8005308 <UART_SetConfig+0x3a0>
 8005180:	40011000 	.word	0x40011000
 8005184:	40011400 	.word	0x40011400
 8005188:	40011800 	.word	0x40011800
 800518c:	40011c00 	.word	0x40011c00
 8005190:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005194:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005196:	461c      	mov	r4, r3
 8005198:	f04f 0500 	mov.w	r5, #0
 800519c:	4622      	mov	r2, r4
 800519e:	462b      	mov	r3, r5
 80051a0:	1891      	adds	r1, r2, r2
 80051a2:	6139      	str	r1, [r7, #16]
 80051a4:	415b      	adcs	r3, r3
 80051a6:	617b      	str	r3, [r7, #20]
 80051a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80051ac:	1912      	adds	r2, r2, r4
 80051ae:	eb45 0303 	adc.w	r3, r5, r3
 80051b2:	f04f 0000 	mov.w	r0, #0
 80051b6:	f04f 0100 	mov.w	r1, #0
 80051ba:	00d9      	lsls	r1, r3, #3
 80051bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051c0:	00d0      	lsls	r0, r2, #3
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	eb12 0804 	adds.w	r8, r2, r4
 80051ca:	eb43 0905 	adc.w	r9, r3, r5
 80051ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f04f 0100 	mov.w	r1, #0
 80051d8:	f04f 0200 	mov.w	r2, #0
 80051dc:	f04f 0300 	mov.w	r3, #0
 80051e0:	008b      	lsls	r3, r1, #2
 80051e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80051e6:	0082      	lsls	r2, r0, #2
 80051e8:	4640      	mov	r0, r8
 80051ea:	4649      	mov	r1, r9
 80051ec:	f7fb f814 	bl	8000218 <__aeabi_uldivmod>
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	4b47      	ldr	r3, [pc, #284]	; (8005314 <UART_SetConfig+0x3ac>)
 80051f6:	fba3 2302 	umull	r2, r3, r3, r2
 80051fa:	095b      	lsrs	r3, r3, #5
 80051fc:	011e      	lsls	r6, r3, #4
 80051fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005200:	4618      	mov	r0, r3
 8005202:	f04f 0100 	mov.w	r1, #0
 8005206:	4602      	mov	r2, r0
 8005208:	460b      	mov	r3, r1
 800520a:	1894      	adds	r4, r2, r2
 800520c:	60bc      	str	r4, [r7, #8]
 800520e:	415b      	adcs	r3, r3
 8005210:	60fb      	str	r3, [r7, #12]
 8005212:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005216:	1812      	adds	r2, r2, r0
 8005218:	eb41 0303 	adc.w	r3, r1, r3
 800521c:	f04f 0400 	mov.w	r4, #0
 8005220:	f04f 0500 	mov.w	r5, #0
 8005224:	00dd      	lsls	r5, r3, #3
 8005226:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800522a:	00d4      	lsls	r4, r2, #3
 800522c:	4622      	mov	r2, r4
 800522e:	462b      	mov	r3, r5
 8005230:	1814      	adds	r4, r2, r0
 8005232:	64bc      	str	r4, [r7, #72]	; 0x48
 8005234:	414b      	adcs	r3, r1
 8005236:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	4618      	mov	r0, r3
 800523e:	f04f 0100 	mov.w	r1, #0
 8005242:	f04f 0200 	mov.w	r2, #0
 8005246:	f04f 0300 	mov.w	r3, #0
 800524a:	008b      	lsls	r3, r1, #2
 800524c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005250:	0082      	lsls	r2, r0, #2
 8005252:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005256:	f7fa ffdf 	bl	8000218 <__aeabi_uldivmod>
 800525a:	4602      	mov	r2, r0
 800525c:	460b      	mov	r3, r1
 800525e:	4b2d      	ldr	r3, [pc, #180]	; (8005314 <UART_SetConfig+0x3ac>)
 8005260:	fba3 1302 	umull	r1, r3, r3, r2
 8005264:	095b      	lsrs	r3, r3, #5
 8005266:	2164      	movs	r1, #100	; 0x64
 8005268:	fb01 f303 	mul.w	r3, r1, r3
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	011b      	lsls	r3, r3, #4
 8005270:	3332      	adds	r3, #50	; 0x32
 8005272:	4a28      	ldr	r2, [pc, #160]	; (8005314 <UART_SetConfig+0x3ac>)
 8005274:	fba2 2303 	umull	r2, r3, r2, r3
 8005278:	095b      	lsrs	r3, r3, #5
 800527a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800527e:	441e      	add	r6, r3
 8005280:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005282:	4618      	mov	r0, r3
 8005284:	f04f 0100 	mov.w	r1, #0
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	1894      	adds	r4, r2, r2
 800528e:	603c      	str	r4, [r7, #0]
 8005290:	415b      	adcs	r3, r3
 8005292:	607b      	str	r3, [r7, #4]
 8005294:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005298:	1812      	adds	r2, r2, r0
 800529a:	eb41 0303 	adc.w	r3, r1, r3
 800529e:	f04f 0400 	mov.w	r4, #0
 80052a2:	f04f 0500 	mov.w	r5, #0
 80052a6:	00dd      	lsls	r5, r3, #3
 80052a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80052ac:	00d4      	lsls	r4, r2, #3
 80052ae:	4622      	mov	r2, r4
 80052b0:	462b      	mov	r3, r5
 80052b2:	eb12 0a00 	adds.w	sl, r2, r0
 80052b6:	eb43 0b01 	adc.w	fp, r3, r1
 80052ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	4618      	mov	r0, r3
 80052c0:	f04f 0100 	mov.w	r1, #0
 80052c4:	f04f 0200 	mov.w	r2, #0
 80052c8:	f04f 0300 	mov.w	r3, #0
 80052cc:	008b      	lsls	r3, r1, #2
 80052ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052d2:	0082      	lsls	r2, r0, #2
 80052d4:	4650      	mov	r0, sl
 80052d6:	4659      	mov	r1, fp
 80052d8:	f7fa ff9e 	bl	8000218 <__aeabi_uldivmod>
 80052dc:	4602      	mov	r2, r0
 80052de:	460b      	mov	r3, r1
 80052e0:	4b0c      	ldr	r3, [pc, #48]	; (8005314 <UART_SetConfig+0x3ac>)
 80052e2:	fba3 1302 	umull	r1, r3, r3, r2
 80052e6:	095b      	lsrs	r3, r3, #5
 80052e8:	2164      	movs	r1, #100	; 0x64
 80052ea:	fb01 f303 	mul.w	r3, r1, r3
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	011b      	lsls	r3, r3, #4
 80052f2:	3332      	adds	r3, #50	; 0x32
 80052f4:	4a07      	ldr	r2, [pc, #28]	; (8005314 <UART_SetConfig+0x3ac>)
 80052f6:	fba2 2303 	umull	r2, r3, r2, r3
 80052fa:	095b      	lsrs	r3, r3, #5
 80052fc:	f003 020f 	and.w	r2, r3, #15
 8005300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4432      	add	r2, r6
 8005306:	609a      	str	r2, [r3, #8]
}
 8005308:	bf00      	nop
 800530a:	377c      	adds	r7, #124	; 0x7c
 800530c:	46bd      	mov	sp, r7
 800530e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005312:	bf00      	nop
 8005314:	51eb851f 	.word	0x51eb851f

08005318 <__libc_init_array>:
 8005318:	b570      	push	{r4, r5, r6, lr}
 800531a:	4d0d      	ldr	r5, [pc, #52]	; (8005350 <__libc_init_array+0x38>)
 800531c:	4c0d      	ldr	r4, [pc, #52]	; (8005354 <__libc_init_array+0x3c>)
 800531e:	1b64      	subs	r4, r4, r5
 8005320:	10a4      	asrs	r4, r4, #2
 8005322:	2600      	movs	r6, #0
 8005324:	42a6      	cmp	r6, r4
 8005326:	d109      	bne.n	800533c <__libc_init_array+0x24>
 8005328:	4d0b      	ldr	r5, [pc, #44]	; (8005358 <__libc_init_array+0x40>)
 800532a:	4c0c      	ldr	r4, [pc, #48]	; (800535c <__libc_init_array+0x44>)
 800532c:	f000 f820 	bl	8005370 <_init>
 8005330:	1b64      	subs	r4, r4, r5
 8005332:	10a4      	asrs	r4, r4, #2
 8005334:	2600      	movs	r6, #0
 8005336:	42a6      	cmp	r6, r4
 8005338:	d105      	bne.n	8005346 <__libc_init_array+0x2e>
 800533a:	bd70      	pop	{r4, r5, r6, pc}
 800533c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005340:	4798      	blx	r3
 8005342:	3601      	adds	r6, #1
 8005344:	e7ee      	b.n	8005324 <__libc_init_array+0xc>
 8005346:	f855 3b04 	ldr.w	r3, [r5], #4
 800534a:	4798      	blx	r3
 800534c:	3601      	adds	r6, #1
 800534e:	e7f2      	b.n	8005336 <__libc_init_array+0x1e>
 8005350:	080053b8 	.word	0x080053b8
 8005354:	080053b8 	.word	0x080053b8
 8005358:	080053b8 	.word	0x080053b8
 800535c:	080053bc 	.word	0x080053bc

08005360 <memset>:
 8005360:	4402      	add	r2, r0
 8005362:	4603      	mov	r3, r0
 8005364:	4293      	cmp	r3, r2
 8005366:	d100      	bne.n	800536a <memset+0xa>
 8005368:	4770      	bx	lr
 800536a:	f803 1b01 	strb.w	r1, [r3], #1
 800536e:	e7f9      	b.n	8005364 <memset+0x4>

08005370 <_init>:
 8005370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005372:	bf00      	nop
 8005374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005376:	bc08      	pop	{r3}
 8005378:	469e      	mov	lr, r3
 800537a:	4770      	bx	lr

0800537c <_fini>:
 800537c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800537e:	bf00      	nop
 8005380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005382:	bc08      	pop	{r3}
 8005384:	469e      	mov	lr, r3
 8005386:	4770      	bx	lr
