
BackplaneC10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049a0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004b78  08004b78  00014b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b90  08004b90  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b90  08004b90  00014b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b98  08004b98  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b98  08004b98  00014b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b9c  08004b9c  00014b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  2000000c  08004bac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08004bac  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c06  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000224e  00000000  00000000  00031c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  00033e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f08  00000000  00000000  00034e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022249  00000000  00000000  00035d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000127ea  00000000  00000000  00057fb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8ec0  00000000  00000000  0006a7a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00143663  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043fc  00000000  00000000  001436b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004b60 	.word	0x08004b60

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004b60 	.word	0x08004b60

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <GPIO_SendI2C>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

HAL_StatusTypeDef GPIO_SendI2C(uint8_t addr, uint8_t reg, uint8_t data)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af02      	add	r7, sp, #8
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
 800051a:	460b      	mov	r3, r1
 800051c:	71bb      	strb	r3, [r7, #6]
 800051e:	4613      	mov	r3, r2
 8000520:	717b      	strb	r3, [r7, #5]
  uint8_t buf[2];

  buf[0] = reg;
 8000522:	79bb      	ldrb	r3, [r7, #6]
 8000524:	733b      	strb	r3, [r7, #12]
  buf[1] = data;
 8000526:	797b      	ldrb	r3, [r7, #5]
 8000528:	737b      	strb	r3, [r7, #13]

  return HAL_I2C_Master_Transmit(&hi2c1, addr, buf, 2, HAL_MAX_DELAY);
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	b299      	uxth	r1, r3
 800052e:	f107 020c 	add.w	r2, r7, #12
 8000532:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	2302      	movs	r3, #2
 800053a:	4804      	ldr	r0, [pc, #16]	; (800054c <GPIO_SendI2C+0x3c>)
 800053c:	f002 ff10 	bl	8003360 <HAL_I2C_Master_Transmit>
 8000540:	4603      	mov	r3, r0
}
 8000542:	4618      	mov	r0, r3
 8000544:	3710      	adds	r7, #16
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20000084 	.word	0x20000084

08000550 <InitGPIOs>:

	return buf[0];
}

void InitGPIOs()
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  //
  // Default values for GPIO registers
  //

  // GPIO directions
  gpio0_dir0 = 0;
 8000554:	4b3d      	ldr	r3, [pc, #244]	; (800064c <InitGPIOs+0xfc>)
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]
  gpio0_dir1 = 0b11110000;
 800055a:	4b3d      	ldr	r3, [pc, #244]	; (8000650 <InitGPIOs+0x100>)
 800055c:	22f0      	movs	r2, #240	; 0xf0
 800055e:	701a      	strb	r2, [r3, #0]
  gpio1_dir0 = 0;
 8000560:	4b3c      	ldr	r3, [pc, #240]	; (8000654 <InitGPIOs+0x104>)
 8000562:	2200      	movs	r2, #0
 8000564:	701a      	strb	r2, [r3, #0]
  gpio1_dir1 = 0;
 8000566:	4b3c      	ldr	r3, [pc, #240]	; (8000658 <InitGPIOs+0x108>)
 8000568:	2200      	movs	r2, #0
 800056a:	701a      	strb	r2, [r3, #0]

  // GPIO *input* polarity
  gpio0_pol0 = 0;
 800056c:	4b3b      	ldr	r3, [pc, #236]	; (800065c <InitGPIOs+0x10c>)
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]
  gpio0_pol1 = 0;
 8000572:	4b3b      	ldr	r3, [pc, #236]	; (8000660 <InitGPIOs+0x110>)
 8000574:	2200      	movs	r2, #0
 8000576:	701a      	strb	r2, [r3, #0]
  gpio1_pol0 = 0;
 8000578:	4b3a      	ldr	r3, [pc, #232]	; (8000664 <InitGPIOs+0x114>)
 800057a:	2200      	movs	r2, #0
 800057c:	701a      	strb	r2, [r3, #0]
  gpio1_pol1 = 0;
 800057e:	4b3a      	ldr	r3, [pc, #232]	; (8000668 <InitGPIOs+0x118>)
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]

  // GPIO reset to 0
  gpio0_gp0 = gpio0_gp1 = 0;
 8000584:	4b39      	ldr	r3, [pc, #228]	; (800066c <InitGPIOs+0x11c>)
 8000586:	2200      	movs	r2, #0
 8000588:	701a      	strb	r2, [r3, #0]
 800058a:	4b38      	ldr	r3, [pc, #224]	; (800066c <InitGPIOs+0x11c>)
 800058c:	781a      	ldrb	r2, [r3, #0]
 800058e:	4b38      	ldr	r3, [pc, #224]	; (8000670 <InitGPIOs+0x120>)
 8000590:	701a      	strb	r2, [r3, #0]
  // Enable 3V3 and 5V have inverted enable logic (1 = disable for 5V and 3V3)
  gpio1_gp0 = gpio1_gp1 = 0b11001100;
 8000592:	4b38      	ldr	r3, [pc, #224]	; (8000674 <InitGPIOs+0x124>)
 8000594:	22cc      	movs	r2, #204	; 0xcc
 8000596:	701a      	strb	r2, [r3, #0]
 8000598:	4b36      	ldr	r3, [pc, #216]	; (8000674 <InitGPIOs+0x124>)
 800059a:	781a      	ldrb	r2, [r3, #0]
 800059c:	4b36      	ldr	r3, [pc, #216]	; (8000678 <InitGPIOs+0x128>)
 800059e:	701a      	strb	r2, [r3, #0]
  //

  //HAL_StatusTypeDef ret;
  //uint8_t buf[12];

  GPIO_SendI2C(GPIO0_ADDR, GPIO_DIR_GP0, gpio0_dir0);
 80005a0:	4b2a      	ldr	r3, [pc, #168]	; (800064c <InitGPIOs+0xfc>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	461a      	mov	r2, r3
 80005a6:	2106      	movs	r1, #6
 80005a8:	2042      	movs	r0, #66	; 0x42
 80005aa:	f7ff ffb1 	bl	8000510 <GPIO_SendI2C>
  GPIO_SendI2C(GPIO0_ADDR, GPIO_DIR_GP1, gpio0_dir1);
 80005ae:	4b28      	ldr	r3, [pc, #160]	; (8000650 <InitGPIOs+0x100>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	461a      	mov	r2, r3
 80005b4:	2107      	movs	r1, #7
 80005b6:	2042      	movs	r0, #66	; 0x42
 80005b8:	f7ff ffaa 	bl	8000510 <GPIO_SendI2C>
  GPIO_SendI2C(GPIO1_ADDR, GPIO_DIR_GP0, gpio1_dir0);
 80005bc:	4b25      	ldr	r3, [pc, #148]	; (8000654 <InitGPIOs+0x104>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	2106      	movs	r1, #6
 80005c4:	2040      	movs	r0, #64	; 0x40
 80005c6:	f7ff ffa3 	bl	8000510 <GPIO_SendI2C>
  GPIO_SendI2C(GPIO1_ADDR, GPIO_DIR_GP1, gpio1_dir1);
 80005ca:	4b23      	ldr	r3, [pc, #140]	; (8000658 <InitGPIOs+0x108>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	461a      	mov	r2, r3
 80005d0:	2107      	movs	r1, #7
 80005d2:	2040      	movs	r0, #64	; 0x40
 80005d4:	f7ff ff9c 	bl	8000510 <GPIO_SendI2C>

  GPIO_SendI2C(GPIO0_ADDR, GPIO_POL_GP0, gpio0_pol0);
 80005d8:	4b20      	ldr	r3, [pc, #128]	; (800065c <InitGPIOs+0x10c>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	461a      	mov	r2, r3
 80005de:	2104      	movs	r1, #4
 80005e0:	2042      	movs	r0, #66	; 0x42
 80005e2:	f7ff ff95 	bl	8000510 <GPIO_SendI2C>
  GPIO_SendI2C(GPIO0_ADDR, GPIO_POL_GP1, gpio0_pol1);
 80005e6:	4b1e      	ldr	r3, [pc, #120]	; (8000660 <InitGPIOs+0x110>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	461a      	mov	r2, r3
 80005ec:	2105      	movs	r1, #5
 80005ee:	2042      	movs	r0, #66	; 0x42
 80005f0:	f7ff ff8e 	bl	8000510 <GPIO_SendI2C>
  GPIO_SendI2C(GPIO1_ADDR, GPIO_POL_GP0, gpio1_pol0);
 80005f4:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <InitGPIOs+0x114>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	461a      	mov	r2, r3
 80005fa:	2104      	movs	r1, #4
 80005fc:	2040      	movs	r0, #64	; 0x40
 80005fe:	f7ff ff87 	bl	8000510 <GPIO_SendI2C>
  GPIO_SendI2C(GPIO1_ADDR, GPIO_POL_GP1, gpio1_pol1);
 8000602:	4b19      	ldr	r3, [pc, #100]	; (8000668 <InitGPIOs+0x118>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	2105      	movs	r1, #5
 800060a:	2040      	movs	r0, #64	; 0x40
 800060c:	f7ff ff80 	bl	8000510 <GPIO_SendI2C>

  GPIO_SendI2C(GPIO0_ADDR, GPIO_GP0, gpio0_gp0);
 8000610:	4b17      	ldr	r3, [pc, #92]	; (8000670 <InitGPIOs+0x120>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	461a      	mov	r2, r3
 8000616:	2100      	movs	r1, #0
 8000618:	2042      	movs	r0, #66	; 0x42
 800061a:	f7ff ff79 	bl	8000510 <GPIO_SendI2C>
  GPIO_SendI2C(GPIO0_ADDR, GPIO_GP1, gpio0_gp1);
 800061e:	4b13      	ldr	r3, [pc, #76]	; (800066c <InitGPIOs+0x11c>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	461a      	mov	r2, r3
 8000624:	2101      	movs	r1, #1
 8000626:	2042      	movs	r0, #66	; 0x42
 8000628:	f7ff ff72 	bl	8000510 <GPIO_SendI2C>
  GPIO_SendI2C(GPIO1_ADDR, GPIO_GP0, gpio1_gp0);
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <InitGPIOs+0x128>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	461a      	mov	r2, r3
 8000632:	2100      	movs	r1, #0
 8000634:	2040      	movs	r0, #64	; 0x40
 8000636:	f7ff ff6b 	bl	8000510 <GPIO_SendI2C>
  GPIO_SendI2C(GPIO1_ADDR, GPIO_GP1, gpio1_gp1);
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <InitGPIOs+0x124>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	461a      	mov	r2, r3
 8000640:	2101      	movs	r1, #1
 8000642:	2040      	movs	r0, #64	; 0x40
 8000644:	f7ff ff64 	bl	8000510 <GPIO_SendI2C>

}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	200001ff 	.word	0x200001ff
 8000650:	200001fc 	.word	0x200001fc
 8000654:	20000199 	.word	0x20000199
 8000658:	20000200 	.word	0x20000200
 800065c:	20000198 	.word	0x20000198
 8000660:	20000081 	.word	0x20000081
 8000664:	20000196 	.word	0x20000196
 8000668:	200001fe 	.word	0x200001fe
 800066c:	20000195 	.word	0x20000195
 8000670:	20000122 	.word	0x20000122
 8000674:	20000194 	.word	0x20000194
 8000678:	20000120 	.word	0x20000120

0800067c <DisableAllVoltages>:

void DisableAllVoltages()
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	gpio1_gp0 = 0b11001100;
 8000680:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <DisableAllVoltages+0x34>)
 8000682:	22cc      	movs	r2, #204	; 0xcc
 8000684:	701a      	strb	r2, [r3, #0]
	gpio1_gp1 = 0b11001100;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <DisableAllVoltages+0x38>)
 8000688:	22cc      	movs	r2, #204	; 0xcc
 800068a:	701a      	strb	r2, [r3, #0]
	GPIO_SendI2C(GPIO1_ADDR, GPIO_GP0, gpio1_gp0);
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <DisableAllVoltages+0x34>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	461a      	mov	r2, r3
 8000692:	2100      	movs	r1, #0
 8000694:	2040      	movs	r0, #64	; 0x40
 8000696:	f7ff ff3b 	bl	8000510 <GPIO_SendI2C>
	GPIO_SendI2C(GPIO1_ADDR, GPIO_GP1, gpio1_gp1);
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <DisableAllVoltages+0x38>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	461a      	mov	r2, r3
 80006a0:	2101      	movs	r1, #1
 80006a2:	2040      	movs	r0, #64	; 0x40
 80006a4:	f7ff ff34 	bl	8000510 <GPIO_SendI2C>

	// Disable Volant 24V
	DisableVolant24V();
 80006a8:	f000 f894 	bl	80007d4 <DisableVolant24V>
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000120 	.word	0x20000120
 80006b4:	20000194 	.word	0x20000194

080006b8 <EnableVoltage>:

// board = 1,2,3,4
//  0,1,2 = Board C10 1,2,3
//  3     = Board C9
void EnableVoltage(uint8_t board, uint8_t voltage)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	460a      	mov	r2, r1
 80006c2:	71fb      	strb	r3, [r7, #7]
 80006c4:	4613      	mov	r3, r2
 80006c6:	71bb      	strb	r3, [r7, #6]
	// Special case for board C9 - 24V,15V
	if (board == BOARD_C9 && voltage == VOLTAGE_24V)
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d111      	bne.n	80006f2 <EnableVoltage+0x3a>
 80006ce:	79bb      	ldrb	r3, [r7, #6]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d10e      	bne.n	80006f2 <EnableVoltage+0x3a>
	{
		gpio1_gp0 |= (1 << 1);
 80006d4:	4b3d      	ldr	r3, [pc, #244]	; (80007cc <EnableVoltage+0x114>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	f043 0302 	orr.w	r3, r3, #2
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	4b3b      	ldr	r3, [pc, #236]	; (80007cc <EnableVoltage+0x114>)
 80006e0:	701a      	strb	r2, [r3, #0]
		GPIO_SendI2C(GPIO1_ADDR, GPIO_GP0, gpio1_gp0);
 80006e2:	4b3a      	ldr	r3, [pc, #232]	; (80007cc <EnableVoltage+0x114>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	461a      	mov	r2, r3
 80006e8:	2100      	movs	r1, #0
 80006ea:	2040      	movs	r0, #64	; 0x40
 80006ec:	f7ff ff10 	bl	8000510 <GPIO_SendI2C>
		return;
 80006f0:	e069      	b.n	80007c6 <EnableVoltage+0x10e>
	}
	else if (board == BOARD_C9 && voltage == VOLTAGE_15V)
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d102      	bne.n	80006fe <EnableVoltage+0x46>
 80006f8:	79bb      	ldrb	r3, [r7, #6]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d062      	beq.n	80007c4 <EnableVoltage+0x10c>
	{
		// No 15V on board C9
		return;
	}
	unsigned value = board * 4 + voltage;
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	009a      	lsls	r2, r3, #2
 8000702:	79bb      	ldrb	r3, [r7, #6]
 8000704:	4413      	add	r3, r2
 8000706:	60fb      	str	r3, [r7, #12]
	unsigned gp = value / (unsigned)8;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	08db      	lsrs	r3, r3, #3
 800070c:	60bb      	str	r3, [r7, #8]
	if (gp)
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d02c      	beq.n	800076e <EnableVoltage+0xb6>
	{
		// Inverted logic for 5V and 3V3
		if (voltage == VOLTAGE_5V || voltage == VOLTAGE_3V3)
 8000714:	79bb      	ldrb	r3, [r7, #6]
 8000716:	2b02      	cmp	r3, #2
 8000718:	d002      	beq.n	8000720 <EnableVoltage+0x68>
 800071a:	79bb      	ldrb	r3, [r7, #6]
 800071c:	2b03      	cmp	r3, #3
 800071e:	d110      	bne.n	8000742 <EnableVoltage+0x8a>
			gpio1_gp1 &= ~(1 << (value - 8));
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	3b08      	subs	r3, #8
 8000724:	2201      	movs	r2, #1
 8000726:	fa02 f303 	lsl.w	r3, r2, r3
 800072a:	b25b      	sxtb	r3, r3
 800072c:	43db      	mvns	r3, r3
 800072e:	b25a      	sxtb	r2, r3
 8000730:	4b27      	ldr	r3, [pc, #156]	; (80007d0 <EnableVoltage+0x118>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	b25b      	sxtb	r3, r3
 8000736:	4013      	ands	r3, r2
 8000738:	b25b      	sxtb	r3, r3
 800073a:	b2da      	uxtb	r2, r3
 800073c:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <EnableVoltage+0x118>)
 800073e:	701a      	strb	r2, [r3, #0]
 8000740:	e00d      	b.n	800075e <EnableVoltage+0xa6>
		else
			gpio1_gp1 |= (1 << (value - 8));
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	3b08      	subs	r3, #8
 8000746:	2201      	movs	r2, #1
 8000748:	fa02 f303 	lsl.w	r3, r2, r3
 800074c:	b25a      	sxtb	r2, r3
 800074e:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <EnableVoltage+0x118>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	b25b      	sxtb	r3, r3
 8000754:	4313      	orrs	r3, r2
 8000756:	b25b      	sxtb	r3, r3
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <EnableVoltage+0x118>)
 800075c:	701a      	strb	r2, [r3, #0]
		GPIO_SendI2C(GPIO1_ADDR, GPIO_GP1, gpio1_gp1);
 800075e:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <EnableVoltage+0x118>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	461a      	mov	r2, r3
 8000764:	2101      	movs	r1, #1
 8000766:	2040      	movs	r0, #64	; 0x40
 8000768:	f7ff fed2 	bl	8000510 <GPIO_SendI2C>
 800076c:	e02b      	b.n	80007c6 <EnableVoltage+0x10e>
	}
	else
	{
		// Inverted logic for 5V and 3V3
		if (voltage == VOLTAGE_5V || voltage == VOLTAGE_3V3)
 800076e:	79bb      	ldrb	r3, [r7, #6]
 8000770:	2b02      	cmp	r3, #2
 8000772:	d002      	beq.n	800077a <EnableVoltage+0xc2>
 8000774:	79bb      	ldrb	r3, [r7, #6]
 8000776:	2b03      	cmp	r3, #3
 8000778:	d10f      	bne.n	800079a <EnableVoltage+0xe2>
			gpio1_gp0 &= ~(1 << value);
 800077a:	2201      	movs	r2, #1
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	fa02 f303 	lsl.w	r3, r2, r3
 8000782:	b25b      	sxtb	r3, r3
 8000784:	43db      	mvns	r3, r3
 8000786:	b25a      	sxtb	r2, r3
 8000788:	4b10      	ldr	r3, [pc, #64]	; (80007cc <EnableVoltage+0x114>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	b25b      	sxtb	r3, r3
 800078e:	4013      	ands	r3, r2
 8000790:	b25b      	sxtb	r3, r3
 8000792:	b2da      	uxtb	r2, r3
 8000794:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <EnableVoltage+0x114>)
 8000796:	701a      	strb	r2, [r3, #0]
 8000798:	e00c      	b.n	80007b4 <EnableVoltage+0xfc>
		else
			gpio1_gp0 |= (1 << value);
 800079a:	2201      	movs	r2, #1
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	fa02 f303 	lsl.w	r3, r2, r3
 80007a2:	b25a      	sxtb	r2, r3
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <EnableVoltage+0x114>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b25b      	sxtb	r3, r3
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b25b      	sxtb	r3, r3
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <EnableVoltage+0x114>)
 80007b2:	701a      	strb	r2, [r3, #0]
		GPIO_SendI2C(GPIO1_ADDR, GPIO_GP0, gpio1_gp0);
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <EnableVoltage+0x114>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	461a      	mov	r2, r3
 80007ba:	2100      	movs	r1, #0
 80007bc:	2040      	movs	r0, #64	; 0x40
 80007be:	f7ff fea7 	bl	8000510 <GPIO_SendI2C>
 80007c2:	e000      	b.n	80007c6 <EnableVoltage+0x10e>
		return;
 80007c4:	bf00      	nop
	}
}
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000120 	.word	0x20000120
 80007d0:	20000194 	.word	0x20000194

080007d4 <DisableVolant24V>:
{
	HAL_GPIO_WritePin(Volant_Enable24V_GPIO_Port, Volant_Enable24V_Pin, 0);
}

void DisableVolant24V()
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Volant_Enable24V_GPIO_Port, Volant_Enable24V_Pin, 1);
 80007d8:	2201      	movs	r2, #1
 80007da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007de:	4802      	ldr	r0, [pc, #8]	; (80007e8 <DisableVolant24V+0x14>)
 80007e0:	f002 fc48 	bl	8003074 <HAL_GPIO_WritePin>
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40020c00 	.word	0x40020c00

080007ec <SetLed>:

void SetLed(uint8_t led, uint8_t value)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	460a      	mov	r2, r1
 80007f6:	71fb      	strb	r3, [r7, #7]
 80007f8:	4613      	mov	r3, r2
 80007fa:	71bb      	strb	r3, [r7, #6]
	if (led >= NUM_LEDS)
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	2b06      	cmp	r3, #6
 8000800:	d827      	bhi.n	8000852 <SetLed+0x66>
		return;

	if (value)
 8000802:	79bb      	ldrb	r3, [r7, #6]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d00d      	beq.n	8000824 <SetLed+0x38>
		gpio0_gp0 |= (1 << led);
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	2201      	movs	r2, #1
 800080c:	fa02 f303 	lsl.w	r3, r2, r3
 8000810:	b25a      	sxtb	r2, r3
 8000812:	4b12      	ldr	r3, [pc, #72]	; (800085c <SetLed+0x70>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	b25b      	sxtb	r3, r3
 8000818:	4313      	orrs	r3, r2
 800081a:	b25b      	sxtb	r3, r3
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <SetLed+0x70>)
 8000820:	701a      	strb	r2, [r3, #0]
 8000822:	e00e      	b.n	8000842 <SetLed+0x56>
	else
		gpio0_gp0 &= ~(1 << led);
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	2201      	movs	r2, #1
 8000828:	fa02 f303 	lsl.w	r3, r2, r3
 800082c:	b25b      	sxtb	r3, r3
 800082e:	43db      	mvns	r3, r3
 8000830:	b25a      	sxtb	r2, r3
 8000832:	4b0a      	ldr	r3, [pc, #40]	; (800085c <SetLed+0x70>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	b25b      	sxtb	r3, r3
 8000838:	4013      	ands	r3, r2
 800083a:	b25b      	sxtb	r3, r3
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4b07      	ldr	r3, [pc, #28]	; (800085c <SetLed+0x70>)
 8000840:	701a      	strb	r2, [r3, #0]

	GPIO_SendI2C(GPIO0_ADDR, GPIO_GP0, gpio0_gp0);
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <SetLed+0x70>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	461a      	mov	r2, r3
 8000848:	2100      	movs	r1, #0
 800084a:	2042      	movs	r0, #66	; 0x42
 800084c:	f7ff fe60 	bl	8000510 <GPIO_SendI2C>
 8000850:	e000      	b.n	8000854 <SetLed+0x68>
		return;
 8000852:	bf00      	nop
}
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000122 	.word	0x20000122

08000860 <ToggleLed>:

void ToggleLed(uint8_t led)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
	if (led >= NUM_LEDS)
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	2b06      	cmp	r3, #6
 800086e:	d819      	bhi.n	80008a4 <ToggleLed+0x44>
		return;

	uint8_t value = (gpio0_gp0 & (1 << led)) >> led;
 8000870:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <ToggleLed+0x4c>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4619      	mov	r1, r3
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	2201      	movs	r2, #1
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	ea01 0203 	and.w	r2, r1, r3
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	fa42 f303 	asr.w	r3, r2, r3
 8000888:	73fb      	strb	r3, [r7, #15]
	SetLed(led, !value);
 800088a:	7bfb      	ldrb	r3, [r7, #15]
 800088c:	2b00      	cmp	r3, #0
 800088e:	bf0c      	ite	eq
 8000890:	2301      	moveq	r3, #1
 8000892:	2300      	movne	r3, #0
 8000894:	b2db      	uxtb	r3, r3
 8000896:	461a      	mov	r2, r3
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	4611      	mov	r1, r2
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ffa5 	bl	80007ec <SetLed>
 80008a2:	e000      	b.n	80008a6 <ToggleLed+0x46>
		return;
 80008a4:	bf00      	nop
}
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000122 	.word	0x20000122

080008b0 <TransmitCAN>:

HAL_StatusTypeDef TransmitCAN(uint8_t id, uint8_t* buf, uint8_t size)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	6039      	str	r1, [r7, #0]
 80008ba:	71fb      	strb	r3, [r7, #7]
 80008bc:	4613      	mov	r3, r2
 80008be:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef msg;
	msg.StdId = id;
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	60fb      	str	r3, [r7, #12]
	msg.IDE = CAN_ID_STD;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
	msg.RTR = CAN_RTR_DATA;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61bb      	str	r3, [r7, #24]
	msg.DLC = size;
 80008cc:	79bb      	ldrb	r3, [r7, #6]
 80008ce:	61fb      	str	r3, [r7, #28]
	msg.TransmitGlobalTime = DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	f887 3020 	strb.w	r3, [r7, #32]

	uint32_t mb;
	HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(&hcan1, &msg, buf, &mb);
 80008d6:	f107 0308 	add.w	r3, r7, #8
 80008da:	f107 010c 	add.w	r1, r7, #12
 80008de:	683a      	ldr	r2, [r7, #0]
 80008e0:	480a      	ldr	r0, [pc, #40]	; (800090c <TransmitCAN+0x5c>)
 80008e2:	f001 fcbd 	bl	8002260 <HAL_CAN_AddTxMessage>
 80008e6:	4603      	mov	r3, r0
 80008e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (ret != HAL_OK)
 80008ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d002      	beq.n	80008fa <TransmitCAN+0x4a>
		return ret;
 80008f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008f8:	e004      	b.n	8000904 <TransmitCAN+0x54>

	// Update the CAN led
	ToggleLed(LED_CAN);
 80008fa:	2002      	movs	r0, #2
 80008fc:	f7ff ffb0 	bl	8000860 <ToggleLed>
	return ret;
 8000900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000904:	4618      	mov	r0, r3
 8000906:	3728      	adds	r7, #40	; 0x28
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	200001b8 	.word	0x200001b8

08000910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	// Init global variables
	timer_flag = 0;
 8000916:	4b4e      	ldr	r3, [pc, #312]	; (8000a50 <main+0x140>)
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
	pb1_pressed = 0;
 800091c:	4b4d      	ldr	r3, [pc, #308]	; (8000a54 <main+0x144>)
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]
	pb2_pressed = 0;
 8000922:	4b4d      	ldr	r3, [pc, #308]	; (8000a58 <main+0x148>)
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]

	can1_recv_flag = 0;
 8000928:	4b4c      	ldr	r3, [pc, #304]	; (8000a5c <main+0x14c>)
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092e:	f000 fdfb 	bl	8001528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000932:	f000 f89d 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000936:	f000 fa8d 	bl	8000e54 <MX_GPIO_Init>
  MX_I2C1_Init();
 800093a:	f000 f9df 	bl	8000cfc <MX_I2C1_Init>
  MX_CAN1_Init();
 800093e:	f000 f947 	bl	8000bd0 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000942:	f000 f9a7 	bl	8000c94 <MX_CAN2_Init>
  MX_I2C3_Init();
 8000946:	f000 fa07 	bl	8000d58 <MX_I2C3_Init>
  MX_TIM3_Init();
 800094a:	f000 fa33 	bl	8000db4 <MX_TIM3_Init>
  MX_ADC1_Init();
 800094e:	f000 f8ed 	bl	8000b2c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  InitGPIOs();
 8000952:	f7ff fdfd 	bl	8000550 <InitGPIOs>
  HAL_Delay(10);
 8000956:	200a      	movs	r0, #10
 8000958:	f000 fe58 	bl	800160c <HAL_Delay>

  DisableAllVoltages();
 800095c:	f7ff fe8e 	bl	800067c <DisableAllVoltages>
  HAL_Delay(10);
 8000960:	200a      	movs	r0, #10
 8000962:	f000 fe53 	bl	800160c <HAL_Delay>

  EnableVoltage(BOARD_C10_1, VOLTAGE_5V);
  EnableVoltage(BOARD_C10_2, VOLTAGE_5V);
  EnableVoltage(BOARD_C10_3, VOLTAGE_5V);*/

  EnableVoltage(BOARD_C9, VOLTAGE_3V3);
 8000966:	2103      	movs	r1, #3
 8000968:	2000      	movs	r0, #0
 800096a:	f7ff fea5 	bl	80006b8 <EnableVoltage>
  EnableVoltage(BOARD_C9, VOLTAGE_5V);
 800096e:	2102      	movs	r1, #2
 8000970:	2000      	movs	r0, #0
 8000972:	f7ff fea1 	bl	80006b8 <EnableVoltage>
  EnableVoltage(BOARD_C9, VOLTAGE_24V);
 8000976:	2100      	movs	r1, #0
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff fe9d 	bl	80006b8 <EnableVoltage>

  EnableVoltage(BOARD_C10_1, VOLTAGE_3V3);
 800097e:	2103      	movs	r1, #3
 8000980:	2003      	movs	r0, #3
 8000982:	f7ff fe99 	bl	80006b8 <EnableVoltage>
  EnableVoltage(BOARD_C10_1, VOLTAGE_5V);
 8000986:	2102      	movs	r1, #2
 8000988:	2003      	movs	r0, #3
 800098a:	f7ff fe95 	bl	80006b8 <EnableVoltage>
  EnableVoltage(BOARD_C10_1, VOLTAGE_24V);
 800098e:	2100      	movs	r1, #0
 8000990:	2003      	movs	r0, #3
 8000992:	f7ff fe91 	bl	80006b8 <EnableVoltage>

  //HAL_StatusTypeDef ret;

  while (1)
  {
	  if (timer_flag)
 8000996:	4b2e      	ldr	r3, [pc, #184]	; (8000a50 <main+0x140>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d026      	beq.n	80009ec <main+0xdc>
	  {
		  timer_flag = 0;
 800099e:	4b2c      	ldr	r3, [pc, #176]	; (8000a50 <main+0x140>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	701a      	strb	r2, [r3, #0]

		  // Blink led warning as living-led
		  ToggleLed(LED_WARN);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff ff5b 	bl	8000860 <ToggleLed>

		  // Send CAN frame
		  static uint8_t x = 0;
		  uint8_t data[4] = { 0,1,2,x++ };
 80009aa:	2300      	movs	r3, #0
 80009ac:	703b      	strb	r3, [r7, #0]
 80009ae:	2301      	movs	r3, #1
 80009b0:	707b      	strb	r3, [r7, #1]
 80009b2:	2302      	movs	r3, #2
 80009b4:	70bb      	strb	r3, [r7, #2]
 80009b6:	4b2a      	ldr	r3, [pc, #168]	; (8000a60 <main+0x150>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	b2d1      	uxtb	r1, r2
 80009be:	4a28      	ldr	r2, [pc, #160]	; (8000a60 <main+0x150>)
 80009c0:	7011      	strb	r1, [r2, #0]
 80009c2:	70fb      	strb	r3, [r7, #3]
		  HAL_StatusTypeDef can_success = TransmitCAN(0xAA, data, 4);
 80009c4:	463b      	mov	r3, r7
 80009c6:	2204      	movs	r2, #4
 80009c8:	4619      	mov	r1, r3
 80009ca:	20aa      	movs	r0, #170	; 0xaa
 80009cc:	f7ff ff70 	bl	80008b0 <TransmitCAN>
 80009d0:	4603      	mov	r3, r0
 80009d2:	73fb      	strb	r3, [r7, #15]
		  if (can_success != HAL_OK)
 80009d4:	7bfb      	ldrb	r3, [r7, #15]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d004      	beq.n	80009e4 <main+0xd4>
		  {
			  SetLed(LED_ERROR, 1);
 80009da:	2101      	movs	r1, #1
 80009dc:	2000      	movs	r0, #0
 80009de:	f7ff ff05 	bl	80007ec <SetLed>
 80009e2:	e003      	b.n	80009ec <main+0xdc>
		  }
		  else
		  {
			  SetLed(LED_ERROR, 0);
 80009e4:	2100      	movs	r1, #0
 80009e6:	2000      	movs	r0, #0
 80009e8:	f7ff ff00 	bl	80007ec <SetLed>
		  }
	  }

	  // Check which boards are connected
	  uint8_t hs1 = HAL_GPIO_ReadPin(HS1_GPIO_Port, HS1_Pin);  // Board C10_1
 80009ec:	2110      	movs	r1, #16
 80009ee:	481d      	ldr	r0, [pc, #116]	; (8000a64 <main+0x154>)
 80009f0:	f002 fb28 	bl	8003044 <HAL_GPIO_ReadPin>
 80009f4:	4603      	mov	r3, r0
 80009f6:	73bb      	strb	r3, [r7, #14]
	  uint8_t hs2 = HAL_GPIO_ReadPin(HS2_GPIO_Port, HS2_Pin);  // Board C10_2
 80009f8:	2120      	movs	r1, #32
 80009fa:	481a      	ldr	r0, [pc, #104]	; (8000a64 <main+0x154>)
 80009fc:	f002 fb22 	bl	8003044 <HAL_GPIO_ReadPin>
 8000a00:	4603      	mov	r3, r0
 8000a02:	737b      	strb	r3, [r7, #13]
	  uint8_t hs3 = HAL_GPIO_ReadPin(HS3_GPIO_Port, HS3_Pin);  // Board C10_3
 8000a04:	2140      	movs	r1, #64	; 0x40
 8000a06:	4817      	ldr	r0, [pc, #92]	; (8000a64 <main+0x154>)
 8000a08:	f002 fb1c 	bl	8003044 <HAL_GPIO_ReadPin>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	733b      	strb	r3, [r7, #12]
	  uint8_t hs4 = HAL_GPIO_ReadPin(HS4_GPIO_Port, HS4_Pin);  // Board C9
 8000a10:	2180      	movs	r1, #128	; 0x80
 8000a12:	4814      	ldr	r0, [pc, #80]	; (8000a64 <main+0x154>)
 8000a14:	f002 fb16 	bl	8003044 <HAL_GPIO_ReadPin>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	72fb      	strb	r3, [r7, #11]
	  //SetLed(LED2, hs2);
	  //SetLed(LED3, hs3);
	  //SetLed(LED4, hs4);

	  // Get Volant BTS428L2 status (low on error)
	  uint8_t volant_status = HAL_GPIO_ReadPin(Volant_Status_GPIO_Port, Volant_Status_Pin);
 8000a1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a20:	4811      	ldr	r0, [pc, #68]	; (8000a68 <main+0x158>)
 8000a22:	f002 fb0f 	bl	8003044 <HAL_GPIO_ReadPin>
 8000a26:	4603      	mov	r3, r0
 8000a28:	72bb      	strb	r3, [r7, #10]
	  if (volant_status == 0)
 8000a2a:	7abb      	ldrb	r3, [r7, #10]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d101      	bne.n	8000a34 <main+0x124>
	  {
		  // Disable volant voltage
		  DisableVolant24V();
 8000a30:	f7ff fed0 	bl	80007d4 <DisableVolant24V>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	  uint16_t raw_imon = HAL_ADC_GetValue(&hadc1);
	  */

	  // Check messages received on CANA bus
	  if (can1_recv_flag)
 8000a34:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <main+0x14c>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d005      	beq.n	8000a48 <main+0x138>
	  {
		  can1_recv_flag = 0;
 8000a3c:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <main+0x14c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	701a      	strb	r2, [r3, #0]

		  uint32_t id = pRxHeader.StdId;
 8000a42:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <main+0x15c>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	607b      	str	r3, [r7, #4]
	  }

	  // Execute main loop every 10ms
	  HAL_Delay(10);
 8000a48:	200a      	movs	r0, #10
 8000a4a:	f000 fddf 	bl	800160c <HAL_Delay>
  {
 8000a4e:	e7a2      	b.n	8000996 <main+0x86>
 8000a50:	2000019a 	.word	0x2000019a
 8000a54:	20000197 	.word	0x20000197
 8000a58:	20000080 	.word	0x20000080
 8000a5c:	200001fd 	.word	0x200001fd
 8000a60:	20000028 	.word	0x20000028
 8000a64:	40020800 	.word	0x40020800
 8000a68:	40020c00 	.word	0x40020c00
 8000a6c:	2000019c 	.word	0x2000019c

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b094      	sub	sp, #80	; 0x50
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	2234      	movs	r2, #52	; 0x34
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f004 f866 	bl	8004b50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	f107 0308 	add.w	r3, r7, #8
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a94:	2300      	movs	r3, #0
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	4b22      	ldr	r3, [pc, #136]	; (8000b24 <SystemClock_Config+0xb4>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	4a21      	ldr	r2, [pc, #132]	; (8000b24 <SystemClock_Config+0xb4>)
 8000a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <SystemClock_Config+0xb4>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <SystemClock_Config+0xb8>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a1b      	ldr	r2, [pc, #108]	; (8000b28 <SystemClock_Config+0xb8>)
 8000aba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <SystemClock_Config+0xb8>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000acc:	2302      	movs	r3, #2
 8000ace:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad4:	2310      	movs	r3, #16
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f003 f901 	bl	8003ce8 <HAL_RCC_OscConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000aec:	f000 faa6 	bl	800103c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af0:	230f      	movs	r3, #15
 8000af2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b04:	f107 0308 	add.w	r3, r7, #8
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f002 ff30 	bl	8003970 <HAL_RCC_ClockConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000b16:	f000 fa91 	bl	800103c <Error_Handler>
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	3750      	adds	r7, #80	; 0x50
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40007000 	.word	0x40007000

08000b2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b32:	463b      	mov	r3, r7
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b3e:	4b21      	ldr	r3, [pc, #132]	; (8000bc4 <MX_ADC1_Init+0x98>)
 8000b40:	4a21      	ldr	r2, [pc, #132]	; (8000bc8 <MX_ADC1_Init+0x9c>)
 8000b42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b44:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <MX_ADC1_Init+0x98>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b4a:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <MX_ADC1_Init+0x98>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b50:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <MX_ADC1_Init+0x98>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b56:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <MX_ADC1_Init+0x98>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b5c:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <MX_ADC1_Init+0x98>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b64:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <MX_ADC1_Init+0x98>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b6a:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <MX_ADC1_Init+0x98>)
 8000b6c:	4a17      	ldr	r2, [pc, #92]	; (8000bcc <MX_ADC1_Init+0xa0>)
 8000b6e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <MX_ADC1_Init+0x98>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <MX_ADC1_Init+0x98>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_ADC1_Init+0x98>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_ADC1_Init+0x98>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b8a:	480e      	ldr	r0, [pc, #56]	; (8000bc4 <MX_ADC1_Init+0x98>)
 8000b8c:	f000 fd62 	bl	8001654 <HAL_ADC_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000b96:	f000 fa51 	bl	800103c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000b9a:	2306      	movs	r3, #6
 8000b9c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4806      	ldr	r0, [pc, #24]	; (8000bc4 <MX_ADC1_Init+0x98>)
 8000bac:	f000 fef4 	bl	8001998 <HAL_ADC_ConfigChannel>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000bb6:	f000 fa41 	bl	800103c <Error_Handler>
  /* USER CODE BEGIN ADC1_Init 2 */
  // HAL_ADC_Start_IT(&hadc1);

  /* USER CODE END ADC1_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000124 	.word	0x20000124
 8000bc8:	40012000 	.word	0x40012000
 8000bcc:	0f000001 	.word	0x0f000001

08000bd0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000bd6:	4b2d      	ldr	r3, [pc, #180]	; (8000c8c <MX_CAN1_Init+0xbc>)
 8000bd8:	4a2d      	ldr	r2, [pc, #180]	; (8000c90 <MX_CAN1_Init+0xc0>)
 8000bda:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 8000bdc:	4b2b      	ldr	r3, [pc, #172]	; (8000c8c <MX_CAN1_Init+0xbc>)
 8000bde:	2215      	movs	r2, #21
 8000be0:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000be2:	4b2a      	ldr	r3, [pc, #168]	; (8000c8c <MX_CAN1_Init+0xbc>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000be8:	4b28      	ldr	r3, [pc, #160]	; (8000c8c <MX_CAN1_Init+0xbc>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000bee:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <MX_CAN1_Init+0xbc>)
 8000bf0:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8000bf4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000bf6:	4b25      	ldr	r3, [pc, #148]	; (8000c8c <MX_CAN1_Init+0xbc>)
 8000bf8:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000bfc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000bfe:	4b23      	ldr	r3, [pc, #140]	; (8000c8c <MX_CAN1_Init+0xbc>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000c04:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <MX_CAN1_Init+0xbc>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000c0a:	4b20      	ldr	r3, [pc, #128]	; (8000c8c <MX_CAN1_Init+0xbc>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000c10:	4b1e      	ldr	r3, [pc, #120]	; (8000c8c <MX_CAN1_Init+0xbc>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c16:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <MX_CAN1_Init+0xbc>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c1c:	4b1b      	ldr	r3, [pc, #108]	; (8000c8c <MX_CAN1_Init+0xbc>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c22:	481a      	ldr	r0, [pc, #104]	; (8000c8c <MX_CAN1_Init+0xbc>)
 8000c24:	f001 f8f0 	bl	8001e08 <HAL_CAN_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000c2e:	f000 fa05 	bl	800103c <Error_Handler>
  /* USER CODE BEGIN CAN1_Init 2 */

  // CAN Filters explained : https://schulz-m.github.io/2017/03/23/stm32-can-id-filter/

  CAN_FilterTypeDef sf;
  sf.FilterMaskIdHigh = 0x0000;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60bb      	str	r3, [r7, #8]
  sf.FilterMaskIdLow = 0x0000;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
  sf.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
  sf.FilterBank = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
  sf.FilterMode = CAN_FILTERMODE_IDMASK;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61bb      	str	r3, [r7, #24]
  sf.FilterScale = CAN_FILTERSCALE_32BIT;
 8000c46:	2301      	movs	r3, #1
 8000c48:	61fb      	str	r3, [r7, #28]
  sf.FilterActivation = CAN_FILTER_ENABLE;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	623b      	str	r3, [r7, #32]
  if (HAL_CAN_ConfigFilter(&hcan1, &sf) != HAL_OK)
 8000c4e:	463b      	mov	r3, r7
 8000c50:	4619      	mov	r1, r3
 8000c52:	480e      	ldr	r0, [pc, #56]	; (8000c8c <MX_CAN1_Init+0xbc>)
 8000c54:	f001 f9d4 	bl	8002000 <HAL_CAN_ConfigFilter>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_CAN1_Init+0x92>
  {
	  Error_Handler();
 8000c5e:	f000 f9ed 	bl	800103c <Error_Handler>
  }
  //if (HAL_CAN_RegisterCallback(&hcan1, HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID, can_irq))
  //{
  //	  Error_Handler();
  //}
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000c62:	480a      	ldr	r0, [pc, #40]	; (8000c8c <MX_CAN1_Init+0xbc>)
 8000c64:	f001 fab8 	bl	80021d8 <HAL_CAN_Start>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_CAN1_Init+0xa2>
  {
      Error_Handler();
 8000c6e:	f000 f9e5 	bl	800103c <Error_Handler>
  }
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000c72:	2102      	movs	r1, #2
 8000c74:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_CAN1_Init+0xbc>)
 8000c76:	f001 fce0 	bl	800263a <HAL_CAN_ActivateNotification>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_CAN1_Init+0xb4>
  {
      Error_Handler();
 8000c80:	f000 f9dc 	bl	800103c <Error_Handler>
  }

  /* USER CODE END CAN1_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	3728      	adds	r7, #40	; 0x28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	200001b8 	.word	0x200001b8
 8000c90:	40006400 	.word	0x40006400

08000c94 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000c98:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <MX_CAN2_Init+0x60>)
 8000c9a:	4a17      	ldr	r2, [pc, #92]	; (8000cf8 <MX_CAN2_Init+0x64>)
 8000c9c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000c9e:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <MX_CAN2_Init+0x60>)
 8000ca0:	2210      	movs	r2, #16
 8000ca2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000ca4:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <MX_CAN2_Init+0x60>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000caa:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <MX_CAN2_Init+0x60>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000cb0:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <MX_CAN2_Init+0x60>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000cb6:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <MX_CAN2_Init+0x60>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000cbc:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <MX_CAN2_Init+0x60>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_CAN2_Init+0x60>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000cc8:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <MX_CAN2_Init+0x60>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <MX_CAN2_Init+0x60>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000cd4:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <MX_CAN2_Init+0x60>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <MX_CAN2_Init+0x60>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000ce0:	4804      	ldr	r0, [pc, #16]	; (8000cf4 <MX_CAN2_Init+0x60>)
 8000ce2:	f001 f891 	bl	8001e08 <HAL_CAN_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000cec:	f000 f9a6 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	2000016c 	.word	0x2000016c
 8000cf8:	40006800 	.word	0x40006800

08000cfc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d02:	4a13      	ldr	r2, [pc, #76]	; (8000d50 <MX_I2C1_Init+0x54>)
 8000d04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d08:	4a12      	ldr	r2, [pc, #72]	; (8000d54 <MX_I2C1_Init+0x58>)
 8000d0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d20:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d2c:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d38:	4804      	ldr	r0, [pc, #16]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d3a:	f002 f9cd 	bl	80030d8 <HAL_I2C_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d44:	f000 f97a 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000084 	.word	0x20000084
 8000d50:	40005400 	.word	0x40005400
 8000d54:	000186a0 	.word	0x000186a0

08000d58 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <MX_I2C3_Init+0x50>)
 8000d5e:	4a13      	ldr	r2, [pc, #76]	; (8000dac <MX_I2C3_Init+0x54>)
 8000d60:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <MX_I2C3_Init+0x50>)
 8000d64:	4a12      	ldr	r2, [pc, #72]	; (8000db0 <MX_I2C3_Init+0x58>)
 8000d66:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d68:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <MX_I2C3_Init+0x50>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <MX_I2C3_Init+0x50>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <MX_I2C3_Init+0x50>)
 8000d76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d7a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <MX_I2C3_Init+0x50>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <MX_I2C3_Init+0x50>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d88:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <MX_I2C3_Init+0x50>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <MX_I2C3_Init+0x50>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000d94:	4804      	ldr	r0, [pc, #16]	; (8000da8 <MX_I2C3_Init+0x50>)
 8000d96:	f002 f99f 	bl	80030d8 <HAL_I2C_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000da0:	f000 f94c 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	2000002c 	.word	0x2000002c
 8000dac:	40005c00 	.word	0x40005c00
 8000db0:	000186a0 	.word	0x000186a0

08000db4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dba:	f107 0308 	add.w	r3, r7, #8
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc8:	463b      	mov	r3, r7
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dd0:	4b1e      	ldr	r3, [pc, #120]	; (8000e4c <MX_TIM3_Init+0x98>)
 8000dd2:	4a1f      	ldr	r2, [pc, #124]	; (8000e50 <MX_TIM3_Init+0x9c>)
 8000dd4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160;
 8000dd6:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <MX_TIM3_Init+0x98>)
 8000dd8:	22a0      	movs	r2, #160	; 0xa0
 8000dda:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ddc:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <MX_TIM3_Init+0x98>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8000de2:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <MX_TIM3_Init+0x98>)
 8000de4:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000de8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dea:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <MX_TIM3_Init+0x98>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df0:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <MX_TIM3_Init+0x98>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000df6:	4815      	ldr	r0, [pc, #84]	; (8000e4c <MX_TIM3_Init+0x98>)
 8000df8:	f003 f9fa 	bl	80041f0 <HAL_TIM_Base_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e02:	f000 f91b 	bl	800103c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e0c:	f107 0308 	add.w	r3, r7, #8
 8000e10:	4619      	mov	r1, r3
 8000e12:	480e      	ldr	r0, [pc, #56]	; (8000e4c <MX_TIM3_Init+0x98>)
 8000e14:	f003 fbb4 	bl	8004580 <HAL_TIM_ConfigClockSource>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e1e:	f000 f90d 	bl	800103c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e22:	2300      	movs	r3, #0
 8000e24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4807      	ldr	r0, [pc, #28]	; (8000e4c <MX_TIM3_Init+0x98>)
 8000e30:	f003 fdda 	bl	80049e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000e3a:	f000 f8ff 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000e3e:	4803      	ldr	r0, [pc, #12]	; (8000e4c <MX_TIM3_Init+0x98>)
 8000e40:	f003 fa26 	bl	8004290 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	3718      	adds	r7, #24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	200000d8 	.word	0x200000d8
 8000e50:	40000400 	.word	0x40000400

08000e54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	; 0x28
 8000e58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	4b62      	ldr	r3, [pc, #392]	; (8000ff8 <MX_GPIO_Init+0x1a4>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a61      	ldr	r2, [pc, #388]	; (8000ff8 <MX_GPIO_Init+0x1a4>)
 8000e74:	f043 0310 	orr.w	r3, r3, #16
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b5f      	ldr	r3, [pc, #380]	; (8000ff8 <MX_GPIO_Init+0x1a4>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0310 	and.w	r3, r3, #16
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b5b      	ldr	r3, [pc, #364]	; (8000ff8 <MX_GPIO_Init+0x1a4>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a5a      	ldr	r2, [pc, #360]	; (8000ff8 <MX_GPIO_Init+0x1a4>)
 8000e90:	f043 0304 	orr.w	r3, r3, #4
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b58      	ldr	r3, [pc, #352]	; (8000ff8 <MX_GPIO_Init+0x1a4>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0304 	and.w	r3, r3, #4
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	4b54      	ldr	r3, [pc, #336]	; (8000ff8 <MX_GPIO_Init+0x1a4>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a53      	ldr	r2, [pc, #332]	; (8000ff8 <MX_GPIO_Init+0x1a4>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b51      	ldr	r3, [pc, #324]	; (8000ff8 <MX_GPIO_Init+0x1a4>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	4b4d      	ldr	r3, [pc, #308]	; (8000ff8 <MX_GPIO_Init+0x1a4>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a4c      	ldr	r2, [pc, #304]	; (8000ff8 <MX_GPIO_Init+0x1a4>)
 8000ec8:	f043 0302 	orr.w	r3, r3, #2
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b4a      	ldr	r3, [pc, #296]	; (8000ff8 <MX_GPIO_Init+0x1a4>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	4b46      	ldr	r3, [pc, #280]	; (8000ff8 <MX_GPIO_Init+0x1a4>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a45      	ldr	r2, [pc, #276]	; (8000ff8 <MX_GPIO_Init+0x1a4>)
 8000ee4:	f043 0308 	orr.w	r3, r3, #8
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b43      	ldr	r3, [pc, #268]	; (8000ff8 <MX_GPIO_Init+0x1a4>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0308 	and.w	r3, r3, #8
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Speaker_GPIO_Port, Speaker_Pin, GPIO_PIN_RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2108      	movs	r1, #8
 8000efa:	4840      	ldr	r0, [pc, #256]	; (8000ffc <MX_GPIO_Init+0x1a8>)
 8000efc:	f002 f8ba 	bl	8003074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_PWR_RPI_Pin|CLK_PWR_RPI_Pin|SHUTDOWN_RPI_Pin, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	f242 0103 	movw	r1, #8195	; 0x2003
 8000f06:	483e      	ldr	r0, [pc, #248]	; (8001000 <MX_GPIO_Init+0x1ac>)
 8000f08:	f002 f8b4 	bl	8003074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Volant_Enable24V_Pin|UART_TXDEn_Pin|FT230_RESET_Pin|USB_PROG_EN_Pin
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f243 41f8 	movw	r1, #13560	; 0x34f8
 8000f12:	483c      	ldr	r0, [pc, #240]	; (8001004 <MX_GPIO_Init+0x1b0>)
 8000f14:	f002 f8ae 	bl	8003074 <HAL_GPIO_WritePin>
                          |USB_Enable1_Pin|USB_Enable2_Pin|USB_Enable3_Pin|USB_Enable4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Speaker_Pin */
  GPIO_InitStruct.Pin = Speaker_Pin;
 8000f18:	2308      	movs	r3, #8
 8000f1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Speaker_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4833      	ldr	r0, [pc, #204]	; (8000ffc <MX_GPIO_Init+0x1a8>)
 8000f30:	f001 fef4 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_PWR_RPI_Pin CLK_PWR_RPI_Pin SHUTDOWN_RPI_Pin */
  GPIO_InitStruct.Pin = EN_PWR_RPI_Pin|CLK_PWR_RPI_Pin|SHUTDOWN_RPI_Pin;
 8000f34:	f242 0303 	movw	r3, #8195	; 0x2003
 8000f38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	482c      	ldr	r0, [pc, #176]	; (8001000 <MX_GPIO_Init+0x1ac>)
 8000f4e:	f001 fee5 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : RUNNING_RPI_Pin DETECT_PWR_RPI_Pin HS1_Pin HS2_Pin
                           HS3_Pin HS4_Pin */
  GPIO_InitStruct.Pin = RUNNING_RPI_Pin|DETECT_PWR_RPI_Pin|HS1_Pin|HS2_Pin
 8000f52:	23fc      	movs	r3, #252	; 0xfc
 8000f54:	617b      	str	r3, [r7, #20]
                          |HS3_Pin|HS4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	4826      	ldr	r0, [pc, #152]	; (8001000 <MX_GPIO_Init+0x1ac>)
 8000f66:	f001 fed9 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000f6a:	230f      	movs	r3, #15
 8000f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f76:	2303      	movs	r3, #3
 8000f78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f7a:	2307      	movs	r3, #7
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	4820      	ldr	r0, [pc, #128]	; (8001008 <MX_GPIO_Init+0x1b4>)
 8000f86:	f001 fec9 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : Volant_Enable24V_Pin UART_TXDEn_Pin FT230_RESET_Pin USB_PROG_EN_Pin
                           USB_Enable1_Pin USB_Enable2_Pin USB_Enable3_Pin USB_Enable4_Pin */
  GPIO_InitStruct.Pin = Volant_Enable24V_Pin|UART_TXDEn_Pin|FT230_RESET_Pin|USB_PROG_EN_Pin
 8000f8a:	f243 43f8 	movw	r3, #13560	; 0x34f8
 8000f8e:	617b      	str	r3, [r7, #20]
                          |USB_Enable1_Pin|USB_Enable2_Pin|USB_Enable3_Pin|USB_Enable4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f90:	2301      	movs	r3, #1
 8000f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4818      	ldr	r0, [pc, #96]	; (8001004 <MX_GPIO_Init+0x1b0>)
 8000fa4:	f001 feba 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : Volant_Status_Pin INT_IO1_Pin INT_IO2_Pin */
  GPIO_InitStruct.Pin = Volant_Status_Pin|INT_IO1_Pin|INT_IO2_Pin;
 8000fa8:	f640 0303 	movw	r3, #2051	; 0x803
 8000fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4811      	ldr	r0, [pc, #68]	; (8001004 <MX_GPIO_Init+0x1b0>)
 8000fbe:	f001 fead 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2_Pin PB1_Pin */
  GPIO_InitStruct.Pin = PB2_Pin|PB1_Pin;
 8000fc2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fc8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	480a      	ldr	r0, [pc, #40]	; (8001004 <MX_GPIO_Init+0x1b0>)
 8000fda:	f001 fe9f 	bl	8002d1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2028      	movs	r0, #40	; 0x28
 8000fe4:	f001 fe63 	bl	8002cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fe8:	2028      	movs	r0, #40	; 0x28
 8000fea:	f001 fe7c 	bl	8002ce6 <HAL_NVIC_EnableIRQ>

}
 8000fee:	bf00      	nop
 8000ff0:	3728      	adds	r7, #40	; 0x28
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40021000 	.word	0x40021000
 8001000:	40020800 	.word	0x40020800
 8001004:	40020c00 	.word	0x40020c00
 8001008:	40020000 	.word	0x40020000

0800100c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

// EXTI Line External Interrupt ISR Handler CallBack
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_14) // PD_14
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800101c:	d103      	bne.n	8001026 <HAL_GPIO_EXTI_Callback+0x1a>
    {
    	// LED4
    	//gpio0_gp0 = (gpio0_gp0 ^ (1 << 5));
    	//GPIO_SendI2C(GPIO0_ADDR, GPIO_GP0, gpio0_gp0);
    	ToggleLed(LED1);
 800101e:	2006      	movs	r0, #6
 8001020:	f7ff fc1e 	bl	8000860 <ToggleLed>
    	// LED3
    	//gpio0_gp0 = (gpio0_gp0 ^ (1 << 6));
    	//GPIO_SendI2C(GPIO0_ADDR, GPIO_GP0, gpio0_gp0);
    	ToggleLed(LED2);
    }
}
 8001024:	e006      	b.n	8001034 <HAL_GPIO_EXTI_Callback+0x28>
    else if (GPIO_Pin == GPIO_PIN_15) // PD_15
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800102c:	d102      	bne.n	8001034 <HAL_GPIO_EXTI_Callback+0x28>
    	ToggleLed(LED2);
 800102e:	2005      	movs	r0, #5
 8001030:	f7ff fc16 	bl	8000860 <ToggleLed>
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <HAL_MspInit+0x4c>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	4a0f      	ldr	r2, [pc, #60]	; (8001098 <HAL_MspInit+0x4c>)
 800105c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001060:	6453      	str	r3, [r2, #68]	; 0x44
 8001062:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <HAL_MspInit+0x4c>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	603b      	str	r3, [r7, #0]
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <HAL_MspInit+0x4c>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	4a08      	ldr	r2, [pc, #32]	; (8001098 <HAL_MspInit+0x4c>)
 8001078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800107c:	6413      	str	r3, [r2, #64]	; 0x40
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_MspInit+0x4c>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800

0800109c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a1b      	ldr	r2, [pc, #108]	; (8001128 <HAL_ADC_MspInit+0x8c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d12f      	bne.n	800111e <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b1a      	ldr	r3, [pc, #104]	; (800112c <HAL_ADC_MspInit+0x90>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a19      	ldr	r2, [pc, #100]	; (800112c <HAL_ADC_MspInit+0x90>)
 80010c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b17      	ldr	r3, [pc, #92]	; (800112c <HAL_ADC_MspInit+0x90>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <HAL_ADC_MspInit+0x90>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a12      	ldr	r2, [pc, #72]	; (800112c <HAL_ADC_MspInit+0x90>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <HAL_ADC_MspInit+0x90>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010f6:	2340      	movs	r3, #64	; 0x40
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fa:	2303      	movs	r3, #3
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	4809      	ldr	r0, [pc, #36]	; (8001130 <HAL_ADC_MspInit+0x94>)
 800110a:	f001 fe07 	bl	8002d1c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2100      	movs	r1, #0
 8001112:	2012      	movs	r0, #18
 8001114:	f001 fdcb 	bl	8002cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001118:	2012      	movs	r0, #18
 800111a:	f001 fde4 	bl	8002ce6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800111e:	bf00      	nop
 8001120:	3728      	adds	r7, #40	; 0x28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40012000 	.word	0x40012000
 800112c:	40023800 	.word	0x40023800
 8001130:	40020000 	.word	0x40020000

08001134 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08c      	sub	sp, #48	; 0x30
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a37      	ldr	r2, [pc, #220]	; (8001230 <HAL_CAN_MspInit+0xfc>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d135      	bne.n	80011c2 <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	61bb      	str	r3, [r7, #24]
 800115a:	4b36      	ldr	r3, [pc, #216]	; (8001234 <HAL_CAN_MspInit+0x100>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	4a35      	ldr	r2, [pc, #212]	; (8001234 <HAL_CAN_MspInit+0x100>)
 8001160:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001164:	6413      	str	r3, [r2, #64]	; 0x40
 8001166:	4b33      	ldr	r3, [pc, #204]	; (8001234 <HAL_CAN_MspInit+0x100>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800116e:	61bb      	str	r3, [r7, #24]
 8001170:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	4b2f      	ldr	r3, [pc, #188]	; (8001234 <HAL_CAN_MspInit+0x100>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a2e      	ldr	r2, [pc, #184]	; (8001234 <HAL_CAN_MspInit+0x100>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b2c      	ldr	r3, [pc, #176]	; (8001234 <HAL_CAN_MspInit+0x100>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800118e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119c:	2303      	movs	r3, #3
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80011a0:	2309      	movs	r3, #9
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	4619      	mov	r1, r3
 80011aa:	4823      	ldr	r0, [pc, #140]	; (8001238 <HAL_CAN_MspInit+0x104>)
 80011ac:	f001 fdb6 	bl	8002d1c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2100      	movs	r1, #0
 80011b4:	2014      	movs	r0, #20
 80011b6:	f001 fd7a 	bl	8002cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80011ba:	2014      	movs	r0, #20
 80011bc:	f001 fd93 	bl	8002ce6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80011c0:	e031      	b.n	8001226 <HAL_CAN_MspInit+0xf2>
  else if(hcan->Instance==CAN2)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a1d      	ldr	r2, [pc, #116]	; (800123c <HAL_CAN_MspInit+0x108>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d12c      	bne.n	8001226 <HAL_CAN_MspInit+0xf2>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80011cc:	2300      	movs	r3, #0
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	4b18      	ldr	r3, [pc, #96]	; (8001234 <HAL_CAN_MspInit+0x100>)
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	4a17      	ldr	r2, [pc, #92]	; (8001234 <HAL_CAN_MspInit+0x100>)
 80011d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011da:	6413      	str	r3, [r2, #64]	; 0x40
 80011dc:	4b15      	ldr	r3, [pc, #84]	; (8001234 <HAL_CAN_MspInit+0x100>)
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <HAL_CAN_MspInit+0x100>)
 80011ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f0:	4a10      	ldr	r2, [pc, #64]	; (8001234 <HAL_CAN_MspInit+0x100>)
 80011f2:	f043 0302 	orr.w	r3, r3, #2
 80011f6:	6313      	str	r3, [r2, #48]	; 0x30
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <HAL_CAN_MspInit+0x100>)
 80011fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001204:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001216:	2309      	movs	r3, #9
 8001218:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	4619      	mov	r1, r3
 8001220:	4807      	ldr	r0, [pc, #28]	; (8001240 <HAL_CAN_MspInit+0x10c>)
 8001222:	f001 fd7b 	bl	8002d1c <HAL_GPIO_Init>
}
 8001226:	bf00      	nop
 8001228:	3730      	adds	r7, #48	; 0x30
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40006400 	.word	0x40006400
 8001234:	40023800 	.word	0x40023800
 8001238:	40020000 	.word	0x40020000
 800123c:	40006800 	.word	0x40006800
 8001240:	40020400 	.word	0x40020400

08001244 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08c      	sub	sp, #48	; 0x30
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 031c 	add.w	r3, r7, #28
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a42      	ldr	r2, [pc, #264]	; (800136c <HAL_I2C_MspInit+0x128>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d12c      	bne.n	80012c0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	61bb      	str	r3, [r7, #24]
 800126a:	4b41      	ldr	r3, [pc, #260]	; (8001370 <HAL_I2C_MspInit+0x12c>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a40      	ldr	r2, [pc, #256]	; (8001370 <HAL_I2C_MspInit+0x12c>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b3e      	ldr	r3, [pc, #248]	; (8001370 <HAL_I2C_MspInit+0x12c>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	61bb      	str	r3, [r7, #24]
 8001280:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001282:	23c0      	movs	r3, #192	; 0xc0
 8001284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001286:	2312      	movs	r3, #18
 8001288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800128a:	2301      	movs	r3, #1
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128e:	2303      	movs	r3, #3
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001292:	2304      	movs	r3, #4
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	4619      	mov	r1, r3
 800129c:	4835      	ldr	r0, [pc, #212]	; (8001374 <HAL_I2C_MspInit+0x130>)
 800129e:	f001 fd3d 	bl	8002d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	4b32      	ldr	r3, [pc, #200]	; (8001370 <HAL_I2C_MspInit+0x12c>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	4a31      	ldr	r2, [pc, #196]	; (8001370 <HAL_I2C_MspInit+0x12c>)
 80012ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012b0:	6413      	str	r3, [r2, #64]	; 0x40
 80012b2:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <HAL_I2C_MspInit+0x12c>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80012be:	e050      	b.n	8001362 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a2c      	ldr	r2, [pc, #176]	; (8001378 <HAL_I2C_MspInit+0x134>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d14b      	bne.n	8001362 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b28      	ldr	r3, [pc, #160]	; (8001370 <HAL_I2C_MspInit+0x12c>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a27      	ldr	r2, [pc, #156]	; (8001370 <HAL_I2C_MspInit+0x12c>)
 80012d4:	f043 0304 	orr.w	r3, r3, #4
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b25      	ldr	r3, [pc, #148]	; (8001370 <HAL_I2C_MspInit+0x12c>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b21      	ldr	r3, [pc, #132]	; (8001370 <HAL_I2C_MspInit+0x12c>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a20      	ldr	r2, [pc, #128]	; (8001370 <HAL_I2C_MspInit+0x12c>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <HAL_I2C_MspInit+0x12c>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001302:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001308:	2312      	movs	r3, #18
 800130a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800130c:	2301      	movs	r3, #1
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001310:	2303      	movs	r3, #3
 8001312:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001314:	2304      	movs	r3, #4
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001318:	f107 031c 	add.w	r3, r7, #28
 800131c:	4619      	mov	r1, r3
 800131e:	4817      	ldr	r0, [pc, #92]	; (800137c <HAL_I2C_MspInit+0x138>)
 8001320:	f001 fcfc 	bl	8002d1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001324:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800132a:	2312      	movs	r3, #18
 800132c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800132e:	2301      	movs	r3, #1
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001336:	2304      	movs	r3, #4
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	4619      	mov	r1, r3
 8001340:	480f      	ldr	r0, [pc, #60]	; (8001380 <HAL_I2C_MspInit+0x13c>)
 8001342:	f001 fceb 	bl	8002d1c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <HAL_I2C_MspInit+0x12c>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	4a08      	ldr	r2, [pc, #32]	; (8001370 <HAL_I2C_MspInit+0x12c>)
 8001350:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001354:	6413      	str	r3, [r2, #64]	; 0x40
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_I2C_MspInit+0x12c>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
}
 8001362:	bf00      	nop
 8001364:	3730      	adds	r7, #48	; 0x30
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40005400 	.word	0x40005400
 8001370:	40023800 	.word	0x40023800
 8001374:	40020400 	.word	0x40020400
 8001378:	40005c00 	.word	0x40005c00
 800137c:	40020800 	.word	0x40020800
 8001380:	40020000 	.word	0x40020000

08001384 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a0e      	ldr	r2, [pc, #56]	; (80013cc <HAL_TIM_Base_MspInit+0x48>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d115      	bne.n	80013c2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <HAL_TIM_Base_MspInit+0x4c>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	4a0c      	ldr	r2, [pc, #48]	; (80013d0 <HAL_TIM_Base_MspInit+0x4c>)
 80013a0:	f043 0302 	orr.w	r3, r3, #2
 80013a4:	6413      	str	r3, [r2, #64]	; 0x40
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <HAL_TIM_Base_MspInit+0x4c>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2100      	movs	r1, #0
 80013b6:	201d      	movs	r0, #29
 80013b8:	f001 fc79 	bl	8002cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013bc:	201d      	movs	r0, #29
 80013be:	f001 fc92 	bl	8002ce6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013c2:	bf00      	nop
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40000400 	.word	0x40000400
 80013d0:	40023800 	.word	0x40023800

080013d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e6:	e7fe      	b.n	80013e6 <HardFault_Handler+0x4>

080013e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <MemManage_Handler+0x4>

080013ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f2:	e7fe      	b.n	80013f2 <BusFault_Handler+0x4>

080013f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <UsageFault_Handler+0x4>

080013fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001428:	f000 f8d0 	bl	80015cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}

08001430 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */



  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <ADC_IRQHandler+0x10>)
 8001436:	f000 f950 	bl	80016da <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000124 	.word	0x20000124

08001444 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001448:	4806      	ldr	r0, [pc, #24]	; (8001464 <CAN1_RX0_IRQHandler+0x20>)
 800144a:	f001 f91c 	bl	8002686 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  can1_recv_flag = 1;
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <CAN1_RX0_IRQHandler+0x24>)
 8001450:	2201      	movs	r2, #1
 8001452:	701a      	strb	r2, [r3, #0]
  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pRxHeader, &r);
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <CAN1_RX0_IRQHandler+0x28>)
 8001456:	4a06      	ldr	r2, [pc, #24]	; (8001470 <CAN1_RX0_IRQHandler+0x2c>)
 8001458:	2100      	movs	r1, #0
 800145a:	4802      	ldr	r0, [pc, #8]	; (8001464 <CAN1_RX0_IRQHandler+0x20>)
 800145c:	f000 ffdb 	bl	8002416 <HAL_CAN_GetRxMessage>
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200001b8 	.word	0x200001b8
 8001468:	200001fd 	.word	0x200001fd
 800146c:	20000121 	.word	0x20000121
 8001470:	2000019c 	.word	0x2000019c

08001474 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	timer_flag = 1;
 8001478:	4b03      	ldr	r3, [pc, #12]	; (8001488 <TIM3_IRQHandler+0x14>)
 800147a:	2201      	movs	r2, #1
 800147c:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800147e:	4803      	ldr	r0, [pc, #12]	; (800148c <TIM3_IRQHandler+0x18>)
 8001480:	f002 ff76 	bl	8004370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	2000019a 	.word	0x2000019a
 800148c:	200000d8 	.word	0x200000d8

08001490 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
		pb2_pressed = 1;
	}
	*/

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB2_Pin);
 8001494:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001498:	f001 fe06 	bl	80030a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PB1_Pin);
 800149c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80014a0:	f001 fe02 	bl	80030a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <SystemInit+0x28>)
 80014ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014b2:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <SystemInit+0x28>)
 80014b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <SystemInit+0x28>)
 80014be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014c2:	609a      	str	r2, [r3, #8]
#endif
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack       /* set stack pointer */
 80014d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800150c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80014d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014da:	e003      	b.n	80014e4 <LoopCopyDataInit>

080014dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014e2:	3104      	adds	r1, #4

080014e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014e4:	480b      	ldr	r0, [pc, #44]	; (8001514 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014e6:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014ec:	d3f6      	bcc.n	80014dc <CopyDataInit>
  ldr  r2, =_sbss
 80014ee:	4a0b      	ldr	r2, [pc, #44]	; (800151c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014f0:	e002      	b.n	80014f8 <LoopFillZerobss>

080014f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80014f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014f4:	f842 3b04 	str.w	r3, [r2], #4

080014f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014f8:	4b09      	ldr	r3, [pc, #36]	; (8001520 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014fc:	d3f9      	bcc.n	80014f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014fe:	f7ff ffd3 	bl	80014a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001502:	f003 fb01 	bl	8004b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001506:	f7ff fa03 	bl	8000910 <main>
  bx  lr    
 800150a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800150c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001510:	08004ba0 	.word	0x08004ba0
  ldr  r0, =_sdata
 8001514:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001518:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800151c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001520:	20000208 	.word	0x20000208

08001524 <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001524:	e7fe      	b.n	8001524 <CAN1_RX1_IRQHandler>
	...

08001528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800152c:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <HAL_Init+0x40>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <HAL_Init+0x40>)
 8001532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001536:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001538:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <HAL_Init+0x40>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <HAL_Init+0x40>)
 800153e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001542:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <HAL_Init+0x40>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a07      	ldr	r2, [pc, #28]	; (8001568 <HAL_Init+0x40>)
 800154a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800154e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001550:	2003      	movs	r0, #3
 8001552:	f001 fba1 	bl	8002c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001556:	2000      	movs	r0, #0
 8001558:	f000 f808 	bl	800156c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800155c:	f7ff fd76 	bl	800104c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40023c00 	.word	0x40023c00

0800156c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_InitTick+0x54>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <HAL_InitTick+0x58>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4619      	mov	r1, r3
 800157e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001582:	fbb3 f3f1 	udiv	r3, r3, r1
 8001586:	fbb2 f3f3 	udiv	r3, r2, r3
 800158a:	4618      	mov	r0, r3
 800158c:	f001 fbb9 	bl	8002d02 <HAL_SYSTICK_Config>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e00e      	b.n	80015b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b0f      	cmp	r3, #15
 800159e:	d80a      	bhi.n	80015b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a0:	2200      	movs	r2, #0
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015a8:	f001 fb81 	bl	8002cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015ac:	4a06      	ldr	r2, [pc, #24]	; (80015c8 <HAL_InitTick+0x5c>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e000      	b.n	80015b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000000 	.word	0x20000000
 80015c4:	20000008 	.word	0x20000008
 80015c8:	20000004 	.word	0x20000004

080015cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_IncTick+0x20>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_IncTick+0x24>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4413      	add	r3, r2
 80015dc:	4a04      	ldr	r2, [pc, #16]	; (80015f0 <HAL_IncTick+0x24>)
 80015de:	6013      	str	r3, [r2, #0]
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	20000008 	.word	0x20000008
 80015f0:	20000204 	.word	0x20000204

080015f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  return uwTick;
 80015f8:	4b03      	ldr	r3, [pc, #12]	; (8001608 <HAL_GetTick+0x14>)
 80015fa:	681b      	ldr	r3, [r3, #0]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20000204 	.word	0x20000204

0800160c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001614:	f7ff ffee 	bl	80015f4 <HAL_GetTick>
 8001618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001624:	d005      	beq.n	8001632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001626:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <HAL_Delay+0x44>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4413      	add	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001632:	bf00      	nop
 8001634:	f7ff ffde 	bl	80015f4 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	429a      	cmp	r2, r3
 8001642:	d8f7      	bhi.n	8001634 <HAL_Delay+0x28>
  {
  }
}
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000008 	.word	0x20000008

08001654 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e033      	b.n	80016d2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	2b00      	cmp	r3, #0
 8001670:	d109      	bne.n	8001686 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff fd12 	bl	800109c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f003 0310 	and.w	r3, r3, #16
 800168e:	2b00      	cmp	r3, #0
 8001690:	d118      	bne.n	80016c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800169a:	f023 0302 	bic.w	r3, r3, #2
 800169e:	f043 0202 	orr.w	r2, r3, #2
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 faa8 	bl	8001bfc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	f023 0303 	bic.w	r3, r3, #3
 80016ba:	f043 0201 	orr.w	r2, r3, #1
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	641a      	str	r2, [r3, #64]	; 0x40
 80016c2:	e001      	b.n	80016c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b084      	sub	sp, #16
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	bf0c      	ite	eq
 80016f8:	2301      	moveq	r3, #1
 80016fa:	2300      	movne	r3, #0
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 0320 	and.w	r3, r3, #32
 800170a:	2b20      	cmp	r3, #32
 800170c:	bf0c      	ite	eq
 800170e:	2301      	moveq	r3, #1
 8001710:	2300      	movne	r3, #0
 8001712:	b2db      	uxtb	r3, r3
 8001714:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d049      	beq.n	80017b0 <HAL_ADC_IRQHandler+0xd6>
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d046      	beq.n	80017b0 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f003 0310 	and.w	r3, r3, #16
 800172a:	2b00      	cmp	r3, #0
 800172c:	d105      	bne.n	800173a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d12b      	bne.n	80017a0 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800174c:	2b00      	cmp	r3, #0
 800174e:	d127      	bne.n	80017a0 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001756:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800175a:	2b00      	cmp	r3, #0
 800175c:	d006      	beq.n	800176c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001768:	2b00      	cmp	r3, #0
 800176a:	d119      	bne.n	80017a0 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 0220 	bic.w	r2, r2, #32
 800177a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d105      	bne.n	80017a0 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	f043 0201 	orr.w	r2, r3, #1
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 f8db 	bl	800195c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f06f 0212 	mvn.w	r2, #18
 80017ae:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	bf0c      	ite	eq
 80017be:	2301      	moveq	r3, #1
 80017c0:	2300      	movne	r3, #0
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017d0:	2b80      	cmp	r3, #128	; 0x80
 80017d2:	bf0c      	ite	eq
 80017d4:	2301      	moveq	r3, #1
 80017d6:	2300      	movne	r3, #0
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d057      	beq.n	8001892 <HAL_ADC_IRQHandler+0x1b8>
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d054      	beq.n	8001892 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	f003 0310 	and.w	r3, r3, #16
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d105      	bne.n	8001800 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d139      	bne.n	8001882 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001814:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001818:	2b00      	cmp	r3, #0
 800181a:	d006      	beq.n	800182a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001826:	2b00      	cmp	r3, #0
 8001828:	d12b      	bne.n	8001882 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001834:	2b00      	cmp	r3, #0
 8001836:	d124      	bne.n	8001882 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001842:	2b00      	cmp	r3, #0
 8001844:	d11d      	bne.n	8001882 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800184a:	2b00      	cmp	r3, #0
 800184c:	d119      	bne.n	8001882 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800185c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001872:	2b00      	cmp	r3, #0
 8001874:	d105      	bne.n	8001882 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f043 0201 	orr.w	r2, r3, #1
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 fab6 	bl	8001df4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f06f 020c 	mvn.w	r2, #12
 8001890:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b01      	cmp	r3, #1
 800189e:	bf0c      	ite	eq
 80018a0:	2301      	moveq	r3, #1
 80018a2:	2300      	movne	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b2:	2b40      	cmp	r3, #64	; 0x40
 80018b4:	bf0c      	ite	eq
 80018b6:	2301      	moveq	r3, #1
 80018b8:	2300      	movne	r3, #0
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d017      	beq.n	80018f4 <HAL_ADC_IRQHandler+0x21a>
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d014      	beq.n	80018f4 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d10d      	bne.n	80018f4 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 f843 	bl	8001970 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f06f 0201 	mvn.w	r2, #1
 80018f2:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0320 	and.w	r3, r3, #32
 80018fe:	2b20      	cmp	r3, #32
 8001900:	bf0c      	ite	eq
 8001902:	2301      	moveq	r3, #1
 8001904:	2300      	movne	r3, #0
 8001906:	b2db      	uxtb	r3, r3
 8001908:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001914:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001918:	bf0c      	ite	eq
 800191a:	2301      	moveq	r3, #1
 800191c:	2300      	movne	r3, #0
 800191e:	b2db      	uxtb	r3, r3
 8001920:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d015      	beq.n	8001954 <HAL_ADC_IRQHandler+0x27a>
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d012      	beq.n	8001954 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001932:	f043 0202 	orr.w	r2, r3, #2
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f06f 0220 	mvn.w	r2, #32
 8001942:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 f81d 	bl	8001984 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f06f 0220 	mvn.w	r2, #32
 8001952:	601a      	str	r2, [r3, #0]
  }
}
 8001954:	bf00      	nop
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d101      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x1c>
 80019b0:	2302      	movs	r3, #2
 80019b2:	e113      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x244>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b09      	cmp	r3, #9
 80019c2:	d925      	bls.n	8001a10 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68d9      	ldr	r1, [r3, #12]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	461a      	mov	r2, r3
 80019d2:	4613      	mov	r3, r2
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	3b1e      	subs	r3, #30
 80019da:	2207      	movs	r2, #7
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43da      	mvns	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	400a      	ands	r2, r1
 80019e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68d9      	ldr	r1, [r3, #12]
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	4618      	mov	r0, r3
 80019fc:	4603      	mov	r3, r0
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	4403      	add	r3, r0
 8001a02:	3b1e      	subs	r3, #30
 8001a04:	409a      	lsls	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	e022      	b.n	8001a56 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6919      	ldr	r1, [r3, #16]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4613      	mov	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4413      	add	r3, r2
 8001a24:	2207      	movs	r2, #7
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	400a      	ands	r2, r1
 8001a32:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6919      	ldr	r1, [r3, #16]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	4618      	mov	r0, r3
 8001a46:	4603      	mov	r3, r0
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	4403      	add	r3, r0
 8001a4c:	409a      	lsls	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b06      	cmp	r3, #6
 8001a5c:	d824      	bhi.n	8001aa8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3b05      	subs	r3, #5
 8001a70:	221f      	movs	r2, #31
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43da      	mvns	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	400a      	ands	r2, r1
 8001a7e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	3b05      	subs	r3, #5
 8001a9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	635a      	str	r2, [r3, #52]	; 0x34
 8001aa6:	e04c      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b0c      	cmp	r3, #12
 8001aae:	d824      	bhi.n	8001afa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	3b23      	subs	r3, #35	; 0x23
 8001ac2:	221f      	movs	r2, #31
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43da      	mvns	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	400a      	ands	r2, r1
 8001ad0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	4618      	mov	r0, r3
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	3b23      	subs	r3, #35	; 0x23
 8001aec:	fa00 f203 	lsl.w	r2, r0, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	631a      	str	r2, [r3, #48]	; 0x30
 8001af8:	e023      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	3b41      	subs	r3, #65	; 0x41
 8001b0c:	221f      	movs	r2, #31
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43da      	mvns	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	400a      	ands	r2, r1
 8001b1a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	4618      	mov	r0, r3
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	3b41      	subs	r3, #65	; 0x41
 8001b36:	fa00 f203 	lsl.w	r2, r0, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b42:	4b29      	ldr	r3, [pc, #164]	; (8001be8 <HAL_ADC_ConfigChannel+0x250>)
 8001b44:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a28      	ldr	r2, [pc, #160]	; (8001bec <HAL_ADC_ConfigChannel+0x254>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d10f      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x1d8>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b12      	cmp	r3, #18
 8001b56:	d10b      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a1d      	ldr	r2, [pc, #116]	; (8001bec <HAL_ADC_ConfigChannel+0x254>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d12b      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x23a>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a1c      	ldr	r2, [pc, #112]	; (8001bf0 <HAL_ADC_ConfigChannel+0x258>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d003      	beq.n	8001b8c <HAL_ADC_ConfigChannel+0x1f4>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b11      	cmp	r3, #17
 8001b8a:	d122      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a11      	ldr	r2, [pc, #68]	; (8001bf0 <HAL_ADC_ConfigChannel+0x258>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d111      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bae:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <HAL_ADC_ConfigChannel+0x25c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a11      	ldr	r2, [pc, #68]	; (8001bf8 <HAL_ADC_ConfigChannel+0x260>)
 8001bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb8:	0c9a      	lsrs	r2, r3, #18
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bc4:	e002      	b.n	8001bcc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f9      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	40012300 	.word	0x40012300
 8001bec:	40012000 	.word	0x40012000
 8001bf0:	10000012 	.word	0x10000012
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	431bde83 	.word	0x431bde83

08001bfc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c04:	4b79      	ldr	r3, [pc, #484]	; (8001dec <ADC_Init+0x1f0>)
 8001c06:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6859      	ldr	r1, [r3, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	021a      	lsls	r2, r3, #8
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6859      	ldr	r1, [r3, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6899      	ldr	r1, [r3, #8]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8e:	4a58      	ldr	r2, [pc, #352]	; (8001df0 <ADC_Init+0x1f4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d022      	beq.n	8001cda <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ca2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6899      	ldr	r1, [r3, #8]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6899      	ldr	r1, [r3, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	e00f      	b.n	8001cfa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ce8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cf8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0202 	bic.w	r2, r2, #2
 8001d08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6899      	ldr	r1, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	7e1b      	ldrb	r3, [r3, #24]
 8001d14:	005a      	lsls	r2, r3, #1
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d01b      	beq.n	8001d60 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d36:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6859      	ldr	r1, [r3, #4]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	3b01      	subs	r3, #1
 8001d54:	035a      	lsls	r2, r3, #13
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	e007      	b.n	8001d70 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d6e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	051a      	lsls	r2, r3, #20
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001da4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6899      	ldr	r1, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001db2:	025a      	lsls	r2, r3, #9
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6899      	ldr	r1, [r3, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	029a      	lsls	r2, r3, #10
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	609a      	str	r2, [r3, #8]
}
 8001de0:	bf00      	nop
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	40012300 	.word	0x40012300
 8001df0:	0f000001 	.word	0x0f000001

08001df4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e0ed      	b.n	8001ff6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d102      	bne.n	8001e2c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff f984 	bl	8001134 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e3c:	f7ff fbda 	bl	80015f4 <HAL_GetTick>
 8001e40:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e42:	e012      	b.n	8001e6a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e44:	f7ff fbd6 	bl	80015f4 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b0a      	cmp	r3, #10
 8001e50:	d90b      	bls.n	8001e6a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2205      	movs	r2, #5
 8001e62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e0c5      	b.n	8001ff6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0e5      	beq.n	8001e44 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 0202 	bic.w	r2, r2, #2
 8001e86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e88:	f7ff fbb4 	bl	80015f4 <HAL_GetTick>
 8001e8c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e8e:	e012      	b.n	8001eb6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e90:	f7ff fbb0 	bl	80015f4 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b0a      	cmp	r3, #10
 8001e9c:	d90b      	bls.n	8001eb6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2205      	movs	r2, #5
 8001eae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e09f      	b.n	8001ff6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1e5      	bne.n	8001e90 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	7e1b      	ldrb	r3, [r3, #24]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d108      	bne.n	8001ede <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	e007      	b.n	8001eee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	7e5b      	ldrb	r3, [r3, #25]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d108      	bne.n	8001f08 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	e007      	b.n	8001f18 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f16:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	7e9b      	ldrb	r3, [r3, #26]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d108      	bne.n	8001f32 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0220 	orr.w	r2, r2, #32
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	e007      	b.n	8001f42 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0220 	bic.w	r2, r2, #32
 8001f40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	7edb      	ldrb	r3, [r3, #27]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d108      	bne.n	8001f5c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0210 	bic.w	r2, r2, #16
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	e007      	b.n	8001f6c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0210 	orr.w	r2, r2, #16
 8001f6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	7f1b      	ldrb	r3, [r3, #28]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d108      	bne.n	8001f86 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0208 	orr.w	r2, r2, #8
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	e007      	b.n	8001f96 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0208 	bic.w	r2, r2, #8
 8001f94:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	7f5b      	ldrb	r3, [r3, #29]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d108      	bne.n	8001fb0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f042 0204 	orr.w	r2, r2, #4
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	e007      	b.n	8001fc0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0204 	bic.w	r2, r2, #4
 8001fbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	ea42 0103 	orr.w	r1, r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	1e5a      	subs	r2, r3, #1
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002000:	b480      	push	{r7}
 8002002:	b087      	sub	sp, #28
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002016:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002018:	7cfb      	ldrb	r3, [r7, #19]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d003      	beq.n	8002026 <HAL_CAN_ConfigFilter+0x26>
 800201e:	7cfb      	ldrb	r3, [r7, #19]
 8002020:	2b02      	cmp	r3, #2
 8002022:	f040 80c7 	bne.w	80021b4 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a69      	ldr	r2, [pc, #420]	; (80021d0 <HAL_CAN_ConfigFilter+0x1d0>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d001      	beq.n	8002034 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002030:	4b68      	ldr	r3, [pc, #416]	; (80021d4 <HAL_CAN_ConfigFilter+0x1d4>)
 8002032:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800203a:	f043 0201 	orr.w	r2, r3, #1
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	4a63      	ldr	r2, [pc, #396]	; (80021d4 <HAL_CAN_ConfigFilter+0x1d4>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d111      	bne.n	8002070 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002052:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002066:	021b      	lsls	r3, r3, #8
 8002068:	431a      	orrs	r2, r3
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	f003 031f 	and.w	r3, r3, #31
 8002078:	2201      	movs	r2, #1
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	43db      	mvns	r3, r3
 800208a:	401a      	ands	r2, r3
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d123      	bne.n	80020e2 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	43db      	mvns	r3, r3
 80020a4:	401a      	ands	r2, r3
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020bc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	3248      	adds	r2, #72	; 0x48
 80020c2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020d6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020d8:	6979      	ldr	r1, [r7, #20]
 80020da:	3348      	adds	r3, #72	; 0x48
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	440b      	add	r3, r1
 80020e0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d122      	bne.n	8002130 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	431a      	orrs	r2, r3
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800210a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	3248      	adds	r2, #72	; 0x48
 8002110:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002124:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002126:	6979      	ldr	r1, [r7, #20]
 8002128:	3348      	adds	r3, #72	; 0x48
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	440b      	add	r3, r1
 800212e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d109      	bne.n	800214c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	43db      	mvns	r3, r3
 8002142:	401a      	ands	r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800214a:	e007      	b.n	800215c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	431a      	orrs	r2, r3
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d109      	bne.n	8002178 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	43db      	mvns	r3, r3
 800216e:	401a      	ands	r2, r3
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002176:	e007      	b.n	8002188 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	431a      	orrs	r2, r3
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d107      	bne.n	80021a0 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	431a      	orrs	r2, r3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021a6:	f023 0201 	bic.w	r2, r3, #1
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	e006      	b.n	80021c2 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
  }
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	371c      	adds	r7, #28
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40006c00 	.word	0x40006c00
 80021d4:	40006400 	.word	0x40006400

080021d8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d12e      	bne.n	800224a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2202      	movs	r2, #2
 80021f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0201 	bic.w	r2, r2, #1
 8002202:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002204:	f7ff f9f6 	bl	80015f4 <HAL_GetTick>
 8002208:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800220a:	e012      	b.n	8002232 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800220c:	f7ff f9f2 	bl	80015f4 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b0a      	cmp	r3, #10
 8002218:	d90b      	bls.n	8002232 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2205      	movs	r2, #5
 800222a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e012      	b.n	8002258 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1e5      	bne.n	800220c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002246:	2300      	movs	r3, #0
 8002248:	e006      	b.n	8002258 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
  }
}
 8002258:	4618      	mov	r0, r3
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002260:	b480      	push	{r7}
 8002262:	b089      	sub	sp, #36	; 0x24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
 800226c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002274:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800227e:	7ffb      	ldrb	r3, [r7, #31]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d003      	beq.n	800228c <HAL_CAN_AddTxMessage+0x2c>
 8002284:	7ffb      	ldrb	r3, [r7, #31]
 8002286:	2b02      	cmp	r3, #2
 8002288:	f040 80b8 	bne.w	80023fc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10a      	bne.n	80022ac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800229c:	2b00      	cmp	r3, #0
 800229e:	d105      	bne.n	80022ac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 80a0 	beq.w	80023ec <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	0e1b      	lsrs	r3, r3, #24
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d907      	bls.n	80022cc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e09e      	b.n	800240a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80022cc:	2201      	movs	r2, #1
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	409a      	lsls	r2, r3
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10d      	bne.n	80022fa <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80022e8:	68f9      	ldr	r1, [r7, #12]
 80022ea:	6809      	ldr	r1, [r1, #0]
 80022ec:	431a      	orrs	r2, r3
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	3318      	adds	r3, #24
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	440b      	add	r3, r1
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	e00f      	b.n	800231a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002304:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800230a:	68f9      	ldr	r1, [r7, #12]
 800230c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800230e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	3318      	adds	r3, #24
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	440b      	add	r3, r1
 8002318:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6819      	ldr	r1, [r3, #0]
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	3318      	adds	r3, #24
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	440b      	add	r3, r1
 800232a:	3304      	adds	r3, #4
 800232c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	7d1b      	ldrb	r3, [r3, #20]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d111      	bne.n	800235a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	3318      	adds	r3, #24
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	4413      	add	r3, r2
 8002342:	3304      	adds	r3, #4
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	6811      	ldr	r1, [r2, #0]
 800234a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	3318      	adds	r3, #24
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	440b      	add	r3, r1
 8002356:	3304      	adds	r3, #4
 8002358:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3307      	adds	r3, #7
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	061a      	lsls	r2, r3, #24
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3306      	adds	r3, #6
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	041b      	lsls	r3, r3, #16
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3305      	adds	r3, #5
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	021b      	lsls	r3, r3, #8
 8002374:	4313      	orrs	r3, r2
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	3204      	adds	r2, #4
 800237a:	7812      	ldrb	r2, [r2, #0]
 800237c:	4610      	mov	r0, r2
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	6811      	ldr	r1, [r2, #0]
 8002382:	ea43 0200 	orr.w	r2, r3, r0
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	440b      	add	r3, r1
 800238c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002390:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3303      	adds	r3, #3
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	061a      	lsls	r2, r3, #24
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3302      	adds	r3, #2
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	041b      	lsls	r3, r3, #16
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3301      	adds	r3, #1
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	021b      	lsls	r3, r3, #8
 80023ac:	4313      	orrs	r3, r2
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	7812      	ldrb	r2, [r2, #0]
 80023b2:	4610      	mov	r0, r2
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	6811      	ldr	r1, [r2, #0]
 80023b8:	ea43 0200 	orr.w	r2, r3, r0
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	011b      	lsls	r3, r3, #4
 80023c0:	440b      	add	r3, r1
 80023c2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80023c6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	3318      	adds	r3, #24
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	4413      	add	r3, r2
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	6811      	ldr	r1, [r2, #0]
 80023da:	f043 0201 	orr.w	r2, r3, #1
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	3318      	adds	r3, #24
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	440b      	add	r3, r1
 80023e6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	e00e      	b.n	800240a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e006      	b.n	800240a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
  }
}
 800240a:	4618      	mov	r0, r3
 800240c:	3724      	adds	r7, #36	; 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002416:	b480      	push	{r7}
 8002418:	b087      	sub	sp, #28
 800241a:	af00      	add	r7, sp, #0
 800241c:	60f8      	str	r0, [r7, #12]
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
 8002422:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f893 3020 	ldrb.w	r3, [r3, #32]
 800242a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800242c:	7dfb      	ldrb	r3, [r7, #23]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d003      	beq.n	800243a <HAL_CAN_GetRxMessage+0x24>
 8002432:	7dfb      	ldrb	r3, [r7, #23]
 8002434:	2b02      	cmp	r3, #2
 8002436:	f040 80f3 	bne.w	8002620 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10e      	bne.n	800245e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d116      	bne.n	800247c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e0e7      	b.n	800262e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d107      	bne.n	800247c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0d8      	b.n	800262e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	331b      	adds	r3, #27
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	4413      	add	r3, r2
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0204 	and.w	r2, r3, #4
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10c      	bne.n	80024b4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	331b      	adds	r3, #27
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	4413      	add	r3, r2
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	0d5b      	lsrs	r3, r3, #21
 80024aa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	e00b      	b.n	80024cc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	331b      	adds	r3, #27
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	4413      	add	r3, r2
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	08db      	lsrs	r3, r3, #3
 80024c4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	331b      	adds	r3, #27
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	4413      	add	r3, r2
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0202 	and.w	r2, r3, #2
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	331b      	adds	r3, #27
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	4413      	add	r3, r2
 80024ee:	3304      	adds	r3, #4
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 020f 	and.w	r2, r3, #15
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	331b      	adds	r3, #27
 8002502:	011b      	lsls	r3, r3, #4
 8002504:	4413      	add	r3, r2
 8002506:	3304      	adds	r3, #4
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	0a1b      	lsrs	r3, r3, #8
 800250c:	b2da      	uxtb	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	331b      	adds	r3, #27
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	4413      	add	r3, r2
 800251e:	3304      	adds	r3, #4
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	0c1b      	lsrs	r3, r3, #16
 8002524:	b29a      	uxth	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	011b      	lsls	r3, r3, #4
 8002532:	4413      	add	r3, r2
 8002534:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	b2da      	uxtb	r2, r3
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	4413      	add	r3, r2
 800254a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	0a1a      	lsrs	r2, r3, #8
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	3301      	adds	r3, #1
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	4413      	add	r3, r2
 8002564:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	0c1a      	lsrs	r2, r3, #16
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	3302      	adds	r3, #2
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	011b      	lsls	r3, r3, #4
 800257c:	4413      	add	r3, r2
 800257e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	0e1a      	lsrs	r2, r3, #24
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	3303      	adds	r3, #3
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	4413      	add	r3, r2
 8002598:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	3304      	adds	r3, #4
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	4413      	add	r3, r2
 80025b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	0a1a      	lsrs	r2, r3, #8
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	3305      	adds	r3, #5
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	4413      	add	r3, r2
 80025ca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	0c1a      	lsrs	r2, r3, #16
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	3306      	adds	r3, #6
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	011b      	lsls	r3, r3, #4
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	0e1a      	lsrs	r2, r3, #24
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	3307      	adds	r3, #7
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d108      	bne.n	800260c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f042 0220 	orr.w	r2, r2, #32
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	e007      	b.n	800261c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	691a      	ldr	r2, [r3, #16]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0220 	orr.w	r2, r2, #32
 800261a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800261c:	2300      	movs	r3, #0
 800261e:	e006      	b.n	800262e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
  }
}
 800262e:	4618      	mov	r0, r3
 8002630:	371c      	adds	r7, #28
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800263a:	b480      	push	{r7}
 800263c:	b085      	sub	sp, #20
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3020 	ldrb.w	r3, [r3, #32]
 800264a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800264c:	7bfb      	ldrb	r3, [r7, #15]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d002      	beq.n	8002658 <HAL_CAN_ActivateNotification+0x1e>
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	2b02      	cmp	r3, #2
 8002656:	d109      	bne.n	800266c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6959      	ldr	r1, [r3, #20]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002668:	2300      	movs	r3, #0
 800266a:	e006      	b.n	800267a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
  }
}
 800267a:	4618      	mov	r0, r3
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b08a      	sub	sp, #40	; 0x28
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800268e:	2300      	movs	r3, #0
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d07c      	beq.n	80027c6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d023      	beq.n	800271e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2201      	movs	r2, #1
 80026dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f983 	bl	80029f4 <HAL_CAN_TxMailbox0CompleteCallback>
 80026ee:	e016      	b.n	800271e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	f003 0304 	and.w	r3, r3, #4
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d004      	beq.n	8002704 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
 8002702:	e00c      	b.n	800271e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d004      	beq.n	8002718 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002714:	627b      	str	r3, [r7, #36]	; 0x24
 8002716:	e002      	b.n	800271e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 f989 	bl	8002a30 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002724:	2b00      	cmp	r3, #0
 8002726:	d024      	beq.n	8002772 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002730:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f963 	bl	8002a08 <HAL_CAN_TxMailbox1CompleteCallback>
 8002742:	e016      	b.n	8002772 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800274a:	2b00      	cmp	r3, #0
 800274c:	d004      	beq.n	8002758 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
 8002756:	e00c      	b.n	8002772 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800275e:	2b00      	cmp	r3, #0
 8002760:	d004      	beq.n	800276c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
 800276a:	e002      	b.n	8002772 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 f969 	bl	8002a44 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d024      	beq.n	80027c6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002784:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f943 	bl	8002a1c <HAL_CAN_TxMailbox2CompleteCallback>
 8002796:	e016      	b.n	80027c6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d004      	beq.n	80027ac <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
 80027aa:	e00c      	b.n	80027c6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d004      	beq.n	80027c0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
 80027be:	e002      	b.n	80027c6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 f949 	bl	8002a58 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00c      	beq.n	80027ea <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f003 0310 	and.w	r3, r3, #16
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d007      	beq.n	80027ea <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2210      	movs	r2, #16
 80027e8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00b      	beq.n	800280c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d006      	beq.n	800280c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2208      	movs	r2, #8
 8002804:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f93a 	bl	8002a80 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d009      	beq.n	800282a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d002      	beq.n	800282a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 f921 	bl	8002a6c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00c      	beq.n	800284e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	f003 0310 	and.w	r3, r3, #16
 800283a:	2b00      	cmp	r3, #0
 800283c:	d007      	beq.n	800284e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002844:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2210      	movs	r2, #16
 800284c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	f003 0320 	and.w	r3, r3, #32
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00b      	beq.n	8002870 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	f003 0308 	and.w	r3, r3, #8
 800285e:	2b00      	cmp	r3, #0
 8002860:	d006      	beq.n	8002870 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2208      	movs	r2, #8
 8002868:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f91c 	bl	8002aa8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002870:	6a3b      	ldr	r3, [r7, #32]
 8002872:	f003 0310 	and.w	r3, r3, #16
 8002876:	2b00      	cmp	r3, #0
 8002878:	d009      	beq.n	800288e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	2b00      	cmp	r3, #0
 8002886:	d002      	beq.n	800288e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f903 	bl	8002a94 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00b      	beq.n	80028b0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f003 0310 	and.w	r3, r3, #16
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d006      	beq.n	80028b0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2210      	movs	r2, #16
 80028a8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f906 	bl	8002abc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80028b0:	6a3b      	ldr	r3, [r7, #32]
 80028b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00b      	beq.n	80028d2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d006      	beq.n	80028d2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2208      	movs	r2, #8
 80028ca:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 f8ff 	bl	8002ad0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d07b      	beq.n	80029d4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f003 0304 	and.w	r3, r3, #4
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d072      	beq.n	80029cc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002902:	6a3b      	ldr	r3, [r7, #32]
 8002904:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002908:	2b00      	cmp	r3, #0
 800290a:	d008      	beq.n	800291e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	f043 0302 	orr.w	r3, r3, #2
 800291c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002924:	2b00      	cmp	r3, #0
 8002926:	d008      	beq.n	800293a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	f043 0304 	orr.w	r3, r3, #4
 8002938:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002940:	2b00      	cmp	r3, #0
 8002942:	d043      	beq.n	80029cc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800294a:	2b00      	cmp	r3, #0
 800294c:	d03e      	beq.n	80029cc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002954:	2b60      	cmp	r3, #96	; 0x60
 8002956:	d02b      	beq.n	80029b0 <HAL_CAN_IRQHandler+0x32a>
 8002958:	2b60      	cmp	r3, #96	; 0x60
 800295a:	d82e      	bhi.n	80029ba <HAL_CAN_IRQHandler+0x334>
 800295c:	2b50      	cmp	r3, #80	; 0x50
 800295e:	d022      	beq.n	80029a6 <HAL_CAN_IRQHandler+0x320>
 8002960:	2b50      	cmp	r3, #80	; 0x50
 8002962:	d82a      	bhi.n	80029ba <HAL_CAN_IRQHandler+0x334>
 8002964:	2b40      	cmp	r3, #64	; 0x40
 8002966:	d019      	beq.n	800299c <HAL_CAN_IRQHandler+0x316>
 8002968:	2b40      	cmp	r3, #64	; 0x40
 800296a:	d826      	bhi.n	80029ba <HAL_CAN_IRQHandler+0x334>
 800296c:	2b30      	cmp	r3, #48	; 0x30
 800296e:	d010      	beq.n	8002992 <HAL_CAN_IRQHandler+0x30c>
 8002970:	2b30      	cmp	r3, #48	; 0x30
 8002972:	d822      	bhi.n	80029ba <HAL_CAN_IRQHandler+0x334>
 8002974:	2b10      	cmp	r3, #16
 8002976:	d002      	beq.n	800297e <HAL_CAN_IRQHandler+0x2f8>
 8002978:	2b20      	cmp	r3, #32
 800297a:	d005      	beq.n	8002988 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800297c:	e01d      	b.n	80029ba <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	f043 0308 	orr.w	r3, r3, #8
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002986:	e019      	b.n	80029bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	f043 0310 	orr.w	r3, r3, #16
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002990:	e014      	b.n	80029bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	f043 0320 	orr.w	r3, r3, #32
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800299a:	e00f      	b.n	80029bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029a4:	e00a      	b.n	80029bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029ae:	e005      	b.n	80029bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80029b8:	e000      	b.n	80029bc <HAL_CAN_IRQHandler+0x336>
            break;
 80029ba:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699a      	ldr	r2, [r3, #24]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80029ca:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2204      	movs	r2, #4
 80029d2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d008      	beq.n	80029ec <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f87c 	bl	8002ae4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80029ec:	bf00      	nop
 80029ee:	3728      	adds	r7, #40	; 0x28
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b08:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <__NVIC_SetPriorityGrouping+0x44>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b14:	4013      	ands	r3, r2
 8002b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b2a:	4a04      	ldr	r2, [pc, #16]	; (8002b3c <__NVIC_SetPriorityGrouping+0x44>)
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	60d3      	str	r3, [r2, #12]
}
 8002b30:	bf00      	nop
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	e000ed00 	.word	0xe000ed00

08002b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b44:	4b04      	ldr	r3, [pc, #16]	; (8002b58 <__NVIC_GetPriorityGrouping+0x18>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	0a1b      	lsrs	r3, r3, #8
 8002b4a:	f003 0307 	and.w	r3, r3, #7
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	e000ed00 	.word	0xe000ed00

08002b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	db0b      	blt.n	8002b86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	f003 021f 	and.w	r2, r3, #31
 8002b74:	4907      	ldr	r1, [pc, #28]	; (8002b94 <__NVIC_EnableIRQ+0x38>)
 8002b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7a:	095b      	lsrs	r3, r3, #5
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	e000e100 	.word	0xe000e100

08002b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	6039      	str	r1, [r7, #0]
 8002ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	db0a      	blt.n	8002bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	490c      	ldr	r1, [pc, #48]	; (8002be4 <__NVIC_SetPriority+0x4c>)
 8002bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb6:	0112      	lsls	r2, r2, #4
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	440b      	add	r3, r1
 8002bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bc0:	e00a      	b.n	8002bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	4908      	ldr	r1, [pc, #32]	; (8002be8 <__NVIC_SetPriority+0x50>)
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	3b04      	subs	r3, #4
 8002bd0:	0112      	lsls	r2, r2, #4
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	761a      	strb	r2, [r3, #24]
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	e000e100 	.word	0xe000e100
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b089      	sub	sp, #36	; 0x24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f1c3 0307 	rsb	r3, r3, #7
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	bf28      	it	cs
 8002c0a:	2304      	movcs	r3, #4
 8002c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3304      	adds	r3, #4
 8002c12:	2b06      	cmp	r3, #6
 8002c14:	d902      	bls.n	8002c1c <NVIC_EncodePriority+0x30>
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	3b03      	subs	r3, #3
 8002c1a:	e000      	b.n	8002c1e <NVIC_EncodePriority+0x32>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43da      	mvns	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	401a      	ands	r2, r3
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3e:	43d9      	mvns	r1, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c44:	4313      	orrs	r3, r2
         );
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3724      	adds	r7, #36	; 0x24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
	...

08002c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c64:	d301      	bcc.n	8002c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c66:	2301      	movs	r3, #1
 8002c68:	e00f      	b.n	8002c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c6a:	4a0a      	ldr	r2, [pc, #40]	; (8002c94 <SysTick_Config+0x40>)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c72:	210f      	movs	r1, #15
 8002c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c78:	f7ff ff8e 	bl	8002b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c7c:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <SysTick_Config+0x40>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c82:	4b04      	ldr	r3, [pc, #16]	; (8002c94 <SysTick_Config+0x40>)
 8002c84:	2207      	movs	r2, #7
 8002c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	e000e010 	.word	0xe000e010

08002c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7ff ff29 	bl	8002af8 <__NVIC_SetPriorityGrouping>
}
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b086      	sub	sp, #24
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	607a      	str	r2, [r7, #4]
 8002cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cc0:	f7ff ff3e 	bl	8002b40 <__NVIC_GetPriorityGrouping>
 8002cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	68b9      	ldr	r1, [r7, #8]
 8002cca:	6978      	ldr	r0, [r7, #20]
 8002ccc:	f7ff ff8e 	bl	8002bec <NVIC_EncodePriority>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff ff5d 	bl	8002b98 <__NVIC_SetPriority>
}
 8002cde:	bf00      	nop
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b082      	sub	sp, #8
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	4603      	mov	r3, r0
 8002cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff ff31 	bl	8002b5c <__NVIC_EnableIRQ>
}
 8002cfa:	bf00      	nop
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b082      	sub	sp, #8
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7ff ffa2 	bl	8002c54 <SysTick_Config>
 8002d10:	4603      	mov	r3, r0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
	...

08002d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b089      	sub	sp, #36	; 0x24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d32:	2300      	movs	r3, #0
 8002d34:	61fb      	str	r3, [r7, #28]
 8002d36:	e165      	b.n	8003004 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d38:	2201      	movs	r2, #1
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	f040 8154 	bne.w	8002ffe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d005      	beq.n	8002d6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d130      	bne.n	8002dd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	2203      	movs	r2, #3
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4013      	ands	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68da      	ldr	r2, [r3, #12]
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002da4:	2201      	movs	r2, #1
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4013      	ands	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	091b      	lsrs	r3, r3, #4
 8002dba:	f003 0201 	and.w	r2, r3, #1
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 0303 	and.w	r3, r3, #3
 8002dd8:	2b03      	cmp	r3, #3
 8002dda:	d017      	beq.n	8002e0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	2203      	movs	r2, #3
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4013      	ands	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f003 0303 	and.w	r3, r3, #3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d123      	bne.n	8002e60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	08da      	lsrs	r2, r3, #3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3208      	adds	r2, #8
 8002e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	220f      	movs	r2, #15
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	08da      	lsrs	r2, r3, #3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3208      	adds	r2, #8
 8002e5a:	69b9      	ldr	r1, [r7, #24]
 8002e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f003 0203 	and.w	r2, r3, #3
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 80ae 	beq.w	8002ffe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	4b5d      	ldr	r3, [pc, #372]	; (800301c <HAL_GPIO_Init+0x300>)
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eaa:	4a5c      	ldr	r2, [pc, #368]	; (800301c <HAL_GPIO_Init+0x300>)
 8002eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002eb2:	4b5a      	ldr	r3, [pc, #360]	; (800301c <HAL_GPIO_Init+0x300>)
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ebe:	4a58      	ldr	r2, [pc, #352]	; (8003020 <HAL_GPIO_Init+0x304>)
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	089b      	lsrs	r3, r3, #2
 8002ec4:	3302      	adds	r3, #2
 8002ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	220f      	movs	r2, #15
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43db      	mvns	r3, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a4f      	ldr	r2, [pc, #316]	; (8003024 <HAL_GPIO_Init+0x308>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d025      	beq.n	8002f36 <HAL_GPIO_Init+0x21a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a4e      	ldr	r2, [pc, #312]	; (8003028 <HAL_GPIO_Init+0x30c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d01f      	beq.n	8002f32 <HAL_GPIO_Init+0x216>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a4d      	ldr	r2, [pc, #308]	; (800302c <HAL_GPIO_Init+0x310>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d019      	beq.n	8002f2e <HAL_GPIO_Init+0x212>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a4c      	ldr	r2, [pc, #304]	; (8003030 <HAL_GPIO_Init+0x314>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d013      	beq.n	8002f2a <HAL_GPIO_Init+0x20e>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a4b      	ldr	r2, [pc, #300]	; (8003034 <HAL_GPIO_Init+0x318>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00d      	beq.n	8002f26 <HAL_GPIO_Init+0x20a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a4a      	ldr	r2, [pc, #296]	; (8003038 <HAL_GPIO_Init+0x31c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d007      	beq.n	8002f22 <HAL_GPIO_Init+0x206>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a49      	ldr	r2, [pc, #292]	; (800303c <HAL_GPIO_Init+0x320>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d101      	bne.n	8002f1e <HAL_GPIO_Init+0x202>
 8002f1a:	2306      	movs	r3, #6
 8002f1c:	e00c      	b.n	8002f38 <HAL_GPIO_Init+0x21c>
 8002f1e:	2307      	movs	r3, #7
 8002f20:	e00a      	b.n	8002f38 <HAL_GPIO_Init+0x21c>
 8002f22:	2305      	movs	r3, #5
 8002f24:	e008      	b.n	8002f38 <HAL_GPIO_Init+0x21c>
 8002f26:	2304      	movs	r3, #4
 8002f28:	e006      	b.n	8002f38 <HAL_GPIO_Init+0x21c>
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e004      	b.n	8002f38 <HAL_GPIO_Init+0x21c>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e002      	b.n	8002f38 <HAL_GPIO_Init+0x21c>
 8002f32:	2301      	movs	r3, #1
 8002f34:	e000      	b.n	8002f38 <HAL_GPIO_Init+0x21c>
 8002f36:	2300      	movs	r3, #0
 8002f38:	69fa      	ldr	r2, [r7, #28]
 8002f3a:	f002 0203 	and.w	r2, r2, #3
 8002f3e:	0092      	lsls	r2, r2, #2
 8002f40:	4093      	lsls	r3, r2
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f48:	4935      	ldr	r1, [pc, #212]	; (8003020 <HAL_GPIO_Init+0x304>)
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	089b      	lsrs	r3, r3, #2
 8002f4e:	3302      	adds	r3, #2
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f56:	4b3a      	ldr	r3, [pc, #232]	; (8003040 <HAL_GPIO_Init+0x324>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4013      	ands	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f7a:	4a31      	ldr	r2, [pc, #196]	; (8003040 <HAL_GPIO_Init+0x324>)
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f80:	4b2f      	ldr	r3, [pc, #188]	; (8003040 <HAL_GPIO_Init+0x324>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fa4:	4a26      	ldr	r2, [pc, #152]	; (8003040 <HAL_GPIO_Init+0x324>)
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002faa:	4b25      	ldr	r3, [pc, #148]	; (8003040 <HAL_GPIO_Init+0x324>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fce:	4a1c      	ldr	r2, [pc, #112]	; (8003040 <HAL_GPIO_Init+0x324>)
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fd4:	4b1a      	ldr	r3, [pc, #104]	; (8003040 <HAL_GPIO_Init+0x324>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ff8:	4a11      	ldr	r2, [pc, #68]	; (8003040 <HAL_GPIO_Init+0x324>)
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	3301      	adds	r3, #1
 8003002:	61fb      	str	r3, [r7, #28]
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	2b0f      	cmp	r3, #15
 8003008:	f67f ae96 	bls.w	8002d38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800300c:	bf00      	nop
 800300e:	bf00      	nop
 8003010:	3724      	adds	r7, #36	; 0x24
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40023800 	.word	0x40023800
 8003020:	40013800 	.word	0x40013800
 8003024:	40020000 	.word	0x40020000
 8003028:	40020400 	.word	0x40020400
 800302c:	40020800 	.word	0x40020800
 8003030:	40020c00 	.word	0x40020c00
 8003034:	40021000 	.word	0x40021000
 8003038:	40021400 	.word	0x40021400
 800303c:	40021800 	.word	0x40021800
 8003040:	40013c00 	.word	0x40013c00

08003044 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	460b      	mov	r3, r1
 800304e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691a      	ldr	r2, [r3, #16]
 8003054:	887b      	ldrh	r3, [r7, #2]
 8003056:	4013      	ands	r3, r2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d002      	beq.n	8003062 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800305c:	2301      	movs	r3, #1
 800305e:	73fb      	strb	r3, [r7, #15]
 8003060:	e001      	b.n	8003066 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003062:	2300      	movs	r3, #0
 8003064:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003066:	7bfb      	ldrb	r3, [r7, #15]
}
 8003068:	4618      	mov	r0, r3
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	460b      	mov	r3, r1
 800307e:	807b      	strh	r3, [r7, #2]
 8003080:	4613      	mov	r3, r2
 8003082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003084:	787b      	ldrb	r3, [r7, #1]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800308a:	887a      	ldrh	r2, [r7, #2]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003090:	e003      	b.n	800309a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003092:	887b      	ldrh	r3, [r7, #2]
 8003094:	041a      	lsls	r2, r3, #16
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	619a      	str	r2, [r3, #24]
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
	...

080030a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	4603      	mov	r3, r0
 80030b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80030b2:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030b4:	695a      	ldr	r2, [r3, #20]
 80030b6:	88fb      	ldrh	r3, [r7, #6]
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d006      	beq.n	80030cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030be:	4a05      	ldr	r2, [pc, #20]	; (80030d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030c0:	88fb      	ldrh	r3, [r7, #6]
 80030c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030c4:	88fb      	ldrh	r3, [r7, #6]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fd ffa0 	bl	800100c <HAL_GPIO_EXTI_Callback>
  }
}
 80030cc:	bf00      	nop
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40013c00 	.word	0x40013c00

080030d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e12b      	b.n	8003342 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d106      	bne.n	8003104 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7fe f8a0 	bl	8001244 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2224      	movs	r2, #36	; 0x24
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0201 	bic.w	r2, r2, #1
 800311a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800312a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800313a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800313c:	f000 fdc0 	bl	8003cc0 <HAL_RCC_GetPCLK1Freq>
 8003140:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	4a81      	ldr	r2, [pc, #516]	; (800334c <HAL_I2C_Init+0x274>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d807      	bhi.n	800315c <HAL_I2C_Init+0x84>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4a80      	ldr	r2, [pc, #512]	; (8003350 <HAL_I2C_Init+0x278>)
 8003150:	4293      	cmp	r3, r2
 8003152:	bf94      	ite	ls
 8003154:	2301      	movls	r3, #1
 8003156:	2300      	movhi	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	e006      	b.n	800316a <HAL_I2C_Init+0x92>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4a7d      	ldr	r2, [pc, #500]	; (8003354 <HAL_I2C_Init+0x27c>)
 8003160:	4293      	cmp	r3, r2
 8003162:	bf94      	ite	ls
 8003164:	2301      	movls	r3, #1
 8003166:	2300      	movhi	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e0e7      	b.n	8003342 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	4a78      	ldr	r2, [pc, #480]	; (8003358 <HAL_I2C_Init+0x280>)
 8003176:	fba2 2303 	umull	r2, r3, r2, r3
 800317a:	0c9b      	lsrs	r3, r3, #18
 800317c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	430a      	orrs	r2, r1
 8003190:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	4a6a      	ldr	r2, [pc, #424]	; (800334c <HAL_I2C_Init+0x274>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d802      	bhi.n	80031ac <HAL_I2C_Init+0xd4>
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	3301      	adds	r3, #1
 80031aa:	e009      	b.n	80031c0 <HAL_I2C_Init+0xe8>
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031b2:	fb02 f303 	mul.w	r3, r2, r3
 80031b6:	4a69      	ldr	r2, [pc, #420]	; (800335c <HAL_I2C_Init+0x284>)
 80031b8:	fba2 2303 	umull	r2, r3, r2, r3
 80031bc:	099b      	lsrs	r3, r3, #6
 80031be:	3301      	adds	r3, #1
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	430b      	orrs	r3, r1
 80031c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	495c      	ldr	r1, [pc, #368]	; (800334c <HAL_I2C_Init+0x274>)
 80031dc:	428b      	cmp	r3, r1
 80031de:	d819      	bhi.n	8003214 <HAL_I2C_Init+0x13c>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	1e59      	subs	r1, r3, #1
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80031ee:	1c59      	adds	r1, r3, #1
 80031f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031f4:	400b      	ands	r3, r1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <HAL_I2C_Init+0x138>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	1e59      	subs	r1, r3, #1
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	fbb1 f3f3 	udiv	r3, r1, r3
 8003208:	3301      	adds	r3, #1
 800320a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800320e:	e051      	b.n	80032b4 <HAL_I2C_Init+0x1dc>
 8003210:	2304      	movs	r3, #4
 8003212:	e04f      	b.n	80032b4 <HAL_I2C_Init+0x1dc>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d111      	bne.n	8003240 <HAL_I2C_Init+0x168>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	1e58      	subs	r0, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6859      	ldr	r1, [r3, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	440b      	add	r3, r1
 800322a:	fbb0 f3f3 	udiv	r3, r0, r3
 800322e:	3301      	adds	r3, #1
 8003230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003234:	2b00      	cmp	r3, #0
 8003236:	bf0c      	ite	eq
 8003238:	2301      	moveq	r3, #1
 800323a:	2300      	movne	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	e012      	b.n	8003266 <HAL_I2C_Init+0x18e>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	1e58      	subs	r0, r3, #1
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6859      	ldr	r1, [r3, #4]
 8003248:	460b      	mov	r3, r1
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	0099      	lsls	r1, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	fbb0 f3f3 	udiv	r3, r0, r3
 8003256:	3301      	adds	r3, #1
 8003258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800325c:	2b00      	cmp	r3, #0
 800325e:	bf0c      	ite	eq
 8003260:	2301      	moveq	r3, #1
 8003262:	2300      	movne	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_I2C_Init+0x196>
 800326a:	2301      	movs	r3, #1
 800326c:	e022      	b.n	80032b4 <HAL_I2C_Init+0x1dc>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10e      	bne.n	8003294 <HAL_I2C_Init+0x1bc>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	1e58      	subs	r0, r3, #1
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6859      	ldr	r1, [r3, #4]
 800327e:	460b      	mov	r3, r1
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	440b      	add	r3, r1
 8003284:	fbb0 f3f3 	udiv	r3, r0, r3
 8003288:	3301      	adds	r3, #1
 800328a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800328e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003292:	e00f      	b.n	80032b4 <HAL_I2C_Init+0x1dc>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	1e58      	subs	r0, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6859      	ldr	r1, [r3, #4]
 800329c:	460b      	mov	r3, r1
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	0099      	lsls	r1, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032aa:	3301      	adds	r3, #1
 80032ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	6809      	ldr	r1, [r1, #0]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69da      	ldr	r2, [r3, #28]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	431a      	orrs	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6911      	ldr	r1, [r2, #16]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	68d2      	ldr	r2, [r2, #12]
 80032ee:	4311      	orrs	r1, r2
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6812      	ldr	r2, [r2, #0]
 80032f4:	430b      	orrs	r3, r1
 80032f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695a      	ldr	r2, [r3, #20]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0201 	orr.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2220      	movs	r2, #32
 800332e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	000186a0 	.word	0x000186a0
 8003350:	001e847f 	.word	0x001e847f
 8003354:	003d08ff 	.word	0x003d08ff
 8003358:	431bde83 	.word	0x431bde83
 800335c:	10624dd3 	.word	0x10624dd3

08003360 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b088      	sub	sp, #32
 8003364:	af02      	add	r7, sp, #8
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	607a      	str	r2, [r7, #4]
 800336a:	461a      	mov	r2, r3
 800336c:	460b      	mov	r3, r1
 800336e:	817b      	strh	r3, [r7, #10]
 8003370:	4613      	mov	r3, r2
 8003372:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003374:	f7fe f93e 	bl	80015f4 <HAL_GetTick>
 8003378:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b20      	cmp	r3, #32
 8003384:	f040 80e0 	bne.w	8003548 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	2319      	movs	r3, #25
 800338e:	2201      	movs	r2, #1
 8003390:	4970      	ldr	r1, [pc, #448]	; (8003554 <HAL_I2C_Master_Transmit+0x1f4>)
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 f964 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800339e:	2302      	movs	r3, #2
 80033a0:	e0d3      	b.n	800354a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d101      	bne.n	80033b0 <HAL_I2C_Master_Transmit+0x50>
 80033ac:	2302      	movs	r3, #2
 80033ae:	e0cc      	b.n	800354a <HAL_I2C_Master_Transmit+0x1ea>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d007      	beq.n	80033d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f042 0201 	orr.w	r2, r2, #1
 80033d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2221      	movs	r2, #33	; 0x21
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2210      	movs	r2, #16
 80033f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	893a      	ldrh	r2, [r7, #8]
 8003406:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340c:	b29a      	uxth	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4a50      	ldr	r2, [pc, #320]	; (8003558 <HAL_I2C_Master_Transmit+0x1f8>)
 8003416:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003418:	8979      	ldrh	r1, [r7, #10]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	6a3a      	ldr	r2, [r7, #32]
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 f89c 	bl	800355c <I2C_MasterRequestWrite>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e08d      	b.n	800354a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800342e:	2300      	movs	r3, #0
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	613b      	str	r3, [r7, #16]
 8003442:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003444:	e066      	b.n	8003514 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	6a39      	ldr	r1, [r7, #32]
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 f9de 	bl	800380c <I2C_WaitOnTXEFlagUntilTimeout>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00d      	beq.n	8003472 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	2b04      	cmp	r3, #4
 800345c:	d107      	bne.n	800346e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800346c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e06b      	b.n	800354a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	781a      	ldrb	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	1c5a      	adds	r2, r3, #1
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348c:	b29b      	uxth	r3, r3
 800348e:	3b01      	subs	r3, #1
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349a:	3b01      	subs	r3, #1
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d11b      	bne.n	80034e8 <HAL_I2C_Master_Transmit+0x188>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d017      	beq.n	80034e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	781a      	ldrb	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	6a39      	ldr	r1, [r7, #32]
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 f9ce 	bl	800388e <I2C_WaitOnBTFFlagUntilTimeout>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00d      	beq.n	8003514 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d107      	bne.n	8003510 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800350e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e01a      	b.n	800354a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003518:	2b00      	cmp	r3, #0
 800351a:	d194      	bne.n	8003446 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800352a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003544:	2300      	movs	r3, #0
 8003546:	e000      	b.n	800354a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003548:	2302      	movs	r3, #2
  }
}
 800354a:	4618      	mov	r0, r3
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	00100002 	.word	0x00100002
 8003558:	ffff0000 	.word	0xffff0000

0800355c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b088      	sub	sp, #32
 8003560:	af02      	add	r7, sp, #8
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	607a      	str	r2, [r7, #4]
 8003566:	603b      	str	r3, [r7, #0]
 8003568:	460b      	mov	r3, r1
 800356a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003570:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2b08      	cmp	r3, #8
 8003576:	d006      	beq.n	8003586 <I2C_MasterRequestWrite+0x2a>
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d003      	beq.n	8003586 <I2C_MasterRequestWrite+0x2a>
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003584:	d108      	bne.n	8003598 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	e00b      	b.n	80035b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359c:	2b12      	cmp	r3, #18
 800359e:	d107      	bne.n	80035b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 f84f 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00d      	beq.n	80035e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035d6:	d103      	bne.n	80035e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e035      	b.n	8003650 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035ec:	d108      	bne.n	8003600 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035ee:	897b      	ldrh	r3, [r7, #10]
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	461a      	mov	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035fc:	611a      	str	r2, [r3, #16]
 80035fe:	e01b      	b.n	8003638 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003600:	897b      	ldrh	r3, [r7, #10]
 8003602:	11db      	asrs	r3, r3, #7
 8003604:	b2db      	uxtb	r3, r3
 8003606:	f003 0306 	and.w	r3, r3, #6
 800360a:	b2db      	uxtb	r3, r3
 800360c:	f063 030f 	orn	r3, r3, #15
 8003610:	b2da      	uxtb	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	490e      	ldr	r1, [pc, #56]	; (8003658 <I2C_MasterRequestWrite+0xfc>)
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 f875 	bl	800370e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e010      	b.n	8003650 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800362e:	897b      	ldrh	r3, [r7, #10]
 8003630:	b2da      	uxtb	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	4907      	ldr	r1, [pc, #28]	; (800365c <I2C_MasterRequestWrite+0x100>)
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 f865 	bl	800370e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	00010008 	.word	0x00010008
 800365c:	00010002 	.word	0x00010002

08003660 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	4613      	mov	r3, r2
 800366e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003670:	e025      	b.n	80036be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003678:	d021      	beq.n	80036be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800367a:	f7fd ffbb 	bl	80015f4 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d302      	bcc.n	8003690 <I2C_WaitOnFlagUntilTimeout+0x30>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d116      	bne.n	80036be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2220      	movs	r2, #32
 800369a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	f043 0220 	orr.w	r2, r3, #32
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e023      	b.n	8003706 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	0c1b      	lsrs	r3, r3, #16
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d10d      	bne.n	80036e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	43da      	mvns	r2, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	4013      	ands	r3, r2
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	bf0c      	ite	eq
 80036da:	2301      	moveq	r3, #1
 80036dc:	2300      	movne	r3, #0
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	461a      	mov	r2, r3
 80036e2:	e00c      	b.n	80036fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	43da      	mvns	r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4013      	ands	r3, r2
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	bf0c      	ite	eq
 80036f6:	2301      	moveq	r3, #1
 80036f8:	2300      	movne	r3, #0
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	461a      	mov	r2, r3
 80036fe:	79fb      	ldrb	r3, [r7, #7]
 8003700:	429a      	cmp	r2, r3
 8003702:	d0b6      	beq.n	8003672 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b084      	sub	sp, #16
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800371c:	e051      	b.n	80037c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800372c:	d123      	bne.n	8003776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800373c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003746:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2220      	movs	r2, #32
 8003752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f043 0204 	orr.w	r2, r3, #4
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e046      	b.n	8003804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800377c:	d021      	beq.n	80037c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377e:	f7fd ff39 	bl	80015f4 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	429a      	cmp	r2, r3
 800378c:	d302      	bcc.n	8003794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d116      	bne.n	80037c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2220      	movs	r2, #32
 800379e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f043 0220 	orr.w	r2, r3, #32
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e020      	b.n	8003804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	0c1b      	lsrs	r3, r3, #16
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d10c      	bne.n	80037e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	43da      	mvns	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	4013      	ands	r3, r2
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	bf14      	ite	ne
 80037de:	2301      	movne	r3, #1
 80037e0:	2300      	moveq	r3, #0
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	e00b      	b.n	80037fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	43da      	mvns	r2, r3
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	4013      	ands	r3, r2
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	bf14      	ite	ne
 80037f8:	2301      	movne	r3, #1
 80037fa:	2300      	moveq	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d18d      	bne.n	800371e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003818:	e02d      	b.n	8003876 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 f878 	bl	8003910 <I2C_IsAcknowledgeFailed>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e02d      	b.n	8003886 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003830:	d021      	beq.n	8003876 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003832:	f7fd fedf 	bl	80015f4 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	429a      	cmp	r2, r3
 8003840:	d302      	bcc.n	8003848 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d116      	bne.n	8003876 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2220      	movs	r2, #32
 8003852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	f043 0220 	orr.w	r2, r3, #32
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e007      	b.n	8003886 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003880:	2b80      	cmp	r3, #128	; 0x80
 8003882:	d1ca      	bne.n	800381a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b084      	sub	sp, #16
 8003892:	af00      	add	r7, sp, #0
 8003894:	60f8      	str	r0, [r7, #12]
 8003896:	60b9      	str	r1, [r7, #8]
 8003898:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800389a:	e02d      	b.n	80038f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 f837 	bl	8003910 <I2C_IsAcknowledgeFailed>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e02d      	b.n	8003908 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038b2:	d021      	beq.n	80038f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038b4:	f7fd fe9e 	bl	80015f4 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d302      	bcc.n	80038ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d116      	bne.n	80038f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e4:	f043 0220 	orr.w	r2, r3, #32
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e007      	b.n	8003908 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	f003 0304 	and.w	r3, r3, #4
 8003902:	2b04      	cmp	r3, #4
 8003904:	d1ca      	bne.n	800389c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003926:	d11b      	bne.n	8003960 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003930:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394c:	f043 0204 	orr.w	r2, r3, #4
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e000      	b.n	8003962 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
	...

08003970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e0cc      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003984:	4b68      	ldr	r3, [pc, #416]	; (8003b28 <HAL_RCC_ClockConfig+0x1b8>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	429a      	cmp	r2, r3
 8003990:	d90c      	bls.n	80039ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003992:	4b65      	ldr	r3, [pc, #404]	; (8003b28 <HAL_RCC_ClockConfig+0x1b8>)
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800399a:	4b63      	ldr	r3, [pc, #396]	; (8003b28 <HAL_RCC_ClockConfig+0x1b8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d001      	beq.n	80039ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e0b8      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d020      	beq.n	80039fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d005      	beq.n	80039d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039c4:	4b59      	ldr	r3, [pc, #356]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	4a58      	ldr	r2, [pc, #352]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 80039ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d005      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039dc:	4b53      	ldr	r3, [pc, #332]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	4a52      	ldr	r2, [pc, #328]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039e8:	4b50      	ldr	r3, [pc, #320]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	494d      	ldr	r1, [pc, #308]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d044      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d107      	bne.n	8003a1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0e:	4b47      	ldr	r3, [pc, #284]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d119      	bne.n	8003a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e07f      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d003      	beq.n	8003a2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a2a:	2b03      	cmp	r3, #3
 8003a2c:	d107      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a2e:	4b3f      	ldr	r3, [pc, #252]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d109      	bne.n	8003a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e06f      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a3e:	4b3b      	ldr	r3, [pc, #236]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e067      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a4e:	4b37      	ldr	r3, [pc, #220]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f023 0203 	bic.w	r2, r3, #3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	4934      	ldr	r1, [pc, #208]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a60:	f7fd fdc8 	bl	80015f4 <HAL_GetTick>
 8003a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a66:	e00a      	b.n	8003a7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a68:	f7fd fdc4 	bl	80015f4 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e04f      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7e:	4b2b      	ldr	r3, [pc, #172]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 020c 	and.w	r2, r3, #12
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d1eb      	bne.n	8003a68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a90:	4b25      	ldr	r3, [pc, #148]	; (8003b28 <HAL_RCC_ClockConfig+0x1b8>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d20c      	bcs.n	8003ab8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9e:	4b22      	ldr	r3, [pc, #136]	; (8003b28 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa6:	4b20      	ldr	r3, [pc, #128]	; (8003b28 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d001      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e032      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ac4:	4b19      	ldr	r3, [pc, #100]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	4916      	ldr	r1, [pc, #88]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d009      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ae2:	4b12      	ldr	r3, [pc, #72]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	490e      	ldr	r1, [pc, #56]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003af6:	f000 f821 	bl	8003b3c <HAL_RCC_GetSysClockFreq>
 8003afa:	4602      	mov	r2, r0
 8003afc:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <HAL_RCC_ClockConfig+0x1bc>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	091b      	lsrs	r3, r3, #4
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	490a      	ldr	r1, [pc, #40]	; (8003b30 <HAL_RCC_ClockConfig+0x1c0>)
 8003b08:	5ccb      	ldrb	r3, [r1, r3]
 8003b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b0e:	4a09      	ldr	r2, [pc, #36]	; (8003b34 <HAL_RCC_ClockConfig+0x1c4>)
 8003b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b12:	4b09      	ldr	r3, [pc, #36]	; (8003b38 <HAL_RCC_ClockConfig+0x1c8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fd fd28 	bl	800156c <HAL_InitTick>

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40023c00 	.word	0x40023c00
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	08004b78 	.word	0x08004b78
 8003b34:	20000000 	.word	0x20000000
 8003b38:	20000004 	.word	0x20000004

08003b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b3c:	b5b0      	push	{r4, r5, r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b42:	2100      	movs	r1, #0
 8003b44:	6079      	str	r1, [r7, #4]
 8003b46:	2100      	movs	r1, #0
 8003b48:	60f9      	str	r1, [r7, #12]
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003b4e:	2100      	movs	r1, #0
 8003b50:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b52:	4952      	ldr	r1, [pc, #328]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x160>)
 8003b54:	6889      	ldr	r1, [r1, #8]
 8003b56:	f001 010c 	and.w	r1, r1, #12
 8003b5a:	2908      	cmp	r1, #8
 8003b5c:	d00d      	beq.n	8003b7a <HAL_RCC_GetSysClockFreq+0x3e>
 8003b5e:	2908      	cmp	r1, #8
 8003b60:	f200 8094 	bhi.w	8003c8c <HAL_RCC_GetSysClockFreq+0x150>
 8003b64:	2900      	cmp	r1, #0
 8003b66:	d002      	beq.n	8003b6e <HAL_RCC_GetSysClockFreq+0x32>
 8003b68:	2904      	cmp	r1, #4
 8003b6a:	d003      	beq.n	8003b74 <HAL_RCC_GetSysClockFreq+0x38>
 8003b6c:	e08e      	b.n	8003c8c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b6e:	4b4c      	ldr	r3, [pc, #304]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x164>)
 8003b70:	60bb      	str	r3, [r7, #8]
       break;
 8003b72:	e08e      	b.n	8003c92 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b74:	4b4b      	ldr	r3, [pc, #300]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003b76:	60bb      	str	r3, [r7, #8]
      break;
 8003b78:	e08b      	b.n	8003c92 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b7a:	4948      	ldr	r1, [pc, #288]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x160>)
 8003b7c:	6849      	ldr	r1, [r1, #4]
 8003b7e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003b82:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b84:	4945      	ldr	r1, [pc, #276]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x160>)
 8003b86:	6849      	ldr	r1, [r1, #4]
 8003b88:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003b8c:	2900      	cmp	r1, #0
 8003b8e:	d024      	beq.n	8003bda <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b90:	4942      	ldr	r1, [pc, #264]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x160>)
 8003b92:	6849      	ldr	r1, [r1, #4]
 8003b94:	0989      	lsrs	r1, r1, #6
 8003b96:	4608      	mov	r0, r1
 8003b98:	f04f 0100 	mov.w	r1, #0
 8003b9c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003ba0:	f04f 0500 	mov.w	r5, #0
 8003ba4:	ea00 0204 	and.w	r2, r0, r4
 8003ba8:	ea01 0305 	and.w	r3, r1, r5
 8003bac:	493d      	ldr	r1, [pc, #244]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003bae:	fb01 f003 	mul.w	r0, r1, r3
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	fb01 f102 	mul.w	r1, r1, r2
 8003bb8:	1844      	adds	r4, r0, r1
 8003bba:	493a      	ldr	r1, [pc, #232]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003bbc:	fba2 0101 	umull	r0, r1, r2, r1
 8003bc0:	1863      	adds	r3, r4, r1
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	f04f 0300 	mov.w	r3, #0
 8003bcc:	f7fc fb24 	bl	8000218 <__aeabi_uldivmod>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	e04a      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bda:	4b30      	ldr	r3, [pc, #192]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x160>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	099b      	lsrs	r3, r3, #6
 8003be0:	461a      	mov	r2, r3
 8003be2:	f04f 0300 	mov.w	r3, #0
 8003be6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003bea:	f04f 0100 	mov.w	r1, #0
 8003bee:	ea02 0400 	and.w	r4, r2, r0
 8003bf2:	ea03 0501 	and.w	r5, r3, r1
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	4629      	mov	r1, r5
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	014b      	lsls	r3, r1, #5
 8003c04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c08:	0142      	lsls	r2, r0, #5
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	1b00      	subs	r0, r0, r4
 8003c10:	eb61 0105 	sbc.w	r1, r1, r5
 8003c14:	f04f 0200 	mov.w	r2, #0
 8003c18:	f04f 0300 	mov.w	r3, #0
 8003c1c:	018b      	lsls	r3, r1, #6
 8003c1e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c22:	0182      	lsls	r2, r0, #6
 8003c24:	1a12      	subs	r2, r2, r0
 8003c26:	eb63 0301 	sbc.w	r3, r3, r1
 8003c2a:	f04f 0000 	mov.w	r0, #0
 8003c2e:	f04f 0100 	mov.w	r1, #0
 8003c32:	00d9      	lsls	r1, r3, #3
 8003c34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c38:	00d0      	lsls	r0, r2, #3
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	1912      	adds	r2, r2, r4
 8003c40:	eb45 0303 	adc.w	r3, r5, r3
 8003c44:	f04f 0000 	mov.w	r0, #0
 8003c48:	f04f 0100 	mov.w	r1, #0
 8003c4c:	0299      	lsls	r1, r3, #10
 8003c4e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c52:	0290      	lsls	r0, r2, #10
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4610      	mov	r0, r2
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	f7fc fad8 	bl	8000218 <__aeabi_uldivmod>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c70:	4b0a      	ldr	r3, [pc, #40]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x160>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	0c1b      	lsrs	r3, r3, #16
 8003c76:	f003 0303 	and.w	r3, r3, #3
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c88:	60bb      	str	r3, [r7, #8]
      break;
 8003c8a:	e002      	b.n	8003c92 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c8c:	4b04      	ldr	r3, [pc, #16]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x164>)
 8003c8e:	60bb      	str	r3, [r7, #8]
      break;
 8003c90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c92:	68bb      	ldr	r3, [r7, #8]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bdb0      	pop	{r4, r5, r7, pc}
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	00f42400 	.word	0x00f42400
 8003ca4:	017d7840 	.word	0x017d7840

08003ca8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cac:	4b03      	ldr	r3, [pc, #12]	; (8003cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8003cae:	681b      	ldr	r3, [r3, #0]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	20000000 	.word	0x20000000

08003cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cc4:	f7ff fff0 	bl	8003ca8 <HAL_RCC_GetHCLKFreq>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	4b05      	ldr	r3, [pc, #20]	; (8003ce0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	0a9b      	lsrs	r3, r3, #10
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	4903      	ldr	r1, [pc, #12]	; (8003ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cd6:	5ccb      	ldrb	r3, [r1, r3]
 8003cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	08004b88 	.word	0x08004b88

08003ce8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e270      	b.n	80041dc <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d075      	beq.n	8003df2 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d06:	4ba3      	ldr	r3, [pc, #652]	; (8003f94 <HAL_RCC_OscConfig+0x2ac>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 030c 	and.w	r3, r3, #12
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d00c      	beq.n	8003d2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d12:	4ba0      	ldr	r3, [pc, #640]	; (8003f94 <HAL_RCC_OscConfig+0x2ac>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d1a:	2b08      	cmp	r3, #8
 8003d1c:	d112      	bne.n	8003d44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d1e:	4b9d      	ldr	r3, [pc, #628]	; (8003f94 <HAL_RCC_OscConfig+0x2ac>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d2a:	d10b      	bne.n	8003d44 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d2c:	4b99      	ldr	r3, [pc, #612]	; (8003f94 <HAL_RCC_OscConfig+0x2ac>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d05b      	beq.n	8003df0 <HAL_RCC_OscConfig+0x108>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d157      	bne.n	8003df0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e24b      	b.n	80041dc <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d4c:	d106      	bne.n	8003d5c <HAL_RCC_OscConfig+0x74>
 8003d4e:	4b91      	ldr	r3, [pc, #580]	; (8003f94 <HAL_RCC_OscConfig+0x2ac>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a90      	ldr	r2, [pc, #576]	; (8003f94 <HAL_RCC_OscConfig+0x2ac>)
 8003d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	e01d      	b.n	8003d98 <HAL_RCC_OscConfig+0xb0>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d64:	d10c      	bne.n	8003d80 <HAL_RCC_OscConfig+0x98>
 8003d66:	4b8b      	ldr	r3, [pc, #556]	; (8003f94 <HAL_RCC_OscConfig+0x2ac>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a8a      	ldr	r2, [pc, #552]	; (8003f94 <HAL_RCC_OscConfig+0x2ac>)
 8003d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	4b88      	ldr	r3, [pc, #544]	; (8003f94 <HAL_RCC_OscConfig+0x2ac>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a87      	ldr	r2, [pc, #540]	; (8003f94 <HAL_RCC_OscConfig+0x2ac>)
 8003d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	e00b      	b.n	8003d98 <HAL_RCC_OscConfig+0xb0>
 8003d80:	4b84      	ldr	r3, [pc, #528]	; (8003f94 <HAL_RCC_OscConfig+0x2ac>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a83      	ldr	r2, [pc, #524]	; (8003f94 <HAL_RCC_OscConfig+0x2ac>)
 8003d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d8a:	6013      	str	r3, [r2, #0]
 8003d8c:	4b81      	ldr	r3, [pc, #516]	; (8003f94 <HAL_RCC_OscConfig+0x2ac>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a80      	ldr	r2, [pc, #512]	; (8003f94 <HAL_RCC_OscConfig+0x2ac>)
 8003d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d013      	beq.n	8003dc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da0:	f7fd fc28 	bl	80015f4 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003da8:	f7fd fc24 	bl	80015f4 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b64      	cmp	r3, #100	; 0x64
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e210      	b.n	80041dc <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dba:	4b76      	ldr	r3, [pc, #472]	; (8003f94 <HAL_RCC_OscConfig+0x2ac>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0f0      	beq.n	8003da8 <HAL_RCC_OscConfig+0xc0>
 8003dc6:	e014      	b.n	8003df2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc8:	f7fd fc14 	bl	80015f4 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dd0:	f7fd fc10 	bl	80015f4 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b64      	cmp	r3, #100	; 0x64
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e1fc      	b.n	80041dc <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003de2:	4b6c      	ldr	r3, [pc, #432]	; (8003f94 <HAL_RCC_OscConfig+0x2ac>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0xe8>
 8003dee:	e000      	b.n	8003df2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d063      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003dfe:	4b65      	ldr	r3, [pc, #404]	; (8003f94 <HAL_RCC_OscConfig+0x2ac>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 030c 	and.w	r3, r3, #12
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00b      	beq.n	8003e22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e0a:	4b62      	ldr	r3, [pc, #392]	; (8003f94 <HAL_RCC_OscConfig+0x2ac>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d11c      	bne.n	8003e50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e16:	4b5f      	ldr	r3, [pc, #380]	; (8003f94 <HAL_RCC_OscConfig+0x2ac>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d116      	bne.n	8003e50 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e22:	4b5c      	ldr	r3, [pc, #368]	; (8003f94 <HAL_RCC_OscConfig+0x2ac>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <HAL_RCC_OscConfig+0x152>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d001      	beq.n	8003e3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e1d0      	b.n	80041dc <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e3a:	4b56      	ldr	r3, [pc, #344]	; (8003f94 <HAL_RCC_OscConfig+0x2ac>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	4952      	ldr	r1, [pc, #328]	; (8003f94 <HAL_RCC_OscConfig+0x2ac>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e4e:	e03a      	b.n	8003ec6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d020      	beq.n	8003e9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e58:	4b4f      	ldr	r3, [pc, #316]	; (8003f98 <HAL_RCC_OscConfig+0x2b0>)
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5e:	f7fd fbc9 	bl	80015f4 <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e64:	e008      	b.n	8003e78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e66:	f7fd fbc5 	bl	80015f4 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e1b1      	b.n	80041dc <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e78:	4b46      	ldr	r3, [pc, #280]	; (8003f94 <HAL_RCC_OscConfig+0x2ac>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0f0      	beq.n	8003e66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e84:	4b43      	ldr	r3, [pc, #268]	; (8003f94 <HAL_RCC_OscConfig+0x2ac>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	4940      	ldr	r1, [pc, #256]	; (8003f94 <HAL_RCC_OscConfig+0x2ac>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	600b      	str	r3, [r1, #0]
 8003e98:	e015      	b.n	8003ec6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e9a:	4b3f      	ldr	r3, [pc, #252]	; (8003f98 <HAL_RCC_OscConfig+0x2b0>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea0:	f7fd fba8 	bl	80015f4 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ea8:	f7fd fba4 	bl	80015f4 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e190      	b.n	80041dc <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eba:	4b36      	ldr	r3, [pc, #216]	; (8003f94 <HAL_RCC_OscConfig+0x2ac>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1f0      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0308 	and.w	r3, r3, #8
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d030      	beq.n	8003f34 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d016      	beq.n	8003f08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eda:	4b30      	ldr	r3, [pc, #192]	; (8003f9c <HAL_RCC_OscConfig+0x2b4>)
 8003edc:	2201      	movs	r2, #1
 8003ede:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee0:	f7fd fb88 	bl	80015f4 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ee8:	f7fd fb84 	bl	80015f4 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e170      	b.n	80041dc <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003efa:	4b26      	ldr	r3, [pc, #152]	; (8003f94 <HAL_RCC_OscConfig+0x2ac>)
 8003efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d0f0      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x200>
 8003f06:	e015      	b.n	8003f34 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f08:	4b24      	ldr	r3, [pc, #144]	; (8003f9c <HAL_RCC_OscConfig+0x2b4>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0e:	f7fd fb71 	bl	80015f4 <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f14:	e008      	b.n	8003f28 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f16:	f7fd fb6d 	bl	80015f4 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e159      	b.n	80041dc <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f28:	4b1a      	ldr	r3, [pc, #104]	; (8003f94 <HAL_RCC_OscConfig+0x2ac>)
 8003f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1f0      	bne.n	8003f16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0304 	and.w	r3, r3, #4
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 80a0 	beq.w	8004082 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f42:	2300      	movs	r3, #0
 8003f44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f46:	4b13      	ldr	r3, [pc, #76]	; (8003f94 <HAL_RCC_OscConfig+0x2ac>)
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10f      	bne.n	8003f72 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f52:	2300      	movs	r3, #0
 8003f54:	60bb      	str	r3, [r7, #8]
 8003f56:	4b0f      	ldr	r3, [pc, #60]	; (8003f94 <HAL_RCC_OscConfig+0x2ac>)
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	4a0e      	ldr	r2, [pc, #56]	; (8003f94 <HAL_RCC_OscConfig+0x2ac>)
 8003f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f60:	6413      	str	r3, [r2, #64]	; 0x40
 8003f62:	4b0c      	ldr	r3, [pc, #48]	; (8003f94 <HAL_RCC_OscConfig+0x2ac>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6a:	60bb      	str	r3, [r7, #8]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f72:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <HAL_RCC_OscConfig+0x2b8>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d121      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f7e:	4b08      	ldr	r3, [pc, #32]	; (8003fa0 <HAL_RCC_OscConfig+0x2b8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a07      	ldr	r2, [pc, #28]	; (8003fa0 <HAL_RCC_OscConfig+0x2b8>)
 8003f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f8a:	f7fd fb33 	bl	80015f4 <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f90:	e011      	b.n	8003fb6 <HAL_RCC_OscConfig+0x2ce>
 8003f92:	bf00      	nop
 8003f94:	40023800 	.word	0x40023800
 8003f98:	42470000 	.word	0x42470000
 8003f9c:	42470e80 	.word	0x42470e80
 8003fa0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa4:	f7fd fb26 	bl	80015f4 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e112      	b.n	80041dc <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb6:	4b8b      	ldr	r3, [pc, #556]	; (80041e4 <HAL_RCC_OscConfig+0x4fc>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0f0      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d106      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x2f0>
 8003fca:	4b87      	ldr	r3, [pc, #540]	; (80041e8 <HAL_RCC_OscConfig+0x500>)
 8003fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fce:	4a86      	ldr	r2, [pc, #536]	; (80041e8 <HAL_RCC_OscConfig+0x500>)
 8003fd0:	f043 0301 	orr.w	r3, r3, #1
 8003fd4:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd6:	e01c      	b.n	8004012 <HAL_RCC_OscConfig+0x32a>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	2b05      	cmp	r3, #5
 8003fde:	d10c      	bne.n	8003ffa <HAL_RCC_OscConfig+0x312>
 8003fe0:	4b81      	ldr	r3, [pc, #516]	; (80041e8 <HAL_RCC_OscConfig+0x500>)
 8003fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe4:	4a80      	ldr	r2, [pc, #512]	; (80041e8 <HAL_RCC_OscConfig+0x500>)
 8003fe6:	f043 0304 	orr.w	r3, r3, #4
 8003fea:	6713      	str	r3, [r2, #112]	; 0x70
 8003fec:	4b7e      	ldr	r3, [pc, #504]	; (80041e8 <HAL_RCC_OscConfig+0x500>)
 8003fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff0:	4a7d      	ldr	r2, [pc, #500]	; (80041e8 <HAL_RCC_OscConfig+0x500>)
 8003ff2:	f043 0301 	orr.w	r3, r3, #1
 8003ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff8:	e00b      	b.n	8004012 <HAL_RCC_OscConfig+0x32a>
 8003ffa:	4b7b      	ldr	r3, [pc, #492]	; (80041e8 <HAL_RCC_OscConfig+0x500>)
 8003ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffe:	4a7a      	ldr	r2, [pc, #488]	; (80041e8 <HAL_RCC_OscConfig+0x500>)
 8004000:	f023 0301 	bic.w	r3, r3, #1
 8004004:	6713      	str	r3, [r2, #112]	; 0x70
 8004006:	4b78      	ldr	r3, [pc, #480]	; (80041e8 <HAL_RCC_OscConfig+0x500>)
 8004008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400a:	4a77      	ldr	r2, [pc, #476]	; (80041e8 <HAL_RCC_OscConfig+0x500>)
 800400c:	f023 0304 	bic.w	r3, r3, #4
 8004010:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d015      	beq.n	8004046 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800401a:	f7fd faeb 	bl	80015f4 <HAL_GetTick>
 800401e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004020:	e00a      	b.n	8004038 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004022:	f7fd fae7 	bl	80015f4 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004030:	4293      	cmp	r3, r2
 8004032:	d901      	bls.n	8004038 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e0d1      	b.n	80041dc <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004038:	4b6b      	ldr	r3, [pc, #428]	; (80041e8 <HAL_RCC_OscConfig+0x500>)
 800403a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0ee      	beq.n	8004022 <HAL_RCC_OscConfig+0x33a>
 8004044:	e014      	b.n	8004070 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004046:	f7fd fad5 	bl	80015f4 <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800404c:	e00a      	b.n	8004064 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800404e:	f7fd fad1 	bl	80015f4 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	f241 3288 	movw	r2, #5000	; 0x1388
 800405c:	4293      	cmp	r3, r2
 800405e:	d901      	bls.n	8004064 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e0bb      	b.n	80041dc <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004064:	4b60      	ldr	r3, [pc, #384]	; (80041e8 <HAL_RCC_OscConfig+0x500>)
 8004066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1ee      	bne.n	800404e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004070:	7dfb      	ldrb	r3, [r7, #23]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d105      	bne.n	8004082 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004076:	4b5c      	ldr	r3, [pc, #368]	; (80041e8 <HAL_RCC_OscConfig+0x500>)
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	4a5b      	ldr	r2, [pc, #364]	; (80041e8 <HAL_RCC_OscConfig+0x500>)
 800407c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004080:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 80a7 	beq.w	80041da <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800408c:	4b56      	ldr	r3, [pc, #344]	; (80041e8 <HAL_RCC_OscConfig+0x500>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 030c 	and.w	r3, r3, #12
 8004094:	2b08      	cmp	r3, #8
 8004096:	d060      	beq.n	800415a <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	2b02      	cmp	r3, #2
 800409e:	d145      	bne.n	800412c <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a0:	4b52      	ldr	r3, [pc, #328]	; (80041ec <HAL_RCC_OscConfig+0x504>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a6:	f7fd faa5 	bl	80015f4 <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ac:	e008      	b.n	80040c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ae:	f7fd faa1 	bl	80015f4 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e08d      	b.n	80041dc <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c0:	4b49      	ldr	r3, [pc, #292]	; (80041e8 <HAL_RCC_OscConfig+0x500>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1f0      	bne.n	80040ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	69da      	ldr	r2, [r3, #28]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	431a      	orrs	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	019b      	lsls	r3, r3, #6
 80040dc:	431a      	orrs	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e2:	085b      	lsrs	r3, r3, #1
 80040e4:	3b01      	subs	r3, #1
 80040e6:	041b      	lsls	r3, r3, #16
 80040e8:	431a      	orrs	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ee:	061b      	lsls	r3, r3, #24
 80040f0:	431a      	orrs	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f6:	071b      	lsls	r3, r3, #28
 80040f8:	493b      	ldr	r1, [pc, #236]	; (80041e8 <HAL_RCC_OscConfig+0x500>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040fe:	4b3b      	ldr	r3, [pc, #236]	; (80041ec <HAL_RCC_OscConfig+0x504>)
 8004100:	2201      	movs	r2, #1
 8004102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7fd fa76 	bl	80015f4 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800410c:	f7fd fa72 	bl	80015f4 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e05e      	b.n	80041dc <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800411e:	4b32      	ldr	r3, [pc, #200]	; (80041e8 <HAL_RCC_OscConfig+0x500>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0f0      	beq.n	800410c <HAL_RCC_OscConfig+0x424>
 800412a:	e056      	b.n	80041da <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800412c:	4b2f      	ldr	r3, [pc, #188]	; (80041ec <HAL_RCC_OscConfig+0x504>)
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004132:	f7fd fa5f 	bl	80015f4 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800413a:	f7fd fa5b 	bl	80015f4 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e047      	b.n	80041dc <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800414c:	4b26      	ldr	r3, [pc, #152]	; (80041e8 <HAL_RCC_OscConfig+0x500>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1f0      	bne.n	800413a <HAL_RCC_OscConfig+0x452>
 8004158:	e03f      	b.n	80041da <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d101      	bne.n	8004166 <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e03a      	b.n	80041dc <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004166:	4b20      	ldr	r3, [pc, #128]	; (80041e8 <HAL_RCC_OscConfig+0x500>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d030      	beq.n	80041d6 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800417e:	429a      	cmp	r2, r3
 8004180:	d129      	bne.n	80041d6 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800418c:	429a      	cmp	r2, r3
 800418e:	d122      	bne.n	80041d6 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004196:	4013      	ands	r3, r2
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800419c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800419e:	4293      	cmp	r3, r2
 80041a0:	d119      	bne.n	80041d6 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ac:	085b      	lsrs	r3, r3, #1
 80041ae:	3b01      	subs	r3, #1
 80041b0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d10f      	bne.n	80041d6 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d107      	bne.n	80041d6 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d0:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d001      	beq.n	80041da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e000      	b.n	80041dc <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	40007000 	.word	0x40007000
 80041e8:	40023800 	.word	0x40023800
 80041ec:	42470060 	.word	0x42470060

080041f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e041      	b.n	8004286 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d106      	bne.n	800421c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7fd f8b4 	bl	8001384 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3304      	adds	r3, #4
 800422c:	4619      	mov	r1, r3
 800422e:	4610      	mov	r0, r2
 8004230:	f000 faa0 	bl	8004774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
	...

08004290 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d001      	beq.n	80042a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e04e      	b.n	8004346 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0201 	orr.w	r2, r2, #1
 80042be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a23      	ldr	r2, [pc, #140]	; (8004354 <HAL_TIM_Base_Start_IT+0xc4>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d022      	beq.n	8004310 <HAL_TIM_Base_Start_IT+0x80>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d2:	d01d      	beq.n	8004310 <HAL_TIM_Base_Start_IT+0x80>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a1f      	ldr	r2, [pc, #124]	; (8004358 <HAL_TIM_Base_Start_IT+0xc8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d018      	beq.n	8004310 <HAL_TIM_Base_Start_IT+0x80>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a1e      	ldr	r2, [pc, #120]	; (800435c <HAL_TIM_Base_Start_IT+0xcc>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d013      	beq.n	8004310 <HAL_TIM_Base_Start_IT+0x80>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a1c      	ldr	r2, [pc, #112]	; (8004360 <HAL_TIM_Base_Start_IT+0xd0>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d00e      	beq.n	8004310 <HAL_TIM_Base_Start_IT+0x80>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a1b      	ldr	r2, [pc, #108]	; (8004364 <HAL_TIM_Base_Start_IT+0xd4>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d009      	beq.n	8004310 <HAL_TIM_Base_Start_IT+0x80>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a19      	ldr	r2, [pc, #100]	; (8004368 <HAL_TIM_Base_Start_IT+0xd8>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d004      	beq.n	8004310 <HAL_TIM_Base_Start_IT+0x80>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a18      	ldr	r2, [pc, #96]	; (800436c <HAL_TIM_Base_Start_IT+0xdc>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d111      	bne.n	8004334 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2b06      	cmp	r3, #6
 8004320:	d010      	beq.n	8004344 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f042 0201 	orr.w	r2, r2, #1
 8004330:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004332:	e007      	b.n	8004344 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f042 0201 	orr.w	r2, r2, #1
 8004342:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	40010000 	.word	0x40010000
 8004358:	40000400 	.word	0x40000400
 800435c:	40000800 	.word	0x40000800
 8004360:	40000c00 	.word	0x40000c00
 8004364:	40010400 	.word	0x40010400
 8004368:	40014000 	.word	0x40014000
 800436c:	40001800 	.word	0x40001800

08004370 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b02      	cmp	r3, #2
 8004384:	d122      	bne.n	80043cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b02      	cmp	r3, #2
 8004392:	d11b      	bne.n	80043cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f06f 0202 	mvn.w	r2, #2
 800439c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f9bf 	bl	8004736 <HAL_TIM_IC_CaptureCallback>
 80043b8:	e005      	b.n	80043c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f9b1 	bl	8004722 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 f9c2 	bl	800474a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	f003 0304 	and.w	r3, r3, #4
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d122      	bne.n	8004420 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d11b      	bne.n	8004420 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f06f 0204 	mvn.w	r2, #4
 80043f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2202      	movs	r2, #2
 80043f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f995 	bl	8004736 <HAL_TIM_IC_CaptureCallback>
 800440c:	e005      	b.n	800441a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f987 	bl	8004722 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f998 	bl	800474a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	2b08      	cmp	r3, #8
 800442c:	d122      	bne.n	8004474 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b08      	cmp	r3, #8
 800443a:	d11b      	bne.n	8004474 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f06f 0208 	mvn.w	r2, #8
 8004444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2204      	movs	r2, #4
 800444a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f96b 	bl	8004736 <HAL_TIM_IC_CaptureCallback>
 8004460:	e005      	b.n	800446e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f95d 	bl	8004722 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f96e 	bl	800474a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	f003 0310 	and.w	r3, r3, #16
 800447e:	2b10      	cmp	r3, #16
 8004480:	d122      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f003 0310 	and.w	r3, r3, #16
 800448c:	2b10      	cmp	r3, #16
 800448e:	d11b      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f06f 0210 	mvn.w	r2, #16
 8004498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2208      	movs	r2, #8
 800449e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f941 	bl	8004736 <HAL_TIM_IC_CaptureCallback>
 80044b4:	e005      	b.n	80044c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f933 	bl	8004722 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f944 	bl	800474a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d10e      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d107      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f06f 0201 	mvn.w	r2, #1
 80044ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f90d 	bl	800470e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fe:	2b80      	cmp	r3, #128	; 0x80
 8004500:	d10e      	bne.n	8004520 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450c:	2b80      	cmp	r3, #128	; 0x80
 800450e:	d107      	bne.n	8004520 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 faea 	bl	8004af4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452a:	2b40      	cmp	r3, #64	; 0x40
 800452c:	d10e      	bne.n	800454c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004538:	2b40      	cmp	r3, #64	; 0x40
 800453a:	d107      	bne.n	800454c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f909 	bl	800475e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f003 0320 	and.w	r3, r3, #32
 8004556:	2b20      	cmp	r3, #32
 8004558:	d10e      	bne.n	8004578 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f003 0320 	and.w	r3, r3, #32
 8004564:	2b20      	cmp	r3, #32
 8004566:	d107      	bne.n	8004578 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f06f 0220 	mvn.w	r2, #32
 8004570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 fab4 	bl	8004ae0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004578:	bf00      	nop
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004594:	2b01      	cmp	r3, #1
 8004596:	d101      	bne.n	800459c <HAL_TIM_ConfigClockSource+0x1c>
 8004598:	2302      	movs	r3, #2
 800459a:	e0b4      	b.n	8004706 <HAL_TIM_ConfigClockSource+0x186>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2202      	movs	r2, #2
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045d4:	d03e      	beq.n	8004654 <HAL_TIM_ConfigClockSource+0xd4>
 80045d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045da:	f200 8087 	bhi.w	80046ec <HAL_TIM_ConfigClockSource+0x16c>
 80045de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e2:	f000 8086 	beq.w	80046f2 <HAL_TIM_ConfigClockSource+0x172>
 80045e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ea:	d87f      	bhi.n	80046ec <HAL_TIM_ConfigClockSource+0x16c>
 80045ec:	2b70      	cmp	r3, #112	; 0x70
 80045ee:	d01a      	beq.n	8004626 <HAL_TIM_ConfigClockSource+0xa6>
 80045f0:	2b70      	cmp	r3, #112	; 0x70
 80045f2:	d87b      	bhi.n	80046ec <HAL_TIM_ConfigClockSource+0x16c>
 80045f4:	2b60      	cmp	r3, #96	; 0x60
 80045f6:	d050      	beq.n	800469a <HAL_TIM_ConfigClockSource+0x11a>
 80045f8:	2b60      	cmp	r3, #96	; 0x60
 80045fa:	d877      	bhi.n	80046ec <HAL_TIM_ConfigClockSource+0x16c>
 80045fc:	2b50      	cmp	r3, #80	; 0x50
 80045fe:	d03c      	beq.n	800467a <HAL_TIM_ConfigClockSource+0xfa>
 8004600:	2b50      	cmp	r3, #80	; 0x50
 8004602:	d873      	bhi.n	80046ec <HAL_TIM_ConfigClockSource+0x16c>
 8004604:	2b40      	cmp	r3, #64	; 0x40
 8004606:	d058      	beq.n	80046ba <HAL_TIM_ConfigClockSource+0x13a>
 8004608:	2b40      	cmp	r3, #64	; 0x40
 800460a:	d86f      	bhi.n	80046ec <HAL_TIM_ConfigClockSource+0x16c>
 800460c:	2b30      	cmp	r3, #48	; 0x30
 800460e:	d064      	beq.n	80046da <HAL_TIM_ConfigClockSource+0x15a>
 8004610:	2b30      	cmp	r3, #48	; 0x30
 8004612:	d86b      	bhi.n	80046ec <HAL_TIM_ConfigClockSource+0x16c>
 8004614:	2b20      	cmp	r3, #32
 8004616:	d060      	beq.n	80046da <HAL_TIM_ConfigClockSource+0x15a>
 8004618:	2b20      	cmp	r3, #32
 800461a:	d867      	bhi.n	80046ec <HAL_TIM_ConfigClockSource+0x16c>
 800461c:	2b00      	cmp	r3, #0
 800461e:	d05c      	beq.n	80046da <HAL_TIM_ConfigClockSource+0x15a>
 8004620:	2b10      	cmp	r3, #16
 8004622:	d05a      	beq.n	80046da <HAL_TIM_ConfigClockSource+0x15a>
 8004624:	e062      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6818      	ldr	r0, [r3, #0]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	6899      	ldr	r1, [r3, #8]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	f000 f9b7 	bl	80049a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004648:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	609a      	str	r2, [r3, #8]
      break;
 8004652:	e04f      	b.n	80046f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6818      	ldr	r0, [r3, #0]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	6899      	ldr	r1, [r3, #8]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f000 f9a0 	bl	80049a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689a      	ldr	r2, [r3, #8]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004676:	609a      	str	r2, [r3, #8]
      break;
 8004678:	e03c      	b.n	80046f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6818      	ldr	r0, [r3, #0]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	6859      	ldr	r1, [r3, #4]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	461a      	mov	r2, r3
 8004688:	f000 f914 	bl	80048b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2150      	movs	r1, #80	; 0x50
 8004692:	4618      	mov	r0, r3
 8004694:	f000 f96d 	bl	8004972 <TIM_ITRx_SetConfig>
      break;
 8004698:	e02c      	b.n	80046f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6818      	ldr	r0, [r3, #0]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	6859      	ldr	r1, [r3, #4]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	461a      	mov	r2, r3
 80046a8:	f000 f933 	bl	8004912 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2160      	movs	r1, #96	; 0x60
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 f95d 	bl	8004972 <TIM_ITRx_SetConfig>
      break;
 80046b8:	e01c      	b.n	80046f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6818      	ldr	r0, [r3, #0]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	6859      	ldr	r1, [r3, #4]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	461a      	mov	r2, r3
 80046c8:	f000 f8f4 	bl	80048b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2140      	movs	r1, #64	; 0x40
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 f94d 	bl	8004972 <TIM_ITRx_SetConfig>
      break;
 80046d8:	e00c      	b.n	80046f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4619      	mov	r1, r3
 80046e4:	4610      	mov	r0, r2
 80046e6:	f000 f944 	bl	8004972 <TIM_ITRx_SetConfig>
      break;
 80046ea:	e003      	b.n	80046f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	73fb      	strb	r3, [r7, #15]
      break;
 80046f0:	e000      	b.n	80046f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004704:	7bfb      	ldrb	r3, [r7, #15]
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800470e:	b480      	push	{r7}
 8004710:	b083      	sub	sp, #12
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004716:	bf00      	nop
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004722:	b480      	push	{r7}
 8004724:	b083      	sub	sp, #12
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800472a:	bf00      	nop
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
	...

08004774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a40      	ldr	r2, [pc, #256]	; (8004888 <TIM_Base_SetConfig+0x114>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d013      	beq.n	80047b4 <TIM_Base_SetConfig+0x40>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004792:	d00f      	beq.n	80047b4 <TIM_Base_SetConfig+0x40>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a3d      	ldr	r2, [pc, #244]	; (800488c <TIM_Base_SetConfig+0x118>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d00b      	beq.n	80047b4 <TIM_Base_SetConfig+0x40>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a3c      	ldr	r2, [pc, #240]	; (8004890 <TIM_Base_SetConfig+0x11c>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d007      	beq.n	80047b4 <TIM_Base_SetConfig+0x40>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a3b      	ldr	r2, [pc, #236]	; (8004894 <TIM_Base_SetConfig+0x120>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d003      	beq.n	80047b4 <TIM_Base_SetConfig+0x40>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a3a      	ldr	r2, [pc, #232]	; (8004898 <TIM_Base_SetConfig+0x124>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d108      	bne.n	80047c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a2f      	ldr	r2, [pc, #188]	; (8004888 <TIM_Base_SetConfig+0x114>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d02b      	beq.n	8004826 <TIM_Base_SetConfig+0xb2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d4:	d027      	beq.n	8004826 <TIM_Base_SetConfig+0xb2>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a2c      	ldr	r2, [pc, #176]	; (800488c <TIM_Base_SetConfig+0x118>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d023      	beq.n	8004826 <TIM_Base_SetConfig+0xb2>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a2b      	ldr	r2, [pc, #172]	; (8004890 <TIM_Base_SetConfig+0x11c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d01f      	beq.n	8004826 <TIM_Base_SetConfig+0xb2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a2a      	ldr	r2, [pc, #168]	; (8004894 <TIM_Base_SetConfig+0x120>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d01b      	beq.n	8004826 <TIM_Base_SetConfig+0xb2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a29      	ldr	r2, [pc, #164]	; (8004898 <TIM_Base_SetConfig+0x124>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d017      	beq.n	8004826 <TIM_Base_SetConfig+0xb2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a28      	ldr	r2, [pc, #160]	; (800489c <TIM_Base_SetConfig+0x128>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d013      	beq.n	8004826 <TIM_Base_SetConfig+0xb2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a27      	ldr	r2, [pc, #156]	; (80048a0 <TIM_Base_SetConfig+0x12c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d00f      	beq.n	8004826 <TIM_Base_SetConfig+0xb2>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a26      	ldr	r2, [pc, #152]	; (80048a4 <TIM_Base_SetConfig+0x130>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d00b      	beq.n	8004826 <TIM_Base_SetConfig+0xb2>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a25      	ldr	r2, [pc, #148]	; (80048a8 <TIM_Base_SetConfig+0x134>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d007      	beq.n	8004826 <TIM_Base_SetConfig+0xb2>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a24      	ldr	r2, [pc, #144]	; (80048ac <TIM_Base_SetConfig+0x138>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d003      	beq.n	8004826 <TIM_Base_SetConfig+0xb2>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a23      	ldr	r2, [pc, #140]	; (80048b0 <TIM_Base_SetConfig+0x13c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d108      	bne.n	8004838 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800482c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	4313      	orrs	r3, r2
 8004836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	4313      	orrs	r3, r2
 8004844:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a0a      	ldr	r2, [pc, #40]	; (8004888 <TIM_Base_SetConfig+0x114>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d003      	beq.n	800486c <TIM_Base_SetConfig+0xf8>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a0c      	ldr	r2, [pc, #48]	; (8004898 <TIM_Base_SetConfig+0x124>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d103      	bne.n	8004874 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	691a      	ldr	r2, [r3, #16]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	615a      	str	r2, [r3, #20]
}
 800487a:	bf00      	nop
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40010000 	.word	0x40010000
 800488c:	40000400 	.word	0x40000400
 8004890:	40000800 	.word	0x40000800
 8004894:	40000c00 	.word	0x40000c00
 8004898:	40010400 	.word	0x40010400
 800489c:	40014000 	.word	0x40014000
 80048a0:	40014400 	.word	0x40014400
 80048a4:	40014800 	.word	0x40014800
 80048a8:	40001800 	.word	0x40001800
 80048ac:	40001c00 	.word	0x40001c00
 80048b0:	40002000 	.word	0x40002000

080048b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b087      	sub	sp, #28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	f023 0201 	bic.w	r2, r3, #1
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	011b      	lsls	r3, r3, #4
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f023 030a 	bic.w	r3, r3, #10
 80048f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	621a      	str	r2, [r3, #32]
}
 8004906:	bf00      	nop
 8004908:	371c      	adds	r7, #28
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004912:	b480      	push	{r7}
 8004914:	b087      	sub	sp, #28
 8004916:	af00      	add	r7, sp, #0
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	f023 0210 	bic.w	r2, r3, #16
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800493c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	031b      	lsls	r3, r3, #12
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	4313      	orrs	r3, r2
 8004946:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800494e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	011b      	lsls	r3, r3, #4
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	4313      	orrs	r3, r2
 8004958:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	621a      	str	r2, [r3, #32]
}
 8004966:	bf00      	nop
 8004968:	371c      	adds	r7, #28
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004972:	b480      	push	{r7}
 8004974:	b085      	sub	sp, #20
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
 800497a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004988:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4313      	orrs	r3, r2
 8004990:	f043 0307 	orr.w	r3, r3, #7
 8004994:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	609a      	str	r2, [r3, #8]
}
 800499c:	bf00      	nop
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b087      	sub	sp, #28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
 80049b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	021a      	lsls	r2, r3, #8
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	431a      	orrs	r2, r3
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	609a      	str	r2, [r3, #8]
}
 80049dc:	bf00      	nop
 80049de:	371c      	adds	r7, #28
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d101      	bne.n	8004a00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049fc:	2302      	movs	r3, #2
 80049fe:	e05a      	b.n	8004ab6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a21      	ldr	r2, [pc, #132]	; (8004ac4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d022      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a4c:	d01d      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a1d      	ldr	r2, [pc, #116]	; (8004ac8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d018      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a1b      	ldr	r2, [pc, #108]	; (8004acc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d013      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a1a      	ldr	r2, [pc, #104]	; (8004ad0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00e      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a18      	ldr	r2, [pc, #96]	; (8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d009      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a17      	ldr	r2, [pc, #92]	; (8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d004      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a15      	ldr	r2, [pc, #84]	; (8004adc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d10c      	bne.n	8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	40010000 	.word	0x40010000
 8004ac8:	40000400 	.word	0x40000400
 8004acc:	40000800 	.word	0x40000800
 8004ad0:	40000c00 	.word	0x40000c00
 8004ad4:	40010400 	.word	0x40010400
 8004ad8:	40014000 	.word	0x40014000
 8004adc:	40001800 	.word	0x40001800

08004ae0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <__libc_init_array>:
 8004b08:	b570      	push	{r4, r5, r6, lr}
 8004b0a:	4d0d      	ldr	r5, [pc, #52]	; (8004b40 <__libc_init_array+0x38>)
 8004b0c:	4c0d      	ldr	r4, [pc, #52]	; (8004b44 <__libc_init_array+0x3c>)
 8004b0e:	1b64      	subs	r4, r4, r5
 8004b10:	10a4      	asrs	r4, r4, #2
 8004b12:	2600      	movs	r6, #0
 8004b14:	42a6      	cmp	r6, r4
 8004b16:	d109      	bne.n	8004b2c <__libc_init_array+0x24>
 8004b18:	4d0b      	ldr	r5, [pc, #44]	; (8004b48 <__libc_init_array+0x40>)
 8004b1a:	4c0c      	ldr	r4, [pc, #48]	; (8004b4c <__libc_init_array+0x44>)
 8004b1c:	f000 f820 	bl	8004b60 <_init>
 8004b20:	1b64      	subs	r4, r4, r5
 8004b22:	10a4      	asrs	r4, r4, #2
 8004b24:	2600      	movs	r6, #0
 8004b26:	42a6      	cmp	r6, r4
 8004b28:	d105      	bne.n	8004b36 <__libc_init_array+0x2e>
 8004b2a:	bd70      	pop	{r4, r5, r6, pc}
 8004b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b30:	4798      	blx	r3
 8004b32:	3601      	adds	r6, #1
 8004b34:	e7ee      	b.n	8004b14 <__libc_init_array+0xc>
 8004b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b3a:	4798      	blx	r3
 8004b3c:	3601      	adds	r6, #1
 8004b3e:	e7f2      	b.n	8004b26 <__libc_init_array+0x1e>
 8004b40:	08004b98 	.word	0x08004b98
 8004b44:	08004b98 	.word	0x08004b98
 8004b48:	08004b98 	.word	0x08004b98
 8004b4c:	08004b9c 	.word	0x08004b9c

08004b50 <memset>:
 8004b50:	4402      	add	r2, r0
 8004b52:	4603      	mov	r3, r0
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d100      	bne.n	8004b5a <memset+0xa>
 8004b58:	4770      	bx	lr
 8004b5a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b5e:	e7f9      	b.n	8004b54 <memset+0x4>

08004b60 <_init>:
 8004b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b62:	bf00      	nop
 8004b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b66:	bc08      	pop	{r3}
 8004b68:	469e      	mov	lr, r3
 8004b6a:	4770      	bx	lr

08004b6c <_fini>:
 8004b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6e:	bf00      	nop
 8004b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b72:	bc08      	pop	{r3}
 8004b74:	469e      	mov	lr, r3
 8004b76:	4770      	bx	lr
