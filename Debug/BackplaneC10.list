
BackplaneC10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051c8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080053a0  080053a0  000153a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053c8  080053c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080053c8  080053c8  000153c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053d0  080053d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053d0  080053d0  000153d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053d4  080053d4  000153d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080053d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  2000000c  080053e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  080053e4  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015577  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024e0  00000000  00000000  000355b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  00037a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001190  00000000  00000000  00038cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000227fa  00000000  00000000  00039e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001561c  00000000  00000000  0005c662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db68a  00000000  00000000  00071c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014d308  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004edc  00000000  00000000  0014d35c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005388 	.word	0x08005388

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005388 	.word	0x08005388

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <GPIO_SendI2C>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

HAL_StatusTypeDef GPIO_SendI2C(uint8_t addr, uint8_t reg, uint8_t data)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af02      	add	r7, sp, #8
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
 800051a:	460b      	mov	r3, r1
 800051c:	71bb      	strb	r3, [r7, #6]
 800051e:	4613      	mov	r3, r2
 8000520:	717b      	strb	r3, [r7, #5]
  uint8_t buf[2];

  buf[0] = reg;
 8000522:	79bb      	ldrb	r3, [r7, #6]
 8000524:	733b      	strb	r3, [r7, #12]
  buf[1] = data;
 8000526:	797b      	ldrb	r3, [r7, #5]
 8000528:	737b      	strb	r3, [r7, #13]

  return HAL_I2C_Master_Transmit(&hi2c1, addr, buf, sizeof(buf), HAL_MAX_DELAY);
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	b299      	uxth	r1, r3
 800052e:	f107 020c 	add.w	r2, r7, #12
 8000532:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	2302      	movs	r3, #2
 800053a:	4804      	ldr	r0, [pc, #16]	; (800054c <GPIO_SendI2C+0x3c>)
 800053c:	f002 ffea 	bl	8003514 <HAL_I2C_Master_Transmit>
 8000540:	4603      	mov	r3, r0
}
 8000542:	4618      	mov	r0, r3
 8000544:	3710      	adds	r7, #16
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20000098 	.word	0x20000098

08000550 <InitGPIOs>:
	uint16_t result = (buf[0] << 8) | buf[1];
	return result;
}

void InitGPIOs()
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
  //
  // Default values for GPIO registers
  //

  // GPIO directions
  gpio0_dir0 = 0;
 8000556:	4b5e      	ldr	r3, [pc, #376]	; (80006d0 <InitGPIOs+0x180>)
 8000558:	2200      	movs	r2, #0
 800055a:	701a      	strb	r2, [r3, #0]
  gpio0_dir1 = 0b11110000;
 800055c:	4b5d      	ldr	r3, [pc, #372]	; (80006d4 <InitGPIOs+0x184>)
 800055e:	22f0      	movs	r2, #240	; 0xf0
 8000560:	701a      	strb	r2, [r3, #0]
  gpio1_dir0 = 0;
 8000562:	4b5d      	ldr	r3, [pc, #372]	; (80006d8 <InitGPIOs+0x188>)
 8000564:	2200      	movs	r2, #0
 8000566:	701a      	strb	r2, [r3, #0]
  gpio1_dir1 = 0;
 8000568:	4b5c      	ldr	r3, [pc, #368]	; (80006dc <InitGPIOs+0x18c>)
 800056a:	2200      	movs	r2, #0
 800056c:	701a      	strb	r2, [r3, #0]

  // GPIO *input* polarity
  gpio0_pol0 = 0;
 800056e:	4b5c      	ldr	r3, [pc, #368]	; (80006e0 <InitGPIOs+0x190>)
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]
  gpio0_pol1 = 0;
 8000574:	4b5b      	ldr	r3, [pc, #364]	; (80006e4 <InitGPIOs+0x194>)
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]
  gpio1_pol0 = 0;
 800057a:	4b5b      	ldr	r3, [pc, #364]	; (80006e8 <InitGPIOs+0x198>)
 800057c:	2200      	movs	r2, #0
 800057e:	701a      	strb	r2, [r3, #0]
  gpio1_pol1 = 0;
 8000580:	4b5a      	ldr	r3, [pc, #360]	; (80006ec <InitGPIOs+0x19c>)
 8000582:	2200      	movs	r2, #0
 8000584:	701a      	strb	r2, [r3, #0]

  // GPIO reset to 0
  gpio0_gp0 = gpio0_gp1 = 0;
 8000586:	4b5a      	ldr	r3, [pc, #360]	; (80006f0 <InitGPIOs+0x1a0>)
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]
 800058c:	4b58      	ldr	r3, [pc, #352]	; (80006f0 <InitGPIOs+0x1a0>)
 800058e:	781a      	ldrb	r2, [r3, #0]
 8000590:	4b58      	ldr	r3, [pc, #352]	; (80006f4 <InitGPIOs+0x1a4>)
 8000592:	701a      	strb	r2, [r3, #0]
  // Enable 3V3 and 5V have inverted enable logic (1 = disable for 5V and 3V3)
  gpio1_gp0 = gpio1_gp1 = 0b11001100;
 8000594:	4b58      	ldr	r3, [pc, #352]	; (80006f8 <InitGPIOs+0x1a8>)
 8000596:	22cc      	movs	r2, #204	; 0xcc
 8000598:	701a      	strb	r2, [r3, #0]
 800059a:	4b57      	ldr	r3, [pc, #348]	; (80006f8 <InitGPIOs+0x1a8>)
 800059c:	781a      	ldrb	r2, [r3, #0]
 800059e:	4b57      	ldr	r3, [pc, #348]	; (80006fc <InitGPIOs+0x1ac>)
 80005a0:	701a      	strb	r2, [r3, #0]
  //

  //HAL_StatusTypeDef ret;
  //uint8_t buf[12];

  uint8_t error = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	71fb      	strb	r3, [r7, #7]
  error |= GPIO_SendI2C(GPIO0_ADDR, GPIO_DIR_GP0, gpio0_dir0);
 80005a6:	4b4a      	ldr	r3, [pc, #296]	; (80006d0 <InitGPIOs+0x180>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	461a      	mov	r2, r3
 80005ac:	2106      	movs	r1, #6
 80005ae:	2042      	movs	r0, #66	; 0x42
 80005b0:	f7ff ffae 	bl	8000510 <GPIO_SendI2C>
 80005b4:	4603      	mov	r3, r0
 80005b6:	461a      	mov	r2, r3
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	4313      	orrs	r3, r2
 80005bc:	71fb      	strb	r3, [r7, #7]
  error |= GPIO_SendI2C(GPIO0_ADDR, GPIO_DIR_GP1, gpio0_dir1);
 80005be:	4b45      	ldr	r3, [pc, #276]	; (80006d4 <InitGPIOs+0x184>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	461a      	mov	r2, r3
 80005c4:	2107      	movs	r1, #7
 80005c6:	2042      	movs	r0, #66	; 0x42
 80005c8:	f7ff ffa2 	bl	8000510 <GPIO_SendI2C>
 80005cc:	4603      	mov	r3, r0
 80005ce:	461a      	mov	r2, r3
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	4313      	orrs	r3, r2
 80005d4:	71fb      	strb	r3, [r7, #7]
  error |= GPIO_SendI2C(GPIO1_ADDR, GPIO_DIR_GP0, gpio1_dir0);
 80005d6:	4b40      	ldr	r3, [pc, #256]	; (80006d8 <InitGPIOs+0x188>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	461a      	mov	r2, r3
 80005dc:	2106      	movs	r1, #6
 80005de:	2040      	movs	r0, #64	; 0x40
 80005e0:	f7ff ff96 	bl	8000510 <GPIO_SendI2C>
 80005e4:	4603      	mov	r3, r0
 80005e6:	461a      	mov	r2, r3
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	4313      	orrs	r3, r2
 80005ec:	71fb      	strb	r3, [r7, #7]
  error |= GPIO_SendI2C(GPIO1_ADDR, GPIO_DIR_GP1, gpio1_dir1);
 80005ee:	4b3b      	ldr	r3, [pc, #236]	; (80006dc <InitGPIOs+0x18c>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	461a      	mov	r2, r3
 80005f4:	2107      	movs	r1, #7
 80005f6:	2040      	movs	r0, #64	; 0x40
 80005f8:	f7ff ff8a 	bl	8000510 <GPIO_SendI2C>
 80005fc:	4603      	mov	r3, r0
 80005fe:	461a      	mov	r2, r3
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	4313      	orrs	r3, r2
 8000604:	71fb      	strb	r3, [r7, #7]

  error |= GPIO_SendI2C(GPIO0_ADDR, GPIO_POL_GP0, gpio0_pol0);
 8000606:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <InitGPIOs+0x190>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	461a      	mov	r2, r3
 800060c:	2104      	movs	r1, #4
 800060e:	2042      	movs	r0, #66	; 0x42
 8000610:	f7ff ff7e 	bl	8000510 <GPIO_SendI2C>
 8000614:	4603      	mov	r3, r0
 8000616:	461a      	mov	r2, r3
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	4313      	orrs	r3, r2
 800061c:	71fb      	strb	r3, [r7, #7]
  error |= GPIO_SendI2C(GPIO0_ADDR, GPIO_POL_GP1, gpio0_pol1);
 800061e:	4b31      	ldr	r3, [pc, #196]	; (80006e4 <InitGPIOs+0x194>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	461a      	mov	r2, r3
 8000624:	2105      	movs	r1, #5
 8000626:	2042      	movs	r0, #66	; 0x42
 8000628:	f7ff ff72 	bl	8000510 <GPIO_SendI2C>
 800062c:	4603      	mov	r3, r0
 800062e:	461a      	mov	r2, r3
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	4313      	orrs	r3, r2
 8000634:	71fb      	strb	r3, [r7, #7]
  error |= GPIO_SendI2C(GPIO1_ADDR, GPIO_POL_GP0, gpio1_pol0);
 8000636:	4b2c      	ldr	r3, [pc, #176]	; (80006e8 <InitGPIOs+0x198>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	461a      	mov	r2, r3
 800063c:	2104      	movs	r1, #4
 800063e:	2040      	movs	r0, #64	; 0x40
 8000640:	f7ff ff66 	bl	8000510 <GPIO_SendI2C>
 8000644:	4603      	mov	r3, r0
 8000646:	461a      	mov	r2, r3
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	4313      	orrs	r3, r2
 800064c:	71fb      	strb	r3, [r7, #7]
  error |= GPIO_SendI2C(GPIO1_ADDR, GPIO_POL_GP1, gpio1_pol1);
 800064e:	4b27      	ldr	r3, [pc, #156]	; (80006ec <InitGPIOs+0x19c>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	461a      	mov	r2, r3
 8000654:	2105      	movs	r1, #5
 8000656:	2040      	movs	r0, #64	; 0x40
 8000658:	f7ff ff5a 	bl	8000510 <GPIO_SendI2C>
 800065c:	4603      	mov	r3, r0
 800065e:	461a      	mov	r2, r3
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	4313      	orrs	r3, r2
 8000664:	71fb      	strb	r3, [r7, #7]

  error |= GPIO_SendI2C(GPIO0_ADDR, GPIO_GP0, gpio0_gp0);
 8000666:	4b23      	ldr	r3, [pc, #140]	; (80006f4 <InitGPIOs+0x1a4>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	461a      	mov	r2, r3
 800066c:	2100      	movs	r1, #0
 800066e:	2042      	movs	r0, #66	; 0x42
 8000670:	f7ff ff4e 	bl	8000510 <GPIO_SendI2C>
 8000674:	4603      	mov	r3, r0
 8000676:	461a      	mov	r2, r3
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	4313      	orrs	r3, r2
 800067c:	71fb      	strb	r3, [r7, #7]
  error |= GPIO_SendI2C(GPIO0_ADDR, GPIO_GP1, gpio0_gp1);
 800067e:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <InitGPIOs+0x1a0>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	2101      	movs	r1, #1
 8000686:	2042      	movs	r0, #66	; 0x42
 8000688:	f7ff ff42 	bl	8000510 <GPIO_SendI2C>
 800068c:	4603      	mov	r3, r0
 800068e:	461a      	mov	r2, r3
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	4313      	orrs	r3, r2
 8000694:	71fb      	strb	r3, [r7, #7]
  error |= GPIO_SendI2C(GPIO1_ADDR, GPIO_GP0, gpio1_gp0);
 8000696:	4b19      	ldr	r3, [pc, #100]	; (80006fc <InitGPIOs+0x1ac>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	461a      	mov	r2, r3
 800069c:	2100      	movs	r1, #0
 800069e:	2040      	movs	r0, #64	; 0x40
 80006a0:	f7ff ff36 	bl	8000510 <GPIO_SendI2C>
 80006a4:	4603      	mov	r3, r0
 80006a6:	461a      	mov	r2, r3
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	71fb      	strb	r3, [r7, #7]
  error |= GPIO_SendI2C(GPIO1_ADDR, GPIO_GP1, gpio1_gp1);
 80006ae:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <InitGPIOs+0x1a8>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	461a      	mov	r2, r3
 80006b4:	2101      	movs	r1, #1
 80006b6:	2040      	movs	r0, #64	; 0x40
 80006b8:	f7ff ff2a 	bl	8000510 <GPIO_SendI2C>
 80006bc:	4603      	mov	r3, r0
 80006be:	461a      	mov	r2, r3
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	4313      	orrs	r3, r2
 80006c4:	71fb      	strb	r3, [r7, #7]
  if (error)
  {
	  // TODO
  }

}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000259 	.word	0x20000259
 80006d4:	20000250 	.word	0x20000250
 80006d8:	200001c5 	.word	0x200001c5
 80006dc:	2000025a 	.word	0x2000025a
 80006e0:	200001c4 	.word	0x200001c4
 80006e4:	20000094 	.word	0x20000094
 80006e8:	200001c2 	.word	0x200001c2
 80006ec:	20000258 	.word	0x20000258
 80006f0:	200001c1 	.word	0x200001c1
 80006f4:	2000014d 	.word	0x2000014d
 80006f8:	200001c0 	.word	0x200001c0
 80006fc:	2000014c 	.word	0x2000014c

08000700 <DisableAllVoltages>:

void DisableAllVoltages()
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	gpio1_gp0 = 0b11001100;
 8000704:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <DisableAllVoltages+0x34>)
 8000706:	22cc      	movs	r2, #204	; 0xcc
 8000708:	701a      	strb	r2, [r3, #0]
	gpio1_gp1 = 0b11001100;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <DisableAllVoltages+0x38>)
 800070c:	22cc      	movs	r2, #204	; 0xcc
 800070e:	701a      	strb	r2, [r3, #0]
	GPIO_SendI2C(GPIO1_ADDR, GPIO_GP0, gpio1_gp0);
 8000710:	4b08      	ldr	r3, [pc, #32]	; (8000734 <DisableAllVoltages+0x34>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	461a      	mov	r2, r3
 8000716:	2100      	movs	r1, #0
 8000718:	2040      	movs	r0, #64	; 0x40
 800071a:	f7ff fef9 	bl	8000510 <GPIO_SendI2C>
	GPIO_SendI2C(GPIO1_ADDR, GPIO_GP1, gpio1_gp1);
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <DisableAllVoltages+0x38>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	461a      	mov	r2, r3
 8000724:	2101      	movs	r1, #1
 8000726:	2040      	movs	r0, #64	; 0x40
 8000728:	f7ff fef2 	bl	8000510 <GPIO_SendI2C>

	// Disable Volant 24V
	DisableVolant24V();
 800072c:	f000 f88c 	bl	8000848 <DisableVolant24V>
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	2000014c 	.word	0x2000014c
 8000738:	200001c0 	.word	0x200001c0

0800073c <EnableVoltage>:

// board = 1,2,3,4
//  0,1,2 = Board C10 1,2,3
//  3     = Board C9
void EnableVoltage(uint8_t board, uint8_t voltage)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	460a      	mov	r2, r1
 8000746:	71fb      	strb	r3, [r7, #7]
 8000748:	4613      	mov	r3, r2
 800074a:	71bb      	strb	r3, [r7, #6]
	// Special case for board C9 - 24V,15V
	if (board == BOARD_C9 && voltage == VOLTAGE_24V)
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d111      	bne.n	8000776 <EnableVoltage+0x3a>
 8000752:	79bb      	ldrb	r3, [r7, #6]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d10e      	bne.n	8000776 <EnableVoltage+0x3a>
	{
		gpio1_gp0 |= (1 << 1);
 8000758:	4b39      	ldr	r3, [pc, #228]	; (8000840 <EnableVoltage+0x104>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	b2da      	uxtb	r2, r3
 8000762:	4b37      	ldr	r3, [pc, #220]	; (8000840 <EnableVoltage+0x104>)
 8000764:	701a      	strb	r2, [r3, #0]
		GPIO_SendI2C(GPIO1_ADDR, GPIO_GP0, gpio1_gp0);
 8000766:	4b36      	ldr	r3, [pc, #216]	; (8000840 <EnableVoltage+0x104>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	2100      	movs	r1, #0
 800076e:	2040      	movs	r0, #64	; 0x40
 8000770:	f7ff fece 	bl	8000510 <GPIO_SendI2C>
		return;
 8000774:	e061      	b.n	800083a <EnableVoltage+0xfe>
	}

	unsigned value = board * 4 + voltage;
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	009a      	lsls	r2, r3, #2
 800077a:	79bb      	ldrb	r3, [r7, #6]
 800077c:	4413      	add	r3, r2
 800077e:	60fb      	str	r3, [r7, #12]
	unsigned gp = value / (unsigned)8;
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	08db      	lsrs	r3, r3, #3
 8000784:	60bb      	str	r3, [r7, #8]
	if (gp)
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d02c      	beq.n	80007e6 <EnableVoltage+0xaa>
	{
		// Inverted logic for 5V and 3V3
		if (voltage == VOLTAGE_5V || voltage == VOLTAGE_3V3)
 800078c:	79bb      	ldrb	r3, [r7, #6]
 800078e:	2b02      	cmp	r3, #2
 8000790:	d002      	beq.n	8000798 <EnableVoltage+0x5c>
 8000792:	79bb      	ldrb	r3, [r7, #6]
 8000794:	2b03      	cmp	r3, #3
 8000796:	d110      	bne.n	80007ba <EnableVoltage+0x7e>
			gpio1_gp1 &= ~(1 << (value - 8));
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	3b08      	subs	r3, #8
 800079c:	2201      	movs	r2, #1
 800079e:	fa02 f303 	lsl.w	r3, r2, r3
 80007a2:	b25b      	sxtb	r3, r3
 80007a4:	43db      	mvns	r3, r3
 80007a6:	b25a      	sxtb	r2, r3
 80007a8:	4b26      	ldr	r3, [pc, #152]	; (8000844 <EnableVoltage+0x108>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	b25b      	sxtb	r3, r3
 80007ae:	4013      	ands	r3, r2
 80007b0:	b25b      	sxtb	r3, r3
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	4b23      	ldr	r3, [pc, #140]	; (8000844 <EnableVoltage+0x108>)
 80007b6:	701a      	strb	r2, [r3, #0]
 80007b8:	e00d      	b.n	80007d6 <EnableVoltage+0x9a>
		else
			gpio1_gp1 |= (1 << (value - 8));
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	3b08      	subs	r3, #8
 80007be:	2201      	movs	r2, #1
 80007c0:	fa02 f303 	lsl.w	r3, r2, r3
 80007c4:	b25a      	sxtb	r2, r3
 80007c6:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <EnableVoltage+0x108>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	b25b      	sxtb	r3, r3
 80007cc:	4313      	orrs	r3, r2
 80007ce:	b25b      	sxtb	r3, r3
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <EnableVoltage+0x108>)
 80007d4:	701a      	strb	r2, [r3, #0]
		GPIO_SendI2C(GPIO1_ADDR, GPIO_GP1, gpio1_gp1);
 80007d6:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <EnableVoltage+0x108>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	461a      	mov	r2, r3
 80007dc:	2101      	movs	r1, #1
 80007de:	2040      	movs	r0, #64	; 0x40
 80007e0:	f7ff fe96 	bl	8000510 <GPIO_SendI2C>
 80007e4:	e029      	b.n	800083a <EnableVoltage+0xfe>
	}
	else
	{
		// Inverted logic for 5V and 3V3
		if (voltage == VOLTAGE_5V || voltage == VOLTAGE_3V3)
 80007e6:	79bb      	ldrb	r3, [r7, #6]
 80007e8:	2b02      	cmp	r3, #2
 80007ea:	d002      	beq.n	80007f2 <EnableVoltage+0xb6>
 80007ec:	79bb      	ldrb	r3, [r7, #6]
 80007ee:	2b03      	cmp	r3, #3
 80007f0:	d10f      	bne.n	8000812 <EnableVoltage+0xd6>
			gpio1_gp0 &= ~(1 << value);
 80007f2:	2201      	movs	r2, #1
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	fa02 f303 	lsl.w	r3, r2, r3
 80007fa:	b25b      	sxtb	r3, r3
 80007fc:	43db      	mvns	r3, r3
 80007fe:	b25a      	sxtb	r2, r3
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <EnableVoltage+0x104>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	b25b      	sxtb	r3, r3
 8000806:	4013      	ands	r3, r2
 8000808:	b25b      	sxtb	r3, r3
 800080a:	b2da      	uxtb	r2, r3
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <EnableVoltage+0x104>)
 800080e:	701a      	strb	r2, [r3, #0]
 8000810:	e00c      	b.n	800082c <EnableVoltage+0xf0>
		else
			gpio1_gp0 |= (1 << value);
 8000812:	2201      	movs	r2, #1
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	b25a      	sxtb	r2, r3
 800081c:	4b08      	ldr	r3, [pc, #32]	; (8000840 <EnableVoltage+0x104>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	b25b      	sxtb	r3, r3
 8000822:	4313      	orrs	r3, r2
 8000824:	b25b      	sxtb	r3, r3
 8000826:	b2da      	uxtb	r2, r3
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <EnableVoltage+0x104>)
 800082a:	701a      	strb	r2, [r3, #0]
		GPIO_SendI2C(GPIO1_ADDR, GPIO_GP0, gpio1_gp0);
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <EnableVoltage+0x104>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	2100      	movs	r1, #0
 8000834:	2040      	movs	r0, #64	; 0x40
 8000836:	f7ff fe6b 	bl	8000510 <GPIO_SendI2C>
	}
}
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	2000014c 	.word	0x2000014c
 8000844:	200001c0 	.word	0x200001c0

08000848 <DisableVolant24V>:
{
	HAL_GPIO_WritePin(Volant_Enable24V_GPIO_Port, Volant_Enable24V_Pin, 0);
}

void DisableVolant24V()
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Volant_Enable24V_GPIO_Port, Volant_Enable24V_Pin, 1);
 800084c:	2201      	movs	r2, #1
 800084e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000852:	4802      	ldr	r0, [pc, #8]	; (800085c <DisableVolant24V+0x14>)
 8000854:	f002 fce8 	bl	8003228 <HAL_GPIO_WritePin>
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40020c00 	.word	0x40020c00

08000860 <SetLed>:

void SetLed(uint8_t led, uint8_t value)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	460a      	mov	r2, r1
 800086a:	71fb      	strb	r3, [r7, #7]
 800086c:	4613      	mov	r3, r2
 800086e:	71bb      	strb	r3, [r7, #6]
	if (led >= NUM_LEDS)
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	2b06      	cmp	r3, #6
 8000874:	d827      	bhi.n	80008c6 <SetLed+0x66>
		return;

	if (value)
 8000876:	79bb      	ldrb	r3, [r7, #6]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d00d      	beq.n	8000898 <SetLed+0x38>
		gpio0_gp0 |= (1 << led);
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	2201      	movs	r2, #1
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	b25a      	sxtb	r2, r3
 8000886:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <SetLed+0x70>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	b25b      	sxtb	r3, r3
 800088c:	4313      	orrs	r3, r2
 800088e:	b25b      	sxtb	r3, r3
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <SetLed+0x70>)
 8000894:	701a      	strb	r2, [r3, #0]
 8000896:	e00e      	b.n	80008b6 <SetLed+0x56>
	else
		gpio0_gp0 &= ~(1 << led);
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	2201      	movs	r2, #1
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	b25b      	sxtb	r3, r3
 80008a2:	43db      	mvns	r3, r3
 80008a4:	b25a      	sxtb	r2, r3
 80008a6:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <SetLed+0x70>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	b25b      	sxtb	r3, r3
 80008ac:	4013      	ands	r3, r2
 80008ae:	b25b      	sxtb	r3, r3
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <SetLed+0x70>)
 80008b4:	701a      	strb	r2, [r3, #0]

	GPIO_SendI2C(GPIO0_ADDR, GPIO_GP0, gpio0_gp0);
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <SetLed+0x70>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	461a      	mov	r2, r3
 80008bc:	2100      	movs	r1, #0
 80008be:	2042      	movs	r0, #66	; 0x42
 80008c0:	f7ff fe26 	bl	8000510 <GPIO_SendI2C>
 80008c4:	e000      	b.n	80008c8 <SetLed+0x68>
		return;
 80008c6:	bf00      	nop
}
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	2000014d 	.word	0x2000014d

080008d4 <ToggleLed>:

void ToggleLed(uint8_t led)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
	if (led >= NUM_LEDS)
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	2b06      	cmp	r3, #6
 80008e2:	d819      	bhi.n	8000918 <ToggleLed+0x44>
		return;

	uint8_t value = (gpio0_gp0 & (1 << led)) >> led;
 80008e4:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <ToggleLed+0x4c>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	4619      	mov	r1, r3
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	2201      	movs	r2, #1
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	ea01 0203 	and.w	r2, r1, r3
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	fa42 f303 	asr.w	r3, r2, r3
 80008fc:	73fb      	strb	r3, [r7, #15]
	SetLed(led, !value);
 80008fe:	7bfb      	ldrb	r3, [r7, #15]
 8000900:	2b00      	cmp	r3, #0
 8000902:	bf0c      	ite	eq
 8000904:	2301      	moveq	r3, #1
 8000906:	2300      	movne	r3, #0
 8000908:	b2db      	uxtb	r3, r3
 800090a:	461a      	mov	r2, r3
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	4611      	mov	r1, r2
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff ffa5 	bl	8000860 <SetLed>
 8000916:	e000      	b.n	800091a <ToggleLed+0x46>
		return;
 8000918:	bf00      	nop
}
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	2000014d 	.word	0x2000014d

08000924 <HAL_CAN_RxFifo0MsgPendingCallback>:

// CAN Rx Callback
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &pRxHeader, rxData) != HAL_OK)
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800092e:	4a09      	ldr	r2, [pc, #36]	; (8000954 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000930:	2100      	movs	r1, #0
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f001 fe53 	bl	80025de <HAL_CAN_GetRxMessage>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		Error_Handler();
 800093e:	f000 fc27 	bl	8001190 <Error_Handler>
	}

	if (pRxHeader.StdId == 0xAA)
 8000942:	4b04      	ldr	r3, [pc, #16]	; (8000954 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2baa      	cmp	r3, #170	; 0xaa
	else if (pRxHeader.StdId == 0xBB)
	{

	}
	// etc etc ..
}
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	2000002c 	.word	0x2000002c
 8000954:	200001c8 	.word	0x200001c8

08000958 <TransmitCAN>:

HAL_StatusTypeDef TransmitCAN(uint8_t id, uint8_t* buf, uint8_t size)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	6039      	str	r1, [r7, #0]
 8000962:	71fb      	strb	r3, [r7, #7]
 8000964:	4613      	mov	r3, r2
 8000966:	71bb      	strb	r3, [r7, #6]
	// CAN_TxHeaderTypeDef msg;
	pTxHeader.StdId = id;
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <TransmitCAN+0x5c>)
 800096c:	6013      	str	r3, [r2, #0]
	pTxHeader.IDE = CAN_ID_STD;
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <TransmitCAN+0x5c>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
	pTxHeader.RTR = CAN_RTR_DATA;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <TransmitCAN+0x5c>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
	pTxHeader.DLC = size; // Number of bytes to send
 800097a:	79bb      	ldrb	r3, [r7, #6]
 800097c:	4a0d      	ldr	r2, [pc, #52]	; (80009b4 <TransmitCAN+0x5c>)
 800097e:	6113      	str	r3, [r2, #16]
	pTxHeader.TransmitGlobalTime = DISABLE;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <TransmitCAN+0x5c>)
 8000982:	2200      	movs	r2, #0
 8000984:	751a      	strb	r2, [r3, #20]

	uint32_t mb;
	HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(&hcan1, &pTxHeader, buf, &mb);
 8000986:	f107 0308 	add.w	r3, r7, #8
 800098a:	683a      	ldr	r2, [r7, #0]
 800098c:	4909      	ldr	r1, [pc, #36]	; (80009b4 <TransmitCAN+0x5c>)
 800098e:	480a      	ldr	r0, [pc, #40]	; (80009b8 <TransmitCAN+0x60>)
 8000990:	f001 fd4a 	bl	8002428 <HAL_CAN_AddTxMessage>
 8000994:	4603      	mov	r3, r0
 8000996:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK)
 8000998:	7bfb      	ldrb	r3, [r7, #15]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <TransmitCAN+0x4a>
		return ret;
 800099e:	7bfb      	ldrb	r3, [r7, #15]
 80009a0:	e003      	b.n	80009aa <TransmitCAN+0x52>

	// Update the CAN led
	ToggleLed(LED_CAN);
 80009a2:	2002      	movs	r0, #2
 80009a4:	f7ff ff96 	bl	80008d4 <ToggleLed>
	return ret;
 80009a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200000ec 	.word	0x200000ec
 80009b8:	20000228 	.word	0x20000228

080009bc <SendUART>:
	HAL_Delay(50);
	HAL_GPIO_WritePin(Speaker_GPIO_Port, Speaker_Pin, 0);
}

HAL_StatusTypeDef SendUART(uint8_t* buffer, size_t size)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
	return HAL_UART_Transmit(&huart2, buffer, size, HAL_MAX_DELAY);
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009ce:	6879      	ldr	r1, [r7, #4]
 80009d0:	4803      	ldr	r0, [pc, #12]	; (80009e0 <SendUART+0x24>)
 80009d2:	f004 f9d4 	bl	8004d7e <HAL_UART_Transmit>
 80009d6:	4603      	mov	r3, r0
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	200001e4 	.word	0x200001e4

080009e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	b089      	sub	sp, #36	; 0x24
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	// Init global variables
	timer_flag = 0;
 80009ea:	4b56      	ldr	r3, [pc, #344]	; (8000b44 <main+0x160>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]
	pb1_pressed = 0;
 80009f0:	4b55      	ldr	r3, [pc, #340]	; (8000b48 <main+0x164>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	701a      	strb	r2, [r3, #0]
	pb2_pressed = 0;
 80009f6:	4b55      	ldr	r3, [pc, #340]	; (8000b4c <main+0x168>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]

	can1_recv_flag = 0;
 80009fc:	4b54      	ldr	r3, [pc, #336]	; (8000b50 <main+0x16c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a02:	f000 fe75 	bl	80016f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a06:	f000 f8af 	bl	8000b68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0a:	f000 fadf 	bl	8000fcc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a0e:	f000 fa07 	bl	8000e20 <MX_I2C1_Init>
  MX_CAN1_Init();
 8000a12:	f000 f965 	bl	8000ce0 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000a16:	f000 f9cd 	bl	8000db4 <MX_CAN2_Init>
  MX_I2C3_Init();
 8000a1a:	f000 fa2f 	bl	8000e7c <MX_I2C3_Init>
  MX_TIM3_Init();
 8000a1e:	f000 fa5b 	bl	8000ed8 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000a22:	f000 f90b 	bl	8000c3c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000a26:	f000 faa7 	bl	8000f78 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  InitGPIOs();
 8000a2a:	f7ff fd91 	bl	8000550 <InitGPIOs>
  HAL_Delay(10);
 8000a2e:	200a      	movs	r0, #10
 8000a30:	f000 fed0 	bl	80017d4 <HAL_Delay>

  DisableAllVoltages();
 8000a34:	f7ff fe64 	bl	8000700 <DisableAllVoltages>
  HAL_Delay(10);
 8000a38:	200a      	movs	r0, #10
 8000a3a:	f000 fecb 	bl	80017d4 <HAL_Delay>

  EnableVoltage(BOARD_C10_1, VOLTAGE_5V);
  EnableVoltage(BOARD_C10_2, VOLTAGE_5V);
  EnableVoltage(BOARD_C10_3, VOLTAGE_5V);*/

  EnableVoltage(BOARD_C9, VOLTAGE_3V3);
 8000a3e:	2103      	movs	r1, #3
 8000a40:	2000      	movs	r0, #0
 8000a42:	f7ff fe7b 	bl	800073c <EnableVoltage>
  EnableVoltage(BOARD_C9, VOLTAGE_5V);
 8000a46:	2102      	movs	r1, #2
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f7ff fe77 	bl	800073c <EnableVoltage>
  EnableVoltage(BOARD_C9, VOLTAGE_24V);
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2000      	movs	r0, #0
 8000a52:	f7ff fe73 	bl	800073c <EnableVoltage>

  EnableVoltage(BOARD_C10_2, VOLTAGE_3V3);
 8000a56:	2103      	movs	r1, #3
 8000a58:	2002      	movs	r0, #2
 8000a5a:	f7ff fe6f 	bl	800073c <EnableVoltage>
  EnableVoltage(BOARD_C10_2, VOLTAGE_5V);
 8000a5e:	2102      	movs	r1, #2
 8000a60:	2002      	movs	r0, #2
 8000a62:	f7ff fe6b 	bl	800073c <EnableVoltage>
  EnableVoltage(BOARD_C10_2, VOLTAGE_24V);
 8000a66:	2100      	movs	r1, #0
 8000a68:	2002      	movs	r0, #2
 8000a6a:	f7ff fe67 	bl	800073c <EnableVoltage>

  //HAL_StatusTypeDef ret;

  while (1)
  {
	  if (timer_flag)
 8000a6e:	4b35      	ldr	r3, [pc, #212]	; (8000b44 <main+0x160>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d033      	beq.n	8000ade <main+0xfa>
	  {
		  timer_flag = 0;
 8000a76:	4b33      	ldr	r3, [pc, #204]	; (8000b44 <main+0x160>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]

		  // Blink led warning as living-led
		  ToggleLed(LED_WARN);
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f7ff ff29 	bl	80008d4 <ToggleLed>

		  // Send CAN frame
		  static uint8_t x = 0;
		  uint8_t data[4] = { 0,1,2,x++ };
 8000a82:	2300      	movs	r3, #0
 8000a84:	743b      	strb	r3, [r7, #16]
 8000a86:	2301      	movs	r3, #1
 8000a88:	747b      	strb	r3, [r7, #17]
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	74bb      	strb	r3, [r7, #18]
 8000a8e:	4b31      	ldr	r3, [pc, #196]	; (8000b54 <main+0x170>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	1c5a      	adds	r2, r3, #1
 8000a94:	b2d1      	uxtb	r1, r2
 8000a96:	4a2f      	ldr	r2, [pc, #188]	; (8000b54 <main+0x170>)
 8000a98:	7011      	strb	r1, [r2, #0]
 8000a9a:	74fb      	strb	r3, [r7, #19]
		  HAL_StatusTypeDef can_success = TransmitCAN(0xAA, data, 4);
 8000a9c:	f107 0310 	add.w	r3, r7, #16
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	20aa      	movs	r0, #170	; 0xaa
 8000aa6:	f7ff ff57 	bl	8000958 <TransmitCAN>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	77fb      	strb	r3, [r7, #31]
		  if (can_success != HAL_OK)
 8000aae:	7ffb      	ldrb	r3, [r7, #31]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d004      	beq.n	8000abe <main+0xda>
		  {
			  SetLed(LED_ERROR, 1);
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f7ff fed2 	bl	8000860 <SetLed>
 8000abc:	e003      	b.n	8000ac6 <main+0xe2>
		  }
		  else
		  {
			  SetLed(LED_ERROR, 0);
 8000abe:	2100      	movs	r1, #0
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f7ff fecd 	bl	8000860 <SetLed>
		  }

		  // Send UART Message
		  uint8_t msg[] = "Hello World!";
 8000ac6:	4b24      	ldr	r3, [pc, #144]	; (8000b58 <main+0x174>)
 8000ac8:	463c      	mov	r4, r7
 8000aca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000acc:	c407      	stmia	r4!, {r0, r1, r2}
 8000ace:	7023      	strb	r3, [r4, #0]
		  HAL_StatusTypeDef uart_success = SendUART(msg, sizeof(msg));
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	210d      	movs	r1, #13
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff ff71 	bl	80009bc <SendUART>
 8000ada:	4603      	mov	r3, r0
 8000adc:	77bb      	strb	r3, [r7, #30]
			  // ErrorHandler();
		  }
	  }

	  // Check which boards are connected
	  uint8_t hs1 = HAL_GPIO_ReadPin(HS1_GPIO_Port, HS1_Pin);  // Board C10_1
 8000ade:	2110      	movs	r1, #16
 8000ae0:	481e      	ldr	r0, [pc, #120]	; (8000b5c <main+0x178>)
 8000ae2:	f002 fb89 	bl	80031f8 <HAL_GPIO_ReadPin>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	777b      	strb	r3, [r7, #29]
	  uint8_t hs2 = HAL_GPIO_ReadPin(HS2_GPIO_Port, HS2_Pin);  // Board C10_2
 8000aea:	2120      	movs	r1, #32
 8000aec:	481b      	ldr	r0, [pc, #108]	; (8000b5c <main+0x178>)
 8000aee:	f002 fb83 	bl	80031f8 <HAL_GPIO_ReadPin>
 8000af2:	4603      	mov	r3, r0
 8000af4:	773b      	strb	r3, [r7, #28]
	  uint8_t hs3 = HAL_GPIO_ReadPin(HS3_GPIO_Port, HS3_Pin);  // Board C10_3
 8000af6:	2140      	movs	r1, #64	; 0x40
 8000af8:	4818      	ldr	r0, [pc, #96]	; (8000b5c <main+0x178>)
 8000afa:	f002 fb7d 	bl	80031f8 <HAL_GPIO_ReadPin>
 8000afe:	4603      	mov	r3, r0
 8000b00:	76fb      	strb	r3, [r7, #27]
	  uint8_t hs4 = HAL_GPIO_ReadPin(HS4_GPIO_Port, HS4_Pin);  // Board C9
 8000b02:	2180      	movs	r1, #128	; 0x80
 8000b04:	4815      	ldr	r0, [pc, #84]	; (8000b5c <main+0x178>)
 8000b06:	f002 fb77 	bl	80031f8 <HAL_GPIO_ReadPin>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	76bb      	strb	r3, [r7, #26]
	  //SetLed(LED2, hs2);
	  //SetLed(LED3, hs3);
	  //SetLed(LED4, hs4);

	  // Get Volant BTS428L2 status (low on error)
	  uint8_t volant_status = HAL_GPIO_ReadPin(Volant_Status_GPIO_Port, Volant_Status_Pin);
 8000b0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b12:	4813      	ldr	r0, [pc, #76]	; (8000b60 <main+0x17c>)
 8000b14:	f002 fb70 	bl	80031f8 <HAL_GPIO_ReadPin>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	767b      	strb	r3, [r7, #25]
	  if (volant_status == 0)
 8000b1c:	7e7b      	ldrb	r3, [r7, #25]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d101      	bne.n	8000b26 <main+0x142>
	  {
		  // Disable volant voltage
		  DisableVolant24V();
 8000b22:	f7ff fe91 	bl	8000848 <DisableVolant24V>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	  uint16_t raw_imon = HAL_ADC_GetValue(&hadc1);
	  */

	  // Check messages received on CANA bus
	  if (can1_recv_flag)
 8000b26:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <main+0x16c>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d005      	beq.n	8000b3a <main+0x156>
	  {
		  can1_recv_flag = 0;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <main+0x16c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	701a      	strb	r2, [r3, #0]

		  uint32_t id = pRxHeader.StdId;
 8000b34:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <main+0x180>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	617b      	str	r3, [r7, #20]
	  }

	  // Execute main loop every 10ms
	  HAL_Delay(10);
 8000b3a:	200a      	movs	r0, #10
 8000b3c:	f000 fe4a 	bl	80017d4 <HAL_Delay>
  {
 8000b40:	e795      	b.n	8000a6e <main+0x8a>
 8000b42:	bf00      	nop
 8000b44:	200001c6 	.word	0x200001c6
 8000b48:	200001c3 	.word	0x200001c3
 8000b4c:	20000088 	.word	0x20000088
 8000b50:	20000251 	.word	0x20000251
 8000b54:	20000028 	.word	0x20000028
 8000b58:	080053a0 	.word	0x080053a0
 8000b5c:	40020800 	.word	0x40020800
 8000b60:	40020c00 	.word	0x40020c00
 8000b64:	200001c8 	.word	0x200001c8

08000b68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b094      	sub	sp, #80	; 0x50
 8000b6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6e:	f107 031c 	add.w	r3, r7, #28
 8000b72:	2234      	movs	r2, #52	; 0x34
 8000b74:	2100      	movs	r1, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f004 fbfe 	bl	8005378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b7c:	f107 0308 	add.w	r3, r7, #8
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	4b28      	ldr	r3, [pc, #160]	; (8000c34 <SystemClock_Config+0xcc>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	4a27      	ldr	r2, [pc, #156]	; (8000c34 <SystemClock_Config+0xcc>)
 8000b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9c:	4b25      	ldr	r3, [pc, #148]	; (8000c34 <SystemClock_Config+0xcc>)
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ba8:	2300      	movs	r3, #0
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	4b22      	ldr	r3, [pc, #136]	; (8000c38 <SystemClock_Config+0xd0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a21      	ldr	r2, [pc, #132]	; (8000c38 <SystemClock_Config+0xd0>)
 8000bb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <SystemClock_Config+0xd0>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bcc:	2310      	movs	r3, #16
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bd8:	2308      	movs	r3, #8
 8000bda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000bdc:	2360      	movs	r3, #96	; 0x60
 8000bde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000be0:	2304      	movs	r3, #4
 8000be2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000be4:	2302      	movs	r3, #2
 8000be6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000be8:	2302      	movs	r3, #2
 8000bea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f003 f967 	bl	8003ec4 <HAL_RCC_OscConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000bfc:	f000 fac8 	bl	8001190 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c00:	230f      	movs	r3, #15
 8000c02:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c04:	2302      	movs	r3, #2
 8000c06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c14:	f107 0308 	add.w	r3, r7, #8
 8000c18:	2101      	movs	r1, #1
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f002 ff82 	bl	8003b24 <HAL_RCC_ClockConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c26:	f000 fab3 	bl	8001190 <Error_Handler>
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	3750      	adds	r7, #80	; 0x50
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40007000 	.word	0x40007000

08000c3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c42:	463b      	mov	r3, r7
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c4e:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <MX_ADC1_Init+0x98>)
 8000c50:	4a21      	ldr	r2, [pc, #132]	; (8000cd8 <MX_ADC1_Init+0x9c>)
 8000c52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c54:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <MX_ADC1_Init+0x98>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c5a:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <MX_ADC1_Init+0x98>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c60:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <MX_ADC1_Init+0x98>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c66:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <MX_ADC1_Init+0x98>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c6c:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <MX_ADC1_Init+0x98>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c74:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <MX_ADC1_Init+0x98>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c7a:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <MX_ADC1_Init+0x98>)
 8000c7c:	4a17      	ldr	r2, [pc, #92]	; (8000cdc <MX_ADC1_Init+0xa0>)
 8000c7e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c80:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <MX_ADC1_Init+0x98>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c86:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <MX_ADC1_Init+0x98>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c8c:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <MX_ADC1_Init+0x98>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <MX_ADC1_Init+0x98>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c9a:	480e      	ldr	r0, [pc, #56]	; (8000cd4 <MX_ADC1_Init+0x98>)
 8000c9c:	f000 fdbe 	bl	800181c <HAL_ADC_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ca6:	f000 fa73 	bl	8001190 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000caa:	2306      	movs	r3, #6
 8000cac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cb6:	463b      	mov	r3, r7
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4806      	ldr	r0, [pc, #24]	; (8000cd4 <MX_ADC1_Init+0x98>)
 8000cbc:	f000 ff50 	bl	8001b60 <HAL_ADC_ConfigChannel>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000cc6:	f000 fa63 	bl	8001190 <Error_Handler>
  /* USER CODE BEGIN ADC1_Init 2 */
  // HAL_ADC_Start_IT(&hadc1);

  /* USER CODE END ADC1_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000150 	.word	0x20000150
 8000cd8:	40012000 	.word	0x40012000
 8000cdc:	0f000001 	.word	0x0f000001

08000ce0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_Init 1 */

  // CAN Baudrate = 250kbps

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ce6:	4b31      	ldr	r3, [pc, #196]	; (8000dac <MX_CAN1_Init+0xcc>)
 8000ce8:	4a31      	ldr	r2, [pc, #196]	; (8000db0 <MX_CAN1_Init+0xd0>)
 8000cea:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8000cec:	4b2f      	ldr	r3, [pc, #188]	; (8000dac <MX_CAN1_Init+0xcc>)
 8000cee:	220c      	movs	r2, #12
 8000cf0:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000cf2:	4b2e      	ldr	r3, [pc, #184]	; (8000dac <MX_CAN1_Init+0xcc>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000cf8:	4b2c      	ldr	r3, [pc, #176]	; (8000dac <MX_CAN1_Init+0xcc>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000cfe:	4b2b      	ldr	r3, [pc, #172]	; (8000dac <MX_CAN1_Init+0xcc>)
 8000d00:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000d04:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000d06:	4b29      	ldr	r3, [pc, #164]	; (8000dac <MX_CAN1_Init+0xcc>)
 8000d08:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000d0c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000d0e:	4b27      	ldr	r3, [pc, #156]	; (8000dac <MX_CAN1_Init+0xcc>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000d14:	4b25      	ldr	r3, [pc, #148]	; (8000dac <MX_CAN1_Init+0xcc>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000d1a:	4b24      	ldr	r3, [pc, #144]	; (8000dac <MX_CAN1_Init+0xcc>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000d20:	4b22      	ldr	r3, [pc, #136]	; (8000dac <MX_CAN1_Init+0xcc>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000d26:	4b21      	ldr	r3, [pc, #132]	; (8000dac <MX_CAN1_Init+0xcc>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000d2c:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <MX_CAN1_Init+0xcc>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000d32:	481e      	ldr	r0, [pc, #120]	; (8000dac <MX_CAN1_Init+0xcc>)
 8000d34:	f001 f94c 	bl	8001fd0 <HAL_CAN_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000d3e:	f000 fa27 	bl	8001190 <Error_Handler>


  CAN_FilterTypeDef sf;

  // All common bits go into the ID register
  sf.FilterIdHigh = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	603b      	str	r3, [r7, #0]
  sf.FilterIdLow = 0xA0;  // 0b 0000 0000 1010 0000
 8000d46:	23a0      	movs	r3, #160	; 0xa0
 8000d48:	607b      	str	r3, [r7, #4]

  // Which bits to compare for filter
  // Pour 0xAx on veut 0b1010 xxxx
  sf.FilterMaskIdHigh = 0x00;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60bb      	str	r3, [r7, #8]
  sf.FilterMaskIdLow = 0xFFF0; // 0b 1111 1111 1111 xxxx
 8000d4e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000d52:	60fb      	str	r3, [r7, #12]

  sf.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	613b      	str	r3, [r7, #16]
  sf.FilterBank = 18; // Which filter to use from the assigned ones
 8000d58:	2312      	movs	r3, #18
 8000d5a:	617b      	str	r3, [r7, #20]
  sf.FilterMode = CAN_FILTERMODE_IDMASK;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61bb      	str	r3, [r7, #24]
  sf.FilterScale = CAN_FILTERSCALE_32BIT;
 8000d60:	2301      	movs	r3, #1
 8000d62:	61fb      	str	r3, [r7, #28]
  sf.FilterActivation = CAN_FILTER_ENABLE;
 8000d64:	2301      	movs	r3, #1
 8000d66:	623b      	str	r3, [r7, #32]
  sf.SlaveStartFilterBank = 20; // How many filters to assign to CAN1
 8000d68:	2314      	movs	r3, #20
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan1, &sf) != HAL_OK)
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480e      	ldr	r0, [pc, #56]	; (8000dac <MX_CAN1_Init+0xcc>)
 8000d72:	f001 fa29 	bl	80021c8 <HAL_CAN_ConfigFilter>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_CAN1_Init+0xa0>
  {
	  Error_Handler();
 8000d7c:	f000 fa08 	bl	8001190 <Error_Handler>
  }
  //if (HAL_CAN_RegisterCallback(&hcan1, HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID, can_irq))
  //{
  //	  Error_Handler();
  //}
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000d80:	480a      	ldr	r0, [pc, #40]	; (8000dac <MX_CAN1_Init+0xcc>)
 8000d82:	f001 fb0d 	bl	80023a0 <HAL_CAN_Start>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_CAN1_Init+0xb0>
  {
      Error_Handler();
 8000d8c:	f000 fa00 	bl	8001190 <Error_Handler>
  }
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000d90:	2102      	movs	r1, #2
 8000d92:	4806      	ldr	r0, [pc, #24]	; (8000dac <MX_CAN1_Init+0xcc>)
 8000d94:	f001 fd35 	bl	8002802 <HAL_CAN_ActivateNotification>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_CAN1_Init+0xc2>
  {
      Error_Handler();
 8000d9e:	f000 f9f7 	bl	8001190 <Error_Handler>
  }

  /* USER CODE END CAN1_Init 2 */

}
 8000da2:	bf00      	nop
 8000da4:	3728      	adds	r7, #40	; 0x28
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000228 	.word	0x20000228
 8000db0:	40006400 	.word	0x40006400

08000db4 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000db8:	4b17      	ldr	r3, [pc, #92]	; (8000e18 <MX_CAN2_Init+0x64>)
 8000dba:	4a18      	ldr	r2, [pc, #96]	; (8000e1c <MX_CAN2_Init+0x68>)
 8000dbc:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 12;
 8000dbe:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <MX_CAN2_Init+0x64>)
 8000dc0:	220c      	movs	r2, #12
 8000dc2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000dc4:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <MX_CAN2_Init+0x64>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000dca:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <MX_CAN2_Init+0x64>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <MX_CAN2_Init+0x64>)
 8000dd2:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000dd6:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <MX_CAN2_Init+0x64>)
 8000dda:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000dde:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000de0:	4b0d      	ldr	r3, [pc, #52]	; (8000e18 <MX_CAN2_Init+0x64>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000de6:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <MX_CAN2_Init+0x64>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000dec:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <MX_CAN2_Init+0x64>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <MX_CAN2_Init+0x64>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000df8:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <MX_CAN2_Init+0x64>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <MX_CAN2_Init+0x64>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000e04:	4804      	ldr	r0, [pc, #16]	; (8000e18 <MX_CAN2_Init+0x64>)
 8000e06:	f001 f8e3 	bl	8001fd0 <HAL_CAN_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000e10:	f000 f9be 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000198 	.word	0x20000198
 8000e1c:	40006800 	.word	0x40006800

08000e20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e26:	4a13      	ldr	r2, [pc, #76]	; (8000e74 <MX_I2C1_Init+0x54>)
 8000e28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e2c:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <MX_I2C1_Init+0x58>)
 8000e2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e44:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e50:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e5c:	4804      	ldr	r0, [pc, #16]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e5e:	f002 fa15 	bl	800328c <HAL_I2C_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e68:	f000 f992 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000098 	.word	0x20000098
 8000e74:	40005400 	.word	0x40005400
 8000e78:	000186a0 	.word	0x000186a0

08000e7c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <MX_I2C3_Init+0x50>)
 8000e82:	4a13      	ldr	r2, [pc, #76]	; (8000ed0 <MX_I2C3_Init+0x54>)
 8000e84:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <MX_I2C3_Init+0x50>)
 8000e88:	4a12      	ldr	r2, [pc, #72]	; (8000ed4 <MX_I2C3_Init+0x58>)
 8000e8a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <MX_I2C3_Init+0x50>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <MX_I2C3_Init+0x50>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <MX_I2C3_Init+0x50>)
 8000e9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e9e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <MX_I2C3_Init+0x50>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <MX_I2C3_Init+0x50>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eac:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <MX_I2C3_Init+0x50>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <MX_I2C3_Init+0x50>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000eb8:	4804      	ldr	r0, [pc, #16]	; (8000ecc <MX_I2C3_Init+0x50>)
 8000eba:	f002 f9e7 	bl	800328c <HAL_I2C_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000ec4:	f000 f964 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000034 	.word	0x20000034
 8000ed0:	40005c00 	.word	0x40005c00
 8000ed4:	000186a0 	.word	0x000186a0

08000ed8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ede:	f107 0308 	add.w	r3, r7, #8
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eec:	463b      	mov	r3, r7
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ef4:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <MX_TIM3_Init+0x98>)
 8000ef6:	4a1f      	ldr	r2, [pc, #124]	; (8000f74 <MX_TIM3_Init+0x9c>)
 8000ef8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160;
 8000efa:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <MX_TIM3_Init+0x98>)
 8000efc:	22a0      	movs	r2, #160	; 0xa0
 8000efe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f00:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <MX_TIM3_Init+0x98>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8000f06:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <MX_TIM3_Init+0x98>)
 8000f08:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000f0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f0e:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <MX_TIM3_Init+0x98>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f14:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <MX_TIM3_Init+0x98>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f1a:	4815      	ldr	r0, [pc, #84]	; (8000f70 <MX_TIM3_Init+0x98>)
 8000f1c:	f003 fa56 	bl	80043cc <HAL_TIM_Base_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000f26:	f000 f933 	bl	8001190 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f30:	f107 0308 	add.w	r3, r7, #8
 8000f34:	4619      	mov	r1, r3
 8000f36:	480e      	ldr	r0, [pc, #56]	; (8000f70 <MX_TIM3_Init+0x98>)
 8000f38:	f003 fc10 	bl	800475c <HAL_TIM_ConfigClockSource>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000f42:	f000 f925 	bl	8001190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f46:	2300      	movs	r3, #0
 8000f48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f4e:	463b      	mov	r3, r7
 8000f50:	4619      	mov	r1, r3
 8000f52:	4807      	ldr	r0, [pc, #28]	; (8000f70 <MX_TIM3_Init+0x98>)
 8000f54:	f003 fe36 	bl	8004bc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000f5e:	f000 f917 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000f62:	4803      	ldr	r0, [pc, #12]	; (8000f70 <MX_TIM3_Init+0x98>)
 8000f64:	f003 fa82 	bl	800446c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 8000f68:	bf00      	nop
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000104 	.word	0x20000104
 8000f74:	40000400 	.word	0x40000400

08000f78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000f7e:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <MX_USART2_UART_Init+0x50>)
 8000f80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000f84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f96:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f9c:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa2:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fae:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <MX_USART2_UART_Init+0x4c>)
 8000fb0:	f003 fe98 	bl	8004ce4 <HAL_UART_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fba:	f000 f8e9 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200001e4 	.word	0x200001e4
 8000fc8:	40004400 	.word	0x40004400

08000fcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
 8000fe0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	4b5a      	ldr	r3, [pc, #360]	; (8001150 <MX_GPIO_Init+0x184>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a59      	ldr	r2, [pc, #356]	; (8001150 <MX_GPIO_Init+0x184>)
 8000fec:	f043 0310 	orr.w	r3, r3, #16
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b57      	ldr	r3, [pc, #348]	; (8001150 <MX_GPIO_Init+0x184>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0310 	and.w	r3, r3, #16
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	4b53      	ldr	r3, [pc, #332]	; (8001150 <MX_GPIO_Init+0x184>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a52      	ldr	r2, [pc, #328]	; (8001150 <MX_GPIO_Init+0x184>)
 8001008:	f043 0304 	orr.w	r3, r3, #4
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b50      	ldr	r3, [pc, #320]	; (8001150 <MX_GPIO_Init+0x184>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0304 	and.w	r3, r3, #4
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	4b4c      	ldr	r3, [pc, #304]	; (8001150 <MX_GPIO_Init+0x184>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a4b      	ldr	r2, [pc, #300]	; (8001150 <MX_GPIO_Init+0x184>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b49      	ldr	r3, [pc, #292]	; (8001150 <MX_GPIO_Init+0x184>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	4b45      	ldr	r3, [pc, #276]	; (8001150 <MX_GPIO_Init+0x184>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a44      	ldr	r2, [pc, #272]	; (8001150 <MX_GPIO_Init+0x184>)
 8001040:	f043 0302 	orr.w	r3, r3, #2
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b42      	ldr	r3, [pc, #264]	; (8001150 <MX_GPIO_Init+0x184>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	4b3e      	ldr	r3, [pc, #248]	; (8001150 <MX_GPIO_Init+0x184>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a3d      	ldr	r2, [pc, #244]	; (8001150 <MX_GPIO_Init+0x184>)
 800105c:	f043 0308 	orr.w	r3, r3, #8
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b3b      	ldr	r3, [pc, #236]	; (8001150 <MX_GPIO_Init+0x184>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0308 	and.w	r3, r3, #8
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Speaker_GPIO_Port, Speaker_Pin, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	2108      	movs	r1, #8
 8001072:	4838      	ldr	r0, [pc, #224]	; (8001154 <MX_GPIO_Init+0x188>)
 8001074:	f002 f8d8 	bl	8003228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_PWR_RPI_Pin|CLK_PWR_RPI_Pin|SHUTDOWN_RPI_Pin, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	f242 0103 	movw	r1, #8195	; 0x2003
 800107e:	4836      	ldr	r0, [pc, #216]	; (8001158 <MX_GPIO_Init+0x18c>)
 8001080:	f002 f8d2 	bl	8003228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Volant_Enable24V_Pin|UART_TXDEn_Pin|FT230_RESET_Pin|USB_PROG_EN_Pin
 8001084:	2200      	movs	r2, #0
 8001086:	f243 41f8 	movw	r1, #13560	; 0x34f8
 800108a:	4834      	ldr	r0, [pc, #208]	; (800115c <MX_GPIO_Init+0x190>)
 800108c:	f002 f8cc 	bl	8003228 <HAL_GPIO_WritePin>
                          |USB_Enable1_Pin|USB_Enable2_Pin|USB_Enable3_Pin|USB_Enable4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Speaker_Pin */
  GPIO_InitStruct.Pin = Speaker_Pin;
 8001090:	2308      	movs	r3, #8
 8001092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001094:	2301      	movs	r3, #1
 8001096:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Speaker_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4619      	mov	r1, r3
 80010a6:	482b      	ldr	r0, [pc, #172]	; (8001154 <MX_GPIO_Init+0x188>)
 80010a8:	f001 ff12 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_PWR_RPI_Pin CLK_PWR_RPI_Pin SHUTDOWN_RPI_Pin */
  GPIO_InitStruct.Pin = EN_PWR_RPI_Pin|CLK_PWR_RPI_Pin|SHUTDOWN_RPI_Pin;
 80010ac:	f242 0303 	movw	r3, #8195	; 0x2003
 80010b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	4824      	ldr	r0, [pc, #144]	; (8001158 <MX_GPIO_Init+0x18c>)
 80010c6:	f001 ff03 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RUNNING_RPI_Pin DETECT_PWR_RPI_Pin HS1_Pin HS2_Pin
                           HS3_Pin HS4_Pin */
  GPIO_InitStruct.Pin = RUNNING_RPI_Pin|DETECT_PWR_RPI_Pin|HS1_Pin|HS2_Pin
 80010ca:	23fc      	movs	r3, #252	; 0xfc
 80010cc:	617b      	str	r3, [r7, #20]
                          |HS3_Pin|HS4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4619      	mov	r1, r3
 80010dc:	481e      	ldr	r0, [pc, #120]	; (8001158 <MX_GPIO_Init+0x18c>)
 80010de:	f001 fef7 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Volant_Enable24V_Pin UART_TXDEn_Pin FT230_RESET_Pin USB_PROG_EN_Pin
                           USB_Enable1_Pin USB_Enable2_Pin USB_Enable3_Pin USB_Enable4_Pin */
  GPIO_InitStruct.Pin = Volant_Enable24V_Pin|UART_TXDEn_Pin|FT230_RESET_Pin|USB_PROG_EN_Pin
 80010e2:	f243 43f8 	movw	r3, #13560	; 0x34f8
 80010e6:	617b      	str	r3, [r7, #20]
                          |USB_Enable1_Pin|USB_Enable2_Pin|USB_Enable3_Pin|USB_Enable4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	4818      	ldr	r0, [pc, #96]	; (800115c <MX_GPIO_Init+0x190>)
 80010fc:	f001 fee8 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Volant_Status_Pin INT_IO1_Pin INT_IO2_Pin */
  GPIO_InitStruct.Pin = Volant_Status_Pin|INT_IO1_Pin|INT_IO2_Pin;
 8001100:	f640 0303 	movw	r3, #2051	; 0x803
 8001104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	4811      	ldr	r0, [pc, #68]	; (800115c <MX_GPIO_Init+0x190>)
 8001116:	f001 fedb 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2_Pin PB1_Pin */
  GPIO_InitStruct.Pin = PB2_Pin|PB1_Pin;
 800111a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800111e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001120:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001124:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4619      	mov	r1, r3
 8001130:	480a      	ldr	r0, [pc, #40]	; (800115c <MX_GPIO_Init+0x190>)
 8001132:	f001 fecd 	bl	8002ed0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	2028      	movs	r0, #40	; 0x28
 800113c:	f001 fe91 	bl	8002e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001140:	2028      	movs	r0, #40	; 0x28
 8001142:	f001 feaa 	bl	8002e9a <HAL_NVIC_EnableIRQ>

}
 8001146:	bf00      	nop
 8001148:	3728      	adds	r7, #40	; 0x28
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800
 8001154:	40021000 	.word	0x40021000
 8001158:	40020800 	.word	0x40020800
 800115c:	40020c00 	.word	0x40020c00

08001160 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

// EXTI Line External Interrupt ISR Handler CallBack
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_14) // PD_14
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001170:	d103      	bne.n	800117a <HAL_GPIO_EXTI_Callback+0x1a>
    {
    	// LED4
    	//gpio0_gp0 = (gpio0_gp0 ^ (1 << 5));
    	//GPIO_SendI2C(GPIO0_ADDR, GPIO_GP0, gpio0_gp0);
    	ToggleLed(LED1);
 8001172:	2006      	movs	r0, #6
 8001174:	f7ff fbae 	bl	80008d4 <ToggleLed>
    	// LED3
    	//gpio0_gp0 = (gpio0_gp0 ^ (1 << 6));
    	//GPIO_SendI2C(GPIO0_ADDR, GPIO_GP0, gpio0_gp0);
    	ToggleLed(LED2);
    }
}
 8001178:	e006      	b.n	8001188 <HAL_GPIO_EXTI_Callback+0x28>
    else if (GPIO_Pin == GPIO_PIN_15) // PD_15
 800117a:	88fb      	ldrh	r3, [r7, #6]
 800117c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001180:	d102      	bne.n	8001188 <HAL_GPIO_EXTI_Callback+0x28>
    	ToggleLed(LED2);
 8001182:	2005      	movs	r0, #5
 8001184:	f7ff fba6 	bl	80008d4 <ToggleLed>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <HAL_MspInit+0x4c>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <HAL_MspInit+0x4c>)
 80011b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b4:	6453      	str	r3, [r2, #68]	; 0x44
 80011b6:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <HAL_MspInit+0x4c>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	603b      	str	r3, [r7, #0]
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <HAL_MspInit+0x4c>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	4a08      	ldr	r2, [pc, #32]	; (80011ec <HAL_MspInit+0x4c>)
 80011cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d0:	6413      	str	r3, [r2, #64]	; 0x40
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_MspInit+0x4c>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800

080011f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a1b      	ldr	r2, [pc, #108]	; (800127c <HAL_ADC_MspInit+0x8c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d12f      	bne.n	8001272 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <HAL_ADC_MspInit+0x90>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	4a19      	ldr	r2, [pc, #100]	; (8001280 <HAL_ADC_MspInit+0x90>)
 800121c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001220:	6453      	str	r3, [r2, #68]	; 0x44
 8001222:	4b17      	ldr	r3, [pc, #92]	; (8001280 <HAL_ADC_MspInit+0x90>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b13      	ldr	r3, [pc, #76]	; (8001280 <HAL_ADC_MspInit+0x90>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a12      	ldr	r2, [pc, #72]	; (8001280 <HAL_ADC_MspInit+0x90>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <HAL_ADC_MspInit+0x90>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800124a:	2340      	movs	r3, #64	; 0x40
 800124c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800124e:	2303      	movs	r3, #3
 8001250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	4619      	mov	r1, r3
 800125c:	4809      	ldr	r0, [pc, #36]	; (8001284 <HAL_ADC_MspInit+0x94>)
 800125e:	f001 fe37 	bl	8002ed0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	2012      	movs	r0, #18
 8001268:	f001 fdfb 	bl	8002e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800126c:	2012      	movs	r0, #18
 800126e:	f001 fe14 	bl	8002e9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001272:	bf00      	nop
 8001274:	3728      	adds	r7, #40	; 0x28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40012000 	.word	0x40012000
 8001280:	40023800 	.word	0x40023800
 8001284:	40020000 	.word	0x40020000

08001288 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08c      	sub	sp, #48	; 0x30
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 031c 	add.w	r3, r7, #28
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a37      	ldr	r2, [pc, #220]	; (8001384 <HAL_CAN_MspInit+0xfc>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d135      	bne.n	8001316 <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	61bb      	str	r3, [r7, #24]
 80012ae:	4b36      	ldr	r3, [pc, #216]	; (8001388 <HAL_CAN_MspInit+0x100>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	4a35      	ldr	r2, [pc, #212]	; (8001388 <HAL_CAN_MspInit+0x100>)
 80012b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012b8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ba:	4b33      	ldr	r3, [pc, #204]	; (8001388 <HAL_CAN_MspInit+0x100>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c2:	61bb      	str	r3, [r7, #24]
 80012c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	4b2f      	ldr	r3, [pc, #188]	; (8001388 <HAL_CAN_MspInit+0x100>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a2e      	ldr	r2, [pc, #184]	; (8001388 <HAL_CAN_MspInit+0x100>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b2c      	ldr	r3, [pc, #176]	; (8001388 <HAL_CAN_MspInit+0x100>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80012e2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80012e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80012f4:	2309      	movs	r3, #9
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	4619      	mov	r1, r3
 80012fe:	4823      	ldr	r0, [pc, #140]	; (800138c <HAL_CAN_MspInit+0x104>)
 8001300:	f001 fde6 	bl	8002ed0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001304:	2200      	movs	r2, #0
 8001306:	2100      	movs	r1, #0
 8001308:	2014      	movs	r0, #20
 800130a:	f001 fdaa 	bl	8002e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800130e:	2014      	movs	r0, #20
 8001310:	f001 fdc3 	bl	8002e9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001314:	e031      	b.n	800137a <HAL_CAN_MspInit+0xf2>
  else if(hcan->Instance==CAN2)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a1d      	ldr	r2, [pc, #116]	; (8001390 <HAL_CAN_MspInit+0x108>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d12c      	bne.n	800137a <HAL_CAN_MspInit+0xf2>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001320:	2300      	movs	r3, #0
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	4b18      	ldr	r3, [pc, #96]	; (8001388 <HAL_CAN_MspInit+0x100>)
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	4a17      	ldr	r2, [pc, #92]	; (8001388 <HAL_CAN_MspInit+0x100>)
 800132a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800132e:	6413      	str	r3, [r2, #64]	; 0x40
 8001330:	4b15      	ldr	r3, [pc, #84]	; (8001388 <HAL_CAN_MspInit+0x100>)
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <HAL_CAN_MspInit+0x100>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	4a10      	ldr	r2, [pc, #64]	; (8001388 <HAL_CAN_MspInit+0x100>)
 8001346:	f043 0302 	orr.w	r3, r3, #2
 800134a:	6313      	str	r3, [r2, #48]	; 0x30
 800134c:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <HAL_CAN_MspInit+0x100>)
 800134e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001358:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800135c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001366:	2303      	movs	r3, #3
 8001368:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800136a:	2309      	movs	r3, #9
 800136c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136e:	f107 031c 	add.w	r3, r7, #28
 8001372:	4619      	mov	r1, r3
 8001374:	4807      	ldr	r0, [pc, #28]	; (8001394 <HAL_CAN_MspInit+0x10c>)
 8001376:	f001 fdab 	bl	8002ed0 <HAL_GPIO_Init>
}
 800137a:	bf00      	nop
 800137c:	3730      	adds	r7, #48	; 0x30
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40006400 	.word	0x40006400
 8001388:	40023800 	.word	0x40023800
 800138c:	40020000 	.word	0x40020000
 8001390:	40006800 	.word	0x40006800
 8001394:	40020400 	.word	0x40020400

08001398 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08c      	sub	sp, #48	; 0x30
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 031c 	add.w	r3, r7, #28
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a42      	ldr	r2, [pc, #264]	; (80014c0 <HAL_I2C_MspInit+0x128>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d12c      	bne.n	8001414 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	61bb      	str	r3, [r7, #24]
 80013be:	4b41      	ldr	r3, [pc, #260]	; (80014c4 <HAL_I2C_MspInit+0x12c>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a40      	ldr	r2, [pc, #256]	; (80014c4 <HAL_I2C_MspInit+0x12c>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b3e      	ldr	r3, [pc, #248]	; (80014c4 <HAL_I2C_MspInit+0x12c>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	61bb      	str	r3, [r7, #24]
 80013d4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013d6:	23c0      	movs	r3, #192	; 0xc0
 80013d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013da:	2312      	movs	r3, #18
 80013dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013de:	2301      	movs	r3, #1
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013e6:	2304      	movs	r3, #4
 80013e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	4619      	mov	r1, r3
 80013f0:	4835      	ldr	r0, [pc, #212]	; (80014c8 <HAL_I2C_MspInit+0x130>)
 80013f2:	f001 fd6d 	bl	8002ed0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	4b32      	ldr	r3, [pc, #200]	; (80014c4 <HAL_I2C_MspInit+0x12c>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	4a31      	ldr	r2, [pc, #196]	; (80014c4 <HAL_I2C_MspInit+0x12c>)
 8001400:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001404:	6413      	str	r3, [r2, #64]	; 0x40
 8001406:	4b2f      	ldr	r3, [pc, #188]	; (80014c4 <HAL_I2C_MspInit+0x12c>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001412:	e050      	b.n	80014b6 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a2c      	ldr	r2, [pc, #176]	; (80014cc <HAL_I2C_MspInit+0x134>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d14b      	bne.n	80014b6 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	4b28      	ldr	r3, [pc, #160]	; (80014c4 <HAL_I2C_MspInit+0x12c>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a27      	ldr	r2, [pc, #156]	; (80014c4 <HAL_I2C_MspInit+0x12c>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b25      	ldr	r3, [pc, #148]	; (80014c4 <HAL_I2C_MspInit+0x12c>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <HAL_I2C_MspInit+0x12c>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a20      	ldr	r2, [pc, #128]	; (80014c4 <HAL_I2C_MspInit+0x12c>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <HAL_I2C_MspInit+0x12c>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001456:	f44f 7300 	mov.w	r3, #512	; 0x200
 800145a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800145c:	2312      	movs	r3, #18
 800145e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001460:	2301      	movs	r3, #1
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001464:	2303      	movs	r3, #3
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001468:	2304      	movs	r3, #4
 800146a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146c:	f107 031c 	add.w	r3, r7, #28
 8001470:	4619      	mov	r1, r3
 8001472:	4817      	ldr	r0, [pc, #92]	; (80014d0 <HAL_I2C_MspInit+0x138>)
 8001474:	f001 fd2c 	bl	8002ed0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001478:	f44f 7380 	mov.w	r3, #256	; 0x100
 800147c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800147e:	2312      	movs	r3, #18
 8001480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001482:	2301      	movs	r3, #1
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001486:	2303      	movs	r3, #3
 8001488:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800148a:	2304      	movs	r3, #4
 800148c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148e:	f107 031c 	add.w	r3, r7, #28
 8001492:	4619      	mov	r1, r3
 8001494:	480f      	ldr	r0, [pc, #60]	; (80014d4 <HAL_I2C_MspInit+0x13c>)
 8001496:	f001 fd1b 	bl	8002ed0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <HAL_I2C_MspInit+0x12c>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	4a08      	ldr	r2, [pc, #32]	; (80014c4 <HAL_I2C_MspInit+0x12c>)
 80014a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014a8:	6413      	str	r3, [r2, #64]	; 0x40
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_I2C_MspInit+0x12c>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
}
 80014b6:	bf00      	nop
 80014b8:	3730      	adds	r7, #48	; 0x30
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40005400 	.word	0x40005400
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40020400 	.word	0x40020400
 80014cc:	40005c00 	.word	0x40005c00
 80014d0:	40020800 	.word	0x40020800
 80014d4:	40020000 	.word	0x40020000

080014d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a0e      	ldr	r2, [pc, #56]	; (8001520 <HAL_TIM_Base_MspInit+0x48>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d115      	bne.n	8001516 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <HAL_TIM_Base_MspInit+0x4c>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	4a0c      	ldr	r2, [pc, #48]	; (8001524 <HAL_TIM_Base_MspInit+0x4c>)
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	6413      	str	r3, [r2, #64]	; 0x40
 80014fa:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <HAL_TIM_Base_MspInit+0x4c>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	201d      	movs	r0, #29
 800150c:	f001 fca9 	bl	8002e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001510:	201d      	movs	r0, #29
 8001512:	f001 fcc2 	bl	8002e9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40000400 	.word	0x40000400
 8001524:	40023800 	.word	0x40023800

08001528 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	; 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a19      	ldr	r2, [pc, #100]	; (80015ac <HAL_UART_MspInit+0x84>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d12b      	bne.n	80015a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <HAL_UART_MspInit+0x88>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	4a17      	ldr	r2, [pc, #92]	; (80015b0 <HAL_UART_MspInit+0x88>)
 8001554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001558:	6413      	str	r3, [r2, #64]	; 0x40
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_UART_MspInit+0x88>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <HAL_UART_MspInit+0x88>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a10      	ldr	r2, [pc, #64]	; (80015b0 <HAL_UART_MspInit+0x88>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <HAL_UART_MspInit+0x88>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> USART2_CTS
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001582:	230f      	movs	r3, #15
 8001584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158e:	2303      	movs	r3, #3
 8001590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001592:	2307      	movs	r3, #7
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001596:	f107 0314 	add.w	r3, r7, #20
 800159a:	4619      	mov	r1, r3
 800159c:	4805      	ldr	r0, [pc, #20]	; (80015b4 <HAL_UART_MspInit+0x8c>)
 800159e:	f001 fc97 	bl	8002ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015a2:	bf00      	nop
 80015a4:	3728      	adds	r7, #40	; 0x28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40004400 	.word	0x40004400
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40020000 	.word	0x40020000

080015b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <HardFault_Handler+0x4>

080015cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <MemManage_Handler+0x4>

080015d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d6:	e7fe      	b.n	80015d6 <BusFault_Handler+0x4>

080015d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <UsageFault_Handler+0x4>

080015de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800160c:	f000 f8c2 	bl	8001794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}

08001614 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */



  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001618:	4802      	ldr	r0, [pc, #8]	; (8001624 <ADC_IRQHandler+0x10>)
 800161a:	f000 f942 	bl	80018a2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000150 	.word	0x20000150

08001628 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <CAN1_RX0_IRQHandler+0x10>)
 800162e:	f001 f90e 	bl	800284e <HAL_CAN_IRQHandler>

  // can1_recv_flag = 1;
  // HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pRxHeader, &r);
  /* USER CODE END CAN1_RX0_IRQn 1 */

}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000228 	.word	0x20000228

0800163c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	timer_flag = 1;
 8001640:	4b03      	ldr	r3, [pc, #12]	; (8001650 <TIM3_IRQHandler+0x14>)
 8001642:	2201      	movs	r2, #1
 8001644:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001646:	4803      	ldr	r0, [pc, #12]	; (8001654 <TIM3_IRQHandler+0x18>)
 8001648:	f002 ff80 	bl	800454c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	200001c6 	.word	0x200001c6
 8001654:	20000104 	.word	0x20000104

08001658 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
		pb2_pressed = 1;
	}
	*/

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB2_Pin);
 800165c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001660:	f001 fdfc 	bl	800325c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PB1_Pin);
 8001664:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001668:	f001 fdf8 	bl	800325c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}

08001670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <SystemInit+0x28>)
 8001676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800167a:	4a07      	ldr	r2, [pc, #28]	; (8001698 <SystemInit+0x28>)
 800167c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <SystemInit+0x28>)
 8001686:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800168a:	609a      	str	r2, [r3, #8]
#endif
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack       /* set stack pointer */
 800169c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80016a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016a2:	e003      	b.n	80016ac <LoopCopyDataInit>

080016a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016aa:	3104      	adds	r1, #4

080016ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016ac:	480b      	ldr	r0, [pc, #44]	; (80016dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016ae:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016b4:	d3f6      	bcc.n	80016a4 <CopyDataInit>
  ldr  r2, =_sbss
 80016b6:	4a0b      	ldr	r2, [pc, #44]	; (80016e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016b8:	e002      	b.n	80016c0 <LoopFillZerobss>

080016ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80016ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016bc:	f842 3b04 	str.w	r3, [r2], #4

080016c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016c4:	d3f9      	bcc.n	80016ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016c6:	f7ff ffd3 	bl	8001670 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ca:	f003 fe31 	bl	8005330 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ce:	f7ff f989 	bl	80009e4 <main>
  bx  lr    
 80016d2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80016d4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80016d8:	080053d8 	.word	0x080053d8
  ldr  r0, =_sdata
 80016dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016e0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80016e4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80016e8:	20000260 	.word	0x20000260

080016ec <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016ec:	e7fe      	b.n	80016ec <CAN1_RX1_IRQHandler>
	...

080016f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016f4:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <HAL_Init+0x40>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0d      	ldr	r2, [pc, #52]	; (8001730 <HAL_Init+0x40>)
 80016fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_Init+0x40>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <HAL_Init+0x40>)
 8001706:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800170a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800170c:	4b08      	ldr	r3, [pc, #32]	; (8001730 <HAL_Init+0x40>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a07      	ldr	r2, [pc, #28]	; (8001730 <HAL_Init+0x40>)
 8001712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001716:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001718:	2003      	movs	r0, #3
 800171a:	f001 fb97 	bl	8002e4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800171e:	2000      	movs	r0, #0
 8001720:	f000 f808 	bl	8001734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001724:	f7ff fd3c 	bl	80011a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023c00 	.word	0x40023c00

08001734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_InitTick+0x54>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_InitTick+0x58>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174a:	fbb3 f3f1 	udiv	r3, r3, r1
 800174e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001752:	4618      	mov	r0, r3
 8001754:	f001 fbaf 	bl	8002eb6 <HAL_SYSTICK_Config>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e00e      	b.n	8001780 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b0f      	cmp	r3, #15
 8001766:	d80a      	bhi.n	800177e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001768:	2200      	movs	r2, #0
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001770:	f001 fb77 	bl	8002e62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001774:	4a06      	ldr	r2, [pc, #24]	; (8001790 <HAL_InitTick+0x5c>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	e000      	b.n	8001780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000000 	.word	0x20000000
 800178c:	20000008 	.word	0x20000008
 8001790:	20000004 	.word	0x20000004

08001794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_IncTick+0x20>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_IncTick+0x24>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4413      	add	r3, r2
 80017a4:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <HAL_IncTick+0x24>)
 80017a6:	6013      	str	r3, [r2, #0]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000008 	.word	0x20000008
 80017b8:	2000025c 	.word	0x2000025c

080017bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return uwTick;
 80017c0:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <HAL_GetTick+0x14>)
 80017c2:	681b      	ldr	r3, [r3, #0]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	2000025c 	.word	0x2000025c

080017d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017dc:	f7ff ffee 	bl	80017bc <HAL_GetTick>
 80017e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017ec:	d005      	beq.n	80017fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ee:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <HAL_Delay+0x44>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4413      	add	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017fa:	bf00      	nop
 80017fc:	f7ff ffde 	bl	80017bc <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	429a      	cmp	r2, r3
 800180a:	d8f7      	bhi.n	80017fc <HAL_Delay+0x28>
  {
  }
}
 800180c:	bf00      	nop
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000008 	.word	0x20000008

0800181c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001824:	2300      	movs	r3, #0
 8001826:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e033      	b.n	800189a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	2b00      	cmp	r3, #0
 8001838:	d109      	bne.n	800184e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff fcd8 	bl	80011f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f003 0310 	and.w	r3, r3, #16
 8001856:	2b00      	cmp	r3, #0
 8001858:	d118      	bne.n	800188c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001862:	f023 0302 	bic.w	r3, r3, #2
 8001866:	f043 0202 	orr.w	r2, r3, #2
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 faa8 	bl	8001dc4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f023 0303 	bic.w	r3, r3, #3
 8001882:	f043 0201 	orr.w	r2, r3, #1
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	641a      	str	r2, [r3, #64]	; 0x40
 800188a:	e001      	b.n	8001890 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001898:	7bfb      	ldrb	r3, [r7, #15]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b02      	cmp	r3, #2
 80018be:	bf0c      	ite	eq
 80018c0:	2301      	moveq	r3, #1
 80018c2:	2300      	movne	r3, #0
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 0320 	and.w	r3, r3, #32
 80018d2:	2b20      	cmp	r3, #32
 80018d4:	bf0c      	ite	eq
 80018d6:	2301      	moveq	r3, #1
 80018d8:	2300      	movne	r3, #0
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d049      	beq.n	8001978 <HAL_ADC_IRQHandler+0xd6>
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d046      	beq.n	8001978 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f003 0310 	and.w	r3, r3, #16
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d105      	bne.n	8001902 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d12b      	bne.n	8001968 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001914:	2b00      	cmp	r3, #0
 8001916:	d127      	bne.n	8001968 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001922:	2b00      	cmp	r3, #0
 8001924:	d006      	beq.n	8001934 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001930:	2b00      	cmp	r3, #0
 8001932:	d119      	bne.n	8001968 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0220 	bic.w	r2, r2, #32
 8001942:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d105      	bne.n	8001968 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	f043 0201 	orr.w	r2, r3, #1
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f8db 	bl	8001b24 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f06f 0212 	mvn.w	r2, #18
 8001976:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0304 	and.w	r3, r3, #4
 8001982:	2b04      	cmp	r3, #4
 8001984:	bf0c      	ite	eq
 8001986:	2301      	moveq	r3, #1
 8001988:	2300      	movne	r3, #0
 800198a:	b2db      	uxtb	r3, r3
 800198c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001998:	2b80      	cmp	r3, #128	; 0x80
 800199a:	bf0c      	ite	eq
 800199c:	2301      	moveq	r3, #1
 800199e:	2300      	movne	r3, #0
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d057      	beq.n	8001a5a <HAL_ADC_IRQHandler+0x1b8>
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d054      	beq.n	8001a5a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	f003 0310 	and.w	r3, r3, #16
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d105      	bne.n	80019c8 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d139      	bne.n	8001a4a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019dc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d006      	beq.n	80019f2 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d12b      	bne.n	8001a4a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d124      	bne.n	8001a4a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d11d      	bne.n	8001a4a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d119      	bne.n	8001a4a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a24:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d105      	bne.n	8001a4a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f043 0201 	orr.w	r2, r3, #1
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 fab6 	bl	8001fbc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f06f 020c 	mvn.w	r2, #12
 8001a58:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	bf0c      	ite	eq
 8001a68:	2301      	moveq	r3, #1
 8001a6a:	2300      	movne	r3, #0
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a7a:	2b40      	cmp	r3, #64	; 0x40
 8001a7c:	bf0c      	ite	eq
 8001a7e:	2301      	moveq	r3, #1
 8001a80:	2300      	movne	r3, #0
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d017      	beq.n	8001abc <HAL_ADC_IRQHandler+0x21a>
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d014      	beq.n	8001abc <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d10d      	bne.n	8001abc <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 f843 	bl	8001b38 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f06f 0201 	mvn.w	r2, #1
 8001aba:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0320 	and.w	r3, r3, #32
 8001ac6:	2b20      	cmp	r3, #32
 8001ac8:	bf0c      	ite	eq
 8001aca:	2301      	moveq	r3, #1
 8001acc:	2300      	movne	r3, #0
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001adc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ae0:	bf0c      	ite	eq
 8001ae2:	2301      	moveq	r3, #1
 8001ae4:	2300      	movne	r3, #0
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d015      	beq.n	8001b1c <HAL_ADC_IRQHandler+0x27a>
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d012      	beq.n	8001b1c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afa:	f043 0202 	orr.w	r2, r3, #2
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f06f 0220 	mvn.w	r2, #32
 8001b0a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f81d 	bl	8001b4c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f06f 0220 	mvn.w	r2, #32
 8001b1a:	601a      	str	r2, [r3, #0]
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d101      	bne.n	8001b7c <HAL_ADC_ConfigChannel+0x1c>
 8001b78:	2302      	movs	r3, #2
 8001b7a:	e113      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x244>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b09      	cmp	r3, #9
 8001b8a:	d925      	bls.n	8001bd8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68d9      	ldr	r1, [r3, #12]
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4413      	add	r3, r2
 8001ba0:	3b1e      	subs	r3, #30
 8001ba2:	2207      	movs	r2, #7
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43da      	mvns	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	400a      	ands	r2, r1
 8001bb0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68d9      	ldr	r1, [r3, #12]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4403      	add	r3, r0
 8001bca:	3b1e      	subs	r3, #30
 8001bcc:	409a      	lsls	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	e022      	b.n	8001c1e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6919      	ldr	r1, [r3, #16]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	461a      	mov	r2, r3
 8001be6:	4613      	mov	r3, r2
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	4413      	add	r3, r2
 8001bec:	2207      	movs	r2, #7
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43da      	mvns	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	400a      	ands	r2, r1
 8001bfa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6919      	ldr	r1, [r3, #16]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	689a      	ldr	r2, [r3, #8]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	4603      	mov	r3, r0
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4403      	add	r3, r0
 8001c14:	409a      	lsls	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b06      	cmp	r3, #6
 8001c24:	d824      	bhi.n	8001c70 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	3b05      	subs	r3, #5
 8001c38:	221f      	movs	r2, #31
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43da      	mvns	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	400a      	ands	r2, r1
 8001c46:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	4618      	mov	r0, r3
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	3b05      	subs	r3, #5
 8001c62:	fa00 f203 	lsl.w	r2, r0, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	635a      	str	r2, [r3, #52]	; 0x34
 8001c6e:	e04c      	b.n	8001d0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b0c      	cmp	r3, #12
 8001c76:	d824      	bhi.n	8001cc2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	3b23      	subs	r3, #35	; 0x23
 8001c8a:	221f      	movs	r2, #31
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43da      	mvns	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	400a      	ands	r2, r1
 8001c98:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	4613      	mov	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	3b23      	subs	r3, #35	; 0x23
 8001cb4:	fa00 f203 	lsl.w	r2, r0, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	631a      	str	r2, [r3, #48]	; 0x30
 8001cc0:	e023      	b.n	8001d0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	3b41      	subs	r3, #65	; 0x41
 8001cd4:	221f      	movs	r2, #31
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43da      	mvns	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	400a      	ands	r2, r1
 8001ce2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	3b41      	subs	r3, #65	; 0x41
 8001cfe:	fa00 f203 	lsl.w	r2, r0, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	430a      	orrs	r2, r1
 8001d08:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d0a:	4b29      	ldr	r3, [pc, #164]	; (8001db0 <HAL_ADC_ConfigChannel+0x250>)
 8001d0c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a28      	ldr	r2, [pc, #160]	; (8001db4 <HAL_ADC_ConfigChannel+0x254>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d10f      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x1d8>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b12      	cmp	r3, #18
 8001d1e:	d10b      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a1d      	ldr	r2, [pc, #116]	; (8001db4 <HAL_ADC_ConfigChannel+0x254>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d12b      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x23a>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a1c      	ldr	r2, [pc, #112]	; (8001db8 <HAL_ADC_ConfigChannel+0x258>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d003      	beq.n	8001d54 <HAL_ADC_ConfigChannel+0x1f4>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b11      	cmp	r3, #17
 8001d52:	d122      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a11      	ldr	r2, [pc, #68]	; (8001db8 <HAL_ADC_ConfigChannel+0x258>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d111      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d76:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <HAL_ADC_ConfigChannel+0x25c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a11      	ldr	r2, [pc, #68]	; (8001dc0 <HAL_ADC_ConfigChannel+0x260>)
 8001d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d80:	0c9a      	lsrs	r2, r3, #18
 8001d82:	4613      	mov	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d8c:	e002      	b.n	8001d94 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f9      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	40012300 	.word	0x40012300
 8001db4:	40012000 	.word	0x40012000
 8001db8:	10000012 	.word	0x10000012
 8001dbc:	20000000 	.word	0x20000000
 8001dc0:	431bde83 	.word	0x431bde83

08001dc4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dcc:	4b79      	ldr	r3, [pc, #484]	; (8001fb4 <ADC_Init+0x1f0>)
 8001dce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	431a      	orrs	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001df8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6859      	ldr	r1, [r3, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	021a      	lsls	r2, r3, #8
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6859      	ldr	r1, [r3, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6899      	ldr	r1, [r3, #8]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68da      	ldr	r2, [r3, #12]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e56:	4a58      	ldr	r2, [pc, #352]	; (8001fb8 <ADC_Init+0x1f4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d022      	beq.n	8001ea2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6899      	ldr	r1, [r3, #8]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6899      	ldr	r1, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	e00f      	b.n	8001ec2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001eb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ec0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 0202 	bic.w	r2, r2, #2
 8001ed0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6899      	ldr	r1, [r3, #8]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	7e1b      	ldrb	r3, [r3, #24]
 8001edc:	005a      	lsls	r2, r3, #1
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d01b      	beq.n	8001f28 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001efe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6859      	ldr	r1, [r3, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	035a      	lsls	r2, r3, #13
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	e007      	b.n	8001f38 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	051a      	lsls	r2, r3, #20
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6899      	ldr	r1, [r3, #8]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f7a:	025a      	lsls	r2, r3, #9
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6899      	ldr	r1, [r3, #8]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	029a      	lsls	r2, r3, #10
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	609a      	str	r2, [r3, #8]
}
 8001fa8:	bf00      	nop
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	40012300 	.word	0x40012300
 8001fb8:	0f000001 	.word	0x0f000001

08001fbc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e0ed      	b.n	80021be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d102      	bne.n	8001ff4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff f94a 	bl	8001288 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0201 	orr.w	r2, r2, #1
 8002002:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002004:	f7ff fbda 	bl	80017bc <HAL_GetTick>
 8002008:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800200a:	e012      	b.n	8002032 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800200c:	f7ff fbd6 	bl	80017bc <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b0a      	cmp	r3, #10
 8002018:	d90b      	bls.n	8002032 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2205      	movs	r2, #5
 800202a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e0c5      	b.n	80021be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0e5      	beq.n	800200c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0202 	bic.w	r2, r2, #2
 800204e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002050:	f7ff fbb4 	bl	80017bc <HAL_GetTick>
 8002054:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002056:	e012      	b.n	800207e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002058:	f7ff fbb0 	bl	80017bc <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b0a      	cmp	r3, #10
 8002064:	d90b      	bls.n	800207e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2205      	movs	r2, #5
 8002076:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e09f      	b.n	80021be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1e5      	bne.n	8002058 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	7e1b      	ldrb	r3, [r3, #24]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d108      	bne.n	80020a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	e007      	b.n	80020b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	7e5b      	ldrb	r3, [r3, #25]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d108      	bne.n	80020d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	e007      	b.n	80020e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	7e9b      	ldrb	r3, [r3, #26]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d108      	bne.n	80020fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 0220 	orr.w	r2, r2, #32
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	e007      	b.n	800210a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 0220 	bic.w	r2, r2, #32
 8002108:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	7edb      	ldrb	r3, [r3, #27]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d108      	bne.n	8002124 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0210 	bic.w	r2, r2, #16
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	e007      	b.n	8002134 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0210 	orr.w	r2, r2, #16
 8002132:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	7f1b      	ldrb	r3, [r3, #28]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d108      	bne.n	800214e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0208 	orr.w	r2, r2, #8
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	e007      	b.n	800215e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0208 	bic.w	r2, r2, #8
 800215c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	7f5b      	ldrb	r3, [r3, #29]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d108      	bne.n	8002178 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f042 0204 	orr.w	r2, r2, #4
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	e007      	b.n	8002188 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0204 	bic.w	r2, r2, #4
 8002186:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	431a      	orrs	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	ea42 0103 	orr.w	r1, r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	1e5a      	subs	r2, r3, #1
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
	...

080021c8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b087      	sub	sp, #28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021de:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80021e0:	7cfb      	ldrb	r3, [r7, #19]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d003      	beq.n	80021ee <HAL_CAN_ConfigFilter+0x26>
 80021e6:	7cfb      	ldrb	r3, [r7, #19]
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	f040 80c7 	bne.w	800237c <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a69      	ldr	r2, [pc, #420]	; (8002398 <HAL_CAN_ConfigFilter+0x1d0>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d001      	beq.n	80021fc <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80021f8:	4b68      	ldr	r3, [pc, #416]	; (800239c <HAL_CAN_ConfigFilter+0x1d4>)
 80021fa:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002202:	f043 0201 	orr.w	r2, r3, #1
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	4a63      	ldr	r2, [pc, #396]	; (800239c <HAL_CAN_ConfigFilter+0x1d4>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d111      	bne.n	8002238 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800221a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	021b      	lsls	r3, r3, #8
 8002230:	431a      	orrs	r2, r3
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	f003 031f 	and.w	r3, r3, #31
 8002240:	2201      	movs	r2, #1
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	43db      	mvns	r3, r3
 8002252:	401a      	ands	r2, r3
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d123      	bne.n	80022aa <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	43db      	mvns	r3, r3
 800226c:	401a      	ands	r2, r3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002284:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	3248      	adds	r2, #72	; 0x48
 800228a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800229e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022a0:	6979      	ldr	r1, [r7, #20]
 80022a2:	3348      	adds	r3, #72	; 0x48
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	440b      	add	r3, r1
 80022a8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d122      	bne.n	80022f8 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	431a      	orrs	r2, r3
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80022d2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	3248      	adds	r2, #72	; 0x48
 80022d8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022ec:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022ee:	6979      	ldr	r1, [r7, #20]
 80022f0:	3348      	adds	r3, #72	; 0x48
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	440b      	add	r3, r1
 80022f6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d109      	bne.n	8002314 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	43db      	mvns	r3, r3
 800230a:	401a      	ands	r2, r3
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002312:	e007      	b.n	8002324 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	431a      	orrs	r2, r3
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d109      	bne.n	8002340 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	43db      	mvns	r3, r3
 8002336:	401a      	ands	r2, r3
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800233e:	e007      	b.n	8002350 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	431a      	orrs	r2, r3
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d107      	bne.n	8002368 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	431a      	orrs	r2, r3
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800236e:	f023 0201 	bic.w	r2, r3, #1
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	e006      	b.n	800238a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
  }
}
 800238a:	4618      	mov	r0, r3
 800238c:	371c      	adds	r7, #28
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	40006c00 	.word	0x40006c00
 800239c:	40006400 	.word	0x40006400

080023a0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d12e      	bne.n	8002412 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0201 	bic.w	r2, r2, #1
 80023ca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80023cc:	f7ff f9f6 	bl	80017bc <HAL_GetTick>
 80023d0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80023d2:	e012      	b.n	80023fa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023d4:	f7ff f9f2 	bl	80017bc <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b0a      	cmp	r3, #10
 80023e0:	d90b      	bls.n	80023fa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2205      	movs	r2, #5
 80023f2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e012      	b.n	8002420 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1e5      	bne.n	80023d4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	e006      	b.n	8002420 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
  }
}
 8002420:	4618      	mov	r0, r3
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002428:	b480      	push	{r7}
 800242a:	b089      	sub	sp, #36	; 0x24
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f893 3020 	ldrb.w	r3, [r3, #32]
 800243c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002446:	7ffb      	ldrb	r3, [r7, #31]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d003      	beq.n	8002454 <HAL_CAN_AddTxMessage+0x2c>
 800244c:	7ffb      	ldrb	r3, [r7, #31]
 800244e:	2b02      	cmp	r3, #2
 8002450:	f040 80b8 	bne.w	80025c4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10a      	bne.n	8002474 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002464:	2b00      	cmp	r3, #0
 8002466:	d105      	bne.n	8002474 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 80a0 	beq.w	80025b4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	0e1b      	lsrs	r3, r3, #24
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2b02      	cmp	r3, #2
 8002482:	d907      	bls.n	8002494 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e09e      	b.n	80025d2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002494:	2201      	movs	r2, #1
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	409a      	lsls	r2, r3
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10d      	bne.n	80024c2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80024b0:	68f9      	ldr	r1, [r7, #12]
 80024b2:	6809      	ldr	r1, [r1, #0]
 80024b4:	431a      	orrs	r2, r3
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	3318      	adds	r3, #24
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	440b      	add	r3, r1
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	e00f      	b.n	80024e2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024cc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024d2:	68f9      	ldr	r1, [r7, #12]
 80024d4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80024d6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	3318      	adds	r3, #24
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	440b      	add	r3, r1
 80024e0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6819      	ldr	r1, [r3, #0]
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	691a      	ldr	r2, [r3, #16]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	3318      	adds	r3, #24
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	440b      	add	r3, r1
 80024f2:	3304      	adds	r3, #4
 80024f4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	7d1b      	ldrb	r3, [r3, #20]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d111      	bne.n	8002522 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	3318      	adds	r3, #24
 8002506:	011b      	lsls	r3, r3, #4
 8002508:	4413      	add	r3, r2
 800250a:	3304      	adds	r3, #4
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	6811      	ldr	r1, [r2, #0]
 8002512:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	3318      	adds	r3, #24
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	440b      	add	r3, r1
 800251e:	3304      	adds	r3, #4
 8002520:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3307      	adds	r3, #7
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	061a      	lsls	r2, r3, #24
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3306      	adds	r3, #6
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	041b      	lsls	r3, r3, #16
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3305      	adds	r3, #5
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	021b      	lsls	r3, r3, #8
 800253c:	4313      	orrs	r3, r2
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	3204      	adds	r2, #4
 8002542:	7812      	ldrb	r2, [r2, #0]
 8002544:	4610      	mov	r0, r2
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	6811      	ldr	r1, [r2, #0]
 800254a:	ea43 0200 	orr.w	r2, r3, r0
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	440b      	add	r3, r1
 8002554:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002558:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3303      	adds	r3, #3
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	061a      	lsls	r2, r3, #24
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3302      	adds	r3, #2
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	041b      	lsls	r3, r3, #16
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3301      	adds	r3, #1
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	021b      	lsls	r3, r3, #8
 8002574:	4313      	orrs	r3, r2
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	7812      	ldrb	r2, [r2, #0]
 800257a:	4610      	mov	r0, r2
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	6811      	ldr	r1, [r2, #0]
 8002580:	ea43 0200 	orr.w	r2, r3, r0
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	440b      	add	r3, r1
 800258a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800258e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	3318      	adds	r3, #24
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	4413      	add	r3, r2
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	6811      	ldr	r1, [r2, #0]
 80025a2:	f043 0201 	orr.w	r2, r3, #1
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	3318      	adds	r3, #24
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	440b      	add	r3, r1
 80025ae:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80025b0:	2300      	movs	r3, #0
 80025b2:	e00e      	b.n	80025d2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e006      	b.n	80025d2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
  }
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3724      	adds	r7, #36	; 0x24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80025de:	b480      	push	{r7}
 80025e0:	b087      	sub	sp, #28
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	60f8      	str	r0, [r7, #12]
 80025e6:	60b9      	str	r1, [r7, #8]
 80025e8:	607a      	str	r2, [r7, #4]
 80025ea:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025f2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80025f4:	7dfb      	ldrb	r3, [r7, #23]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d003      	beq.n	8002602 <HAL_CAN_GetRxMessage+0x24>
 80025fa:	7dfb      	ldrb	r3, [r7, #23]
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	f040 80f3 	bne.w	80027e8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10e      	bne.n	8002626 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d116      	bne.n	8002644 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e0e7      	b.n	80027f6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	2b00      	cmp	r3, #0
 8002632:	d107      	bne.n	8002644 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0d8      	b.n	80027f6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	331b      	adds	r3, #27
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	4413      	add	r3, r2
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0204 	and.w	r2, r3, #4
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10c      	bne.n	800267c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	331b      	adds	r3, #27
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	4413      	add	r3, r2
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	0d5b      	lsrs	r3, r3, #21
 8002672:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	e00b      	b.n	8002694 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	331b      	adds	r3, #27
 8002684:	011b      	lsls	r3, r3, #4
 8002686:	4413      	add	r3, r2
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	08db      	lsrs	r3, r3, #3
 800268c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	331b      	adds	r3, #27
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	4413      	add	r3, r2
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0202 	and.w	r2, r3, #2
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	331b      	adds	r3, #27
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	4413      	add	r3, r2
 80026b6:	3304      	adds	r3, #4
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 020f 	and.w	r2, r3, #15
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	331b      	adds	r3, #27
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	4413      	add	r3, r2
 80026ce:	3304      	adds	r3, #4
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	0a1b      	lsrs	r3, r3, #8
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	331b      	adds	r3, #27
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	4413      	add	r3, r2
 80026e6:	3304      	adds	r3, #4
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	0c1b      	lsrs	r3, r3, #16
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	011b      	lsls	r3, r3, #4
 80026fa:	4413      	add	r3, r2
 80026fc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	b2da      	uxtb	r2, r3
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	4413      	add	r3, r2
 8002712:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	0a1a      	lsrs	r2, r3, #8
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	3301      	adds	r3, #1
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	4413      	add	r3, r2
 800272c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	0c1a      	lsrs	r2, r3, #16
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	3302      	adds	r3, #2
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	011b      	lsls	r3, r3, #4
 8002744:	4413      	add	r3, r2
 8002746:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	0e1a      	lsrs	r2, r3, #24
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	3303      	adds	r3, #3
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	4413      	add	r3, r2
 8002760:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	3304      	adds	r3, #4
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	4413      	add	r3, r2
 8002778:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	0a1a      	lsrs	r2, r3, #8
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	3305      	adds	r3, #5
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	4413      	add	r3, r2
 8002792:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	0c1a      	lsrs	r2, r3, #16
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	3306      	adds	r3, #6
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	011b      	lsls	r3, r3, #4
 80027aa:	4413      	add	r3, r2
 80027ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	0e1a      	lsrs	r2, r3, #24
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	3307      	adds	r3, #7
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d108      	bne.n	80027d4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68da      	ldr	r2, [r3, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f042 0220 	orr.w	r2, r2, #32
 80027d0:	60da      	str	r2, [r3, #12]
 80027d2:	e007      	b.n	80027e4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	691a      	ldr	r2, [r3, #16]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0220 	orr.w	r2, r2, #32
 80027e2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80027e4:	2300      	movs	r3, #0
 80027e6:	e006      	b.n	80027f6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
  }
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	371c      	adds	r7, #28
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002802:	b480      	push	{r7}
 8002804:	b085      	sub	sp, #20
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
 800280a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002812:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d002      	beq.n	8002820 <HAL_CAN_ActivateNotification+0x1e>
 800281a:	7bfb      	ldrb	r3, [r7, #15]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d109      	bne.n	8002834 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6959      	ldr	r1, [r3, #20]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	e006      	b.n	8002842 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
  }
}
 8002842:	4618      	mov	r0, r3
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b08a      	sub	sp, #40	; 0x28
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002856:	2300      	movs	r3, #0
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800288a:	6a3b      	ldr	r3, [r7, #32]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d07c      	beq.n	800298e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d023      	beq.n	80028e6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2201      	movs	r2, #1
 80028a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f983 	bl	8002bbc <HAL_CAN_TxMailbox0CompleteCallback>
 80028b6:	e016      	b.n	80028e6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d004      	beq.n	80028cc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028c8:	627b      	str	r3, [r7, #36]	; 0x24
 80028ca:	e00c      	b.n	80028e6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d004      	beq.n	80028e0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
 80028de:	e002      	b.n	80028e6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f989 	bl	8002bf8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d024      	beq.n	800293a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002900:	2b00      	cmp	r3, #0
 8002902:	d003      	beq.n	800290c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f963 	bl	8002bd0 <HAL_CAN_TxMailbox1CompleteCallback>
 800290a:	e016      	b.n	800293a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002912:	2b00      	cmp	r3, #0
 8002914:	d004      	beq.n	8002920 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
 800291e:	e00c      	b.n	800293a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002926:	2b00      	cmp	r3, #0
 8002928:	d004      	beq.n	8002934 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
 8002932:	e002      	b.n	800293a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f969 	bl	8002c0c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d024      	beq.n	800298e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800294c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d003      	beq.n	8002960 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 f943 	bl	8002be4 <HAL_CAN_TxMailbox2CompleteCallback>
 800295e:	e016      	b.n	800298e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d004      	beq.n	8002974 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
 8002972:	e00c      	b.n	800298e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d004      	beq.n	8002988 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
 8002986:	e002      	b.n	800298e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f949 	bl	8002c20 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800298e:	6a3b      	ldr	r3, [r7, #32]
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00c      	beq.n	80029b2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	f003 0310 	and.w	r3, r3, #16
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d007      	beq.n	80029b2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2210      	movs	r2, #16
 80029b0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00b      	beq.n	80029d4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d006      	beq.n	80029d4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2208      	movs	r2, #8
 80029cc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f930 	bl	8002c34 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d009      	beq.n	80029f2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f003 0303 	and.w	r3, r3, #3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7fd ff99 	bl	8000924 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80029f2:	6a3b      	ldr	r3, [r7, #32]
 80029f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00c      	beq.n	8002a16 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d007      	beq.n	8002a16 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2210      	movs	r2, #16
 8002a14:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	f003 0320 	and.w	r3, r3, #32
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00b      	beq.n	8002a38 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d006      	beq.n	8002a38 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2208      	movs	r2, #8
 8002a30:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f912 	bl	8002c5c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002a38:	6a3b      	ldr	r3, [r7, #32]
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d009      	beq.n	8002a56 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d002      	beq.n	8002a56 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f8f9 	bl	8002c48 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00b      	beq.n	8002a78 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0310 	and.w	r3, r3, #16
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d006      	beq.n	8002a78 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2210      	movs	r2, #16
 8002a70:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f8fc 	bl	8002c70 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00b      	beq.n	8002a9a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d006      	beq.n	8002a9a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2208      	movs	r2, #8
 8002a92:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f8f5 	bl	8002c84 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002a9a:	6a3b      	ldr	r3, [r7, #32]
 8002a9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d07b      	beq.n	8002b9c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d072      	beq.n	8002b94 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d008      	beq.n	8002aca <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002aca:	6a3b      	ldr	r3, [r7, #32]
 8002acc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	f043 0302 	orr.w	r3, r3, #2
 8002ae4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ae6:	6a3b      	ldr	r3, [r7, #32]
 8002ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d008      	beq.n	8002b02 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	f043 0304 	orr.w	r3, r3, #4
 8002b00:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d043      	beq.n	8002b94 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d03e      	beq.n	8002b94 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b1c:	2b60      	cmp	r3, #96	; 0x60
 8002b1e:	d02b      	beq.n	8002b78 <HAL_CAN_IRQHandler+0x32a>
 8002b20:	2b60      	cmp	r3, #96	; 0x60
 8002b22:	d82e      	bhi.n	8002b82 <HAL_CAN_IRQHandler+0x334>
 8002b24:	2b50      	cmp	r3, #80	; 0x50
 8002b26:	d022      	beq.n	8002b6e <HAL_CAN_IRQHandler+0x320>
 8002b28:	2b50      	cmp	r3, #80	; 0x50
 8002b2a:	d82a      	bhi.n	8002b82 <HAL_CAN_IRQHandler+0x334>
 8002b2c:	2b40      	cmp	r3, #64	; 0x40
 8002b2e:	d019      	beq.n	8002b64 <HAL_CAN_IRQHandler+0x316>
 8002b30:	2b40      	cmp	r3, #64	; 0x40
 8002b32:	d826      	bhi.n	8002b82 <HAL_CAN_IRQHandler+0x334>
 8002b34:	2b30      	cmp	r3, #48	; 0x30
 8002b36:	d010      	beq.n	8002b5a <HAL_CAN_IRQHandler+0x30c>
 8002b38:	2b30      	cmp	r3, #48	; 0x30
 8002b3a:	d822      	bhi.n	8002b82 <HAL_CAN_IRQHandler+0x334>
 8002b3c:	2b10      	cmp	r3, #16
 8002b3e:	d002      	beq.n	8002b46 <HAL_CAN_IRQHandler+0x2f8>
 8002b40:	2b20      	cmp	r3, #32
 8002b42:	d005      	beq.n	8002b50 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002b44:	e01d      	b.n	8002b82 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	f043 0308 	orr.w	r3, r3, #8
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b4e:	e019      	b.n	8002b84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	f043 0310 	orr.w	r3, r3, #16
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b58:	e014      	b.n	8002b84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	f043 0320 	orr.w	r3, r3, #32
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b62:	e00f      	b.n	8002b84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b6c:	e00a      	b.n	8002b84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b76:	e005      	b.n	8002b84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b80:	e000      	b.n	8002b84 <HAL_CAN_IRQHandler+0x336>
            break;
 8002b82:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699a      	ldr	r2, [r3, #24]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002b92:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2204      	movs	r2, #4
 8002b9a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d008      	beq.n	8002bb4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f872 	bl	8002c98 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002bb4:	bf00      	nop
 8002bb6:	3728      	adds	r7, #40	; 0x28
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cbc:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cc8:	4013      	ands	r3, r2
 8002cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cde:	4a04      	ldr	r2, [pc, #16]	; (8002cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	60d3      	str	r3, [r2, #12]
}
 8002ce4:	bf00      	nop
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cf8:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <__NVIC_GetPriorityGrouping+0x18>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	0a1b      	lsrs	r3, r3, #8
 8002cfe:	f003 0307 	and.w	r3, r3, #7
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	e000ed00 	.word	0xe000ed00

08002d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	4603      	mov	r3, r0
 8002d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	db0b      	blt.n	8002d3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	f003 021f 	and.w	r2, r3, #31
 8002d28:	4907      	ldr	r1, [pc, #28]	; (8002d48 <__NVIC_EnableIRQ+0x38>)
 8002d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	2001      	movs	r0, #1
 8002d32:	fa00 f202 	lsl.w	r2, r0, r2
 8002d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	e000e100 	.word	0xe000e100

08002d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	6039      	str	r1, [r7, #0]
 8002d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	db0a      	blt.n	8002d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	490c      	ldr	r1, [pc, #48]	; (8002d98 <__NVIC_SetPriority+0x4c>)
 8002d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6a:	0112      	lsls	r2, r2, #4
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	440b      	add	r3, r1
 8002d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d74:	e00a      	b.n	8002d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	4908      	ldr	r1, [pc, #32]	; (8002d9c <__NVIC_SetPriority+0x50>)
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	3b04      	subs	r3, #4
 8002d84:	0112      	lsls	r2, r2, #4
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	440b      	add	r3, r1
 8002d8a:	761a      	strb	r2, [r3, #24]
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	e000e100 	.word	0xe000e100
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b089      	sub	sp, #36	; 0x24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	f1c3 0307 	rsb	r3, r3, #7
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	bf28      	it	cs
 8002dbe:	2304      	movcs	r3, #4
 8002dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	2b06      	cmp	r3, #6
 8002dc8:	d902      	bls.n	8002dd0 <NVIC_EncodePriority+0x30>
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3b03      	subs	r3, #3
 8002dce:	e000      	b.n	8002dd2 <NVIC_EncodePriority+0x32>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43da      	mvns	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	401a      	ands	r2, r3
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002de8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	fa01 f303 	lsl.w	r3, r1, r3
 8002df2:	43d9      	mvns	r1, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df8:	4313      	orrs	r3, r2
         );
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3724      	adds	r7, #36	; 0x24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
	...

08002e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e18:	d301      	bcc.n	8002e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e00f      	b.n	8002e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e1e:	4a0a      	ldr	r2, [pc, #40]	; (8002e48 <SysTick_Config+0x40>)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e26:	210f      	movs	r1, #15
 8002e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e2c:	f7ff ff8e 	bl	8002d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e30:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <SysTick_Config+0x40>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e36:	4b04      	ldr	r3, [pc, #16]	; (8002e48 <SysTick_Config+0x40>)
 8002e38:	2207      	movs	r2, #7
 8002e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	e000e010 	.word	0xe000e010

08002e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7ff ff29 	bl	8002cac <__NVIC_SetPriorityGrouping>
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b086      	sub	sp, #24
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	4603      	mov	r3, r0
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
 8002e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e74:	f7ff ff3e 	bl	8002cf4 <__NVIC_GetPriorityGrouping>
 8002e78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	68b9      	ldr	r1, [r7, #8]
 8002e7e:	6978      	ldr	r0, [r7, #20]
 8002e80:	f7ff ff8e 	bl	8002da0 <NVIC_EncodePriority>
 8002e84:	4602      	mov	r2, r0
 8002e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff ff5d 	bl	8002d4c <__NVIC_SetPriority>
}
 8002e92:	bf00      	nop
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff ff31 	bl	8002d10 <__NVIC_EnableIRQ>
}
 8002eae:	bf00      	nop
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7ff ffa2 	bl	8002e08 <SysTick_Config>
 8002ec4:	4603      	mov	r3, r0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b089      	sub	sp, #36	; 0x24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61fb      	str	r3, [r7, #28]
 8002eea:	e165      	b.n	80031b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002eec:	2201      	movs	r2, #1
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	4013      	ands	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	f040 8154 	bne.w	80031b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d005      	beq.n	8002f22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d130      	bne.n	8002f84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	2203      	movs	r2, #3
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43db      	mvns	r3, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4013      	ands	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f58:	2201      	movs	r2, #1
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	43db      	mvns	r3, r3
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4013      	ands	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	091b      	lsrs	r3, r3, #4
 8002f6e:	f003 0201 	and.w	r2, r3, #1
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 0303 	and.w	r3, r3, #3
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	d017      	beq.n	8002fc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	2203      	movs	r2, #3
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f003 0303 	and.w	r3, r3, #3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d123      	bne.n	8003014 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	08da      	lsrs	r2, r3, #3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3208      	adds	r2, #8
 8002fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	220f      	movs	r2, #15
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	691a      	ldr	r2, [r3, #16]
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4313      	orrs	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	08da      	lsrs	r2, r3, #3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3208      	adds	r2, #8
 800300e:	69b9      	ldr	r1, [r7, #24]
 8003010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	2203      	movs	r2, #3
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43db      	mvns	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 0203 	and.w	r2, r3, #3
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4313      	orrs	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 80ae 	beq.w	80031b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	4b5d      	ldr	r3, [pc, #372]	; (80031d0 <HAL_GPIO_Init+0x300>)
 800305c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305e:	4a5c      	ldr	r2, [pc, #368]	; (80031d0 <HAL_GPIO_Init+0x300>)
 8003060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003064:	6453      	str	r3, [r2, #68]	; 0x44
 8003066:	4b5a      	ldr	r3, [pc, #360]	; (80031d0 <HAL_GPIO_Init+0x300>)
 8003068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003072:	4a58      	ldr	r2, [pc, #352]	; (80031d4 <HAL_GPIO_Init+0x304>)
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	089b      	lsrs	r3, r3, #2
 8003078:	3302      	adds	r3, #2
 800307a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800307e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	220f      	movs	r2, #15
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43db      	mvns	r3, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4013      	ands	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a4f      	ldr	r2, [pc, #316]	; (80031d8 <HAL_GPIO_Init+0x308>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d025      	beq.n	80030ea <HAL_GPIO_Init+0x21a>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a4e      	ldr	r2, [pc, #312]	; (80031dc <HAL_GPIO_Init+0x30c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d01f      	beq.n	80030e6 <HAL_GPIO_Init+0x216>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a4d      	ldr	r2, [pc, #308]	; (80031e0 <HAL_GPIO_Init+0x310>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d019      	beq.n	80030e2 <HAL_GPIO_Init+0x212>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a4c      	ldr	r2, [pc, #304]	; (80031e4 <HAL_GPIO_Init+0x314>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d013      	beq.n	80030de <HAL_GPIO_Init+0x20e>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a4b      	ldr	r2, [pc, #300]	; (80031e8 <HAL_GPIO_Init+0x318>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d00d      	beq.n	80030da <HAL_GPIO_Init+0x20a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a4a      	ldr	r2, [pc, #296]	; (80031ec <HAL_GPIO_Init+0x31c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d007      	beq.n	80030d6 <HAL_GPIO_Init+0x206>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a49      	ldr	r2, [pc, #292]	; (80031f0 <HAL_GPIO_Init+0x320>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d101      	bne.n	80030d2 <HAL_GPIO_Init+0x202>
 80030ce:	2306      	movs	r3, #6
 80030d0:	e00c      	b.n	80030ec <HAL_GPIO_Init+0x21c>
 80030d2:	2307      	movs	r3, #7
 80030d4:	e00a      	b.n	80030ec <HAL_GPIO_Init+0x21c>
 80030d6:	2305      	movs	r3, #5
 80030d8:	e008      	b.n	80030ec <HAL_GPIO_Init+0x21c>
 80030da:	2304      	movs	r3, #4
 80030dc:	e006      	b.n	80030ec <HAL_GPIO_Init+0x21c>
 80030de:	2303      	movs	r3, #3
 80030e0:	e004      	b.n	80030ec <HAL_GPIO_Init+0x21c>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e002      	b.n	80030ec <HAL_GPIO_Init+0x21c>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <HAL_GPIO_Init+0x21c>
 80030ea:	2300      	movs	r3, #0
 80030ec:	69fa      	ldr	r2, [r7, #28]
 80030ee:	f002 0203 	and.w	r2, r2, #3
 80030f2:	0092      	lsls	r2, r2, #2
 80030f4:	4093      	lsls	r3, r2
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030fc:	4935      	ldr	r1, [pc, #212]	; (80031d4 <HAL_GPIO_Init+0x304>)
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	089b      	lsrs	r3, r3, #2
 8003102:	3302      	adds	r3, #2
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800310a:	4b3a      	ldr	r3, [pc, #232]	; (80031f4 <HAL_GPIO_Init+0x324>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	43db      	mvns	r3, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4013      	ands	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800312e:	4a31      	ldr	r2, [pc, #196]	; (80031f4 <HAL_GPIO_Init+0x324>)
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003134:	4b2f      	ldr	r3, [pc, #188]	; (80031f4 <HAL_GPIO_Init+0x324>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	43db      	mvns	r3, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4013      	ands	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003158:	4a26      	ldr	r2, [pc, #152]	; (80031f4 <HAL_GPIO_Init+0x324>)
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800315e:	4b25      	ldr	r3, [pc, #148]	; (80031f4 <HAL_GPIO_Init+0x324>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	43db      	mvns	r3, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4013      	ands	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003182:	4a1c      	ldr	r2, [pc, #112]	; (80031f4 <HAL_GPIO_Init+0x324>)
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003188:	4b1a      	ldr	r3, [pc, #104]	; (80031f4 <HAL_GPIO_Init+0x324>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	43db      	mvns	r3, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4013      	ands	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031ac:	4a11      	ldr	r2, [pc, #68]	; (80031f4 <HAL_GPIO_Init+0x324>)
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	3301      	adds	r3, #1
 80031b6:	61fb      	str	r3, [r7, #28]
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	2b0f      	cmp	r3, #15
 80031bc:	f67f ae96 	bls.w	8002eec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031c0:	bf00      	nop
 80031c2:	bf00      	nop
 80031c4:	3724      	adds	r7, #36	; 0x24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40013800 	.word	0x40013800
 80031d8:	40020000 	.word	0x40020000
 80031dc:	40020400 	.word	0x40020400
 80031e0:	40020800 	.word	0x40020800
 80031e4:	40020c00 	.word	0x40020c00
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40021400 	.word	0x40021400
 80031f0:	40021800 	.word	0x40021800
 80031f4:	40013c00 	.word	0x40013c00

080031f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	460b      	mov	r3, r1
 8003202:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	887b      	ldrh	r3, [r7, #2]
 800320a:	4013      	ands	r3, r2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003210:	2301      	movs	r3, #1
 8003212:	73fb      	strb	r3, [r7, #15]
 8003214:	e001      	b.n	800321a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003216:	2300      	movs	r3, #0
 8003218:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800321a:	7bfb      	ldrb	r3, [r7, #15]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	807b      	strh	r3, [r7, #2]
 8003234:	4613      	mov	r3, r2
 8003236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003238:	787b      	ldrb	r3, [r7, #1]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800323e:	887a      	ldrh	r2, [r7, #2]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003244:	e003      	b.n	800324e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003246:	887b      	ldrh	r3, [r7, #2]
 8003248:	041a      	lsls	r2, r3, #16
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	619a      	str	r2, [r3, #24]
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
	...

0800325c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003266:	4b08      	ldr	r3, [pc, #32]	; (8003288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003268:	695a      	ldr	r2, [r3, #20]
 800326a:	88fb      	ldrh	r3, [r7, #6]
 800326c:	4013      	ands	r3, r2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d006      	beq.n	8003280 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003272:	4a05      	ldr	r2, [pc, #20]	; (8003288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003274:	88fb      	ldrh	r3, [r7, #6]
 8003276:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003278:	88fb      	ldrh	r3, [r7, #6]
 800327a:	4618      	mov	r0, r3
 800327c:	f7fd ff70 	bl	8001160 <HAL_GPIO_EXTI_Callback>
  }
}
 8003280:	bf00      	nop
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40013c00 	.word	0x40013c00

0800328c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e12b      	b.n	80034f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d106      	bne.n	80032b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7fe f870 	bl	8001398 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2224      	movs	r2, #36	; 0x24
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0201 	bic.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032f0:	f000 fdc0 	bl	8003e74 <HAL_RCC_GetPCLK1Freq>
 80032f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	4a81      	ldr	r2, [pc, #516]	; (8003500 <HAL_I2C_Init+0x274>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d807      	bhi.n	8003310 <HAL_I2C_Init+0x84>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4a80      	ldr	r2, [pc, #512]	; (8003504 <HAL_I2C_Init+0x278>)
 8003304:	4293      	cmp	r3, r2
 8003306:	bf94      	ite	ls
 8003308:	2301      	movls	r3, #1
 800330a:	2300      	movhi	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	e006      	b.n	800331e <HAL_I2C_Init+0x92>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4a7d      	ldr	r2, [pc, #500]	; (8003508 <HAL_I2C_Init+0x27c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	bf94      	ite	ls
 8003318:	2301      	movls	r3, #1
 800331a:	2300      	movhi	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e0e7      	b.n	80034f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4a78      	ldr	r2, [pc, #480]	; (800350c <HAL_I2C_Init+0x280>)
 800332a:	fba2 2303 	umull	r2, r3, r2, r3
 800332e:	0c9b      	lsrs	r3, r3, #18
 8003330:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	430a      	orrs	r2, r1
 8003344:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	4a6a      	ldr	r2, [pc, #424]	; (8003500 <HAL_I2C_Init+0x274>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d802      	bhi.n	8003360 <HAL_I2C_Init+0xd4>
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	3301      	adds	r3, #1
 800335e:	e009      	b.n	8003374 <HAL_I2C_Init+0xe8>
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003366:	fb02 f303 	mul.w	r3, r2, r3
 800336a:	4a69      	ldr	r2, [pc, #420]	; (8003510 <HAL_I2C_Init+0x284>)
 800336c:	fba2 2303 	umull	r2, r3, r2, r3
 8003370:	099b      	lsrs	r3, r3, #6
 8003372:	3301      	adds	r3, #1
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6812      	ldr	r2, [r2, #0]
 8003378:	430b      	orrs	r3, r1
 800337a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003386:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	495c      	ldr	r1, [pc, #368]	; (8003500 <HAL_I2C_Init+0x274>)
 8003390:	428b      	cmp	r3, r1
 8003392:	d819      	bhi.n	80033c8 <HAL_I2C_Init+0x13c>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	1e59      	subs	r1, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	fbb1 f3f3 	udiv	r3, r1, r3
 80033a2:	1c59      	adds	r1, r3, #1
 80033a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033a8:	400b      	ands	r3, r1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <HAL_I2C_Init+0x138>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	1e59      	subs	r1, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80033bc:	3301      	adds	r3, #1
 80033be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c2:	e051      	b.n	8003468 <HAL_I2C_Init+0x1dc>
 80033c4:	2304      	movs	r3, #4
 80033c6:	e04f      	b.n	8003468 <HAL_I2C_Init+0x1dc>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d111      	bne.n	80033f4 <HAL_I2C_Init+0x168>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	1e58      	subs	r0, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6859      	ldr	r1, [r3, #4]
 80033d8:	460b      	mov	r3, r1
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	440b      	add	r3, r1
 80033de:	fbb0 f3f3 	udiv	r3, r0, r3
 80033e2:	3301      	adds	r3, #1
 80033e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf0c      	ite	eq
 80033ec:	2301      	moveq	r3, #1
 80033ee:	2300      	movne	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	e012      	b.n	800341a <HAL_I2C_Init+0x18e>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	1e58      	subs	r0, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6859      	ldr	r1, [r3, #4]
 80033fc:	460b      	mov	r3, r1
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	0099      	lsls	r1, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	fbb0 f3f3 	udiv	r3, r0, r3
 800340a:	3301      	adds	r3, #1
 800340c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003410:	2b00      	cmp	r3, #0
 8003412:	bf0c      	ite	eq
 8003414:	2301      	moveq	r3, #1
 8003416:	2300      	movne	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_I2C_Init+0x196>
 800341e:	2301      	movs	r3, #1
 8003420:	e022      	b.n	8003468 <HAL_I2C_Init+0x1dc>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10e      	bne.n	8003448 <HAL_I2C_Init+0x1bc>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1e58      	subs	r0, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6859      	ldr	r1, [r3, #4]
 8003432:	460b      	mov	r3, r1
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	440b      	add	r3, r1
 8003438:	fbb0 f3f3 	udiv	r3, r0, r3
 800343c:	3301      	adds	r3, #1
 800343e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003446:	e00f      	b.n	8003468 <HAL_I2C_Init+0x1dc>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	1e58      	subs	r0, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6859      	ldr	r1, [r3, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	0099      	lsls	r1, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	fbb0 f3f3 	udiv	r3, r0, r3
 800345e:	3301      	adds	r3, #1
 8003460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003464:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	6809      	ldr	r1, [r1, #0]
 800346c:	4313      	orrs	r3, r2
 800346e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69da      	ldr	r2, [r3, #28]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003496:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6911      	ldr	r1, [r2, #16]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	68d2      	ldr	r2, [r2, #12]
 80034a2:	4311      	orrs	r1, r2
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6812      	ldr	r2, [r2, #0]
 80034a8:	430b      	orrs	r3, r1
 80034aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	695a      	ldr	r2, [r3, #20]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0201 	orr.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2220      	movs	r2, #32
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	000186a0 	.word	0x000186a0
 8003504:	001e847f 	.word	0x001e847f
 8003508:	003d08ff 	.word	0x003d08ff
 800350c:	431bde83 	.word	0x431bde83
 8003510:	10624dd3 	.word	0x10624dd3

08003514 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b088      	sub	sp, #32
 8003518:	af02      	add	r7, sp, #8
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	607a      	str	r2, [r7, #4]
 800351e:	461a      	mov	r2, r3
 8003520:	460b      	mov	r3, r1
 8003522:	817b      	strh	r3, [r7, #10]
 8003524:	4613      	mov	r3, r2
 8003526:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003528:	f7fe f948 	bl	80017bc <HAL_GetTick>
 800352c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b20      	cmp	r3, #32
 8003538:	f040 80e0 	bne.w	80036fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	2319      	movs	r3, #25
 8003542:	2201      	movs	r2, #1
 8003544:	4970      	ldr	r1, [pc, #448]	; (8003708 <HAL_I2C_Master_Transmit+0x1f4>)
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 f964 	bl	8003814 <I2C_WaitOnFlagUntilTimeout>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003552:	2302      	movs	r3, #2
 8003554:	e0d3      	b.n	80036fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800355c:	2b01      	cmp	r3, #1
 800355e:	d101      	bne.n	8003564 <HAL_I2C_Master_Transmit+0x50>
 8003560:	2302      	movs	r3, #2
 8003562:	e0cc      	b.n	80036fe <HAL_I2C_Master_Transmit+0x1ea>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b01      	cmp	r3, #1
 8003578:	d007      	beq.n	800358a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f042 0201 	orr.w	r2, r2, #1
 8003588:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003598:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2221      	movs	r2, #33	; 0x21
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2210      	movs	r2, #16
 80035a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	893a      	ldrh	r2, [r7, #8]
 80035ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	4a50      	ldr	r2, [pc, #320]	; (800370c <HAL_I2C_Master_Transmit+0x1f8>)
 80035ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035cc:	8979      	ldrh	r1, [r7, #10]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	6a3a      	ldr	r2, [r7, #32]
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 f89c 	bl	8003710 <I2C_MasterRequestWrite>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e08d      	b.n	80036fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035e2:	2300      	movs	r3, #0
 80035e4:	613b      	str	r3, [r7, #16]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	613b      	str	r3, [r7, #16]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80035f8:	e066      	b.n	80036c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	6a39      	ldr	r1, [r7, #32]
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 f9de 	bl	80039c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00d      	beq.n	8003626 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	2b04      	cmp	r3, #4
 8003610:	d107      	bne.n	8003622 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003620:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e06b      	b.n	80036fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	781a      	ldrb	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003640:	b29b      	uxth	r3, r3
 8003642:	3b01      	subs	r3, #1
 8003644:	b29a      	uxth	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b04      	cmp	r3, #4
 8003662:	d11b      	bne.n	800369c <HAL_I2C_Master_Transmit+0x188>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003668:	2b00      	cmp	r3, #0
 800366a:	d017      	beq.n	800369c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	781a      	ldrb	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	1c5a      	adds	r2, r3, #1
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003686:	b29b      	uxth	r3, r3
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	6a39      	ldr	r1, [r7, #32]
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 f9ce 	bl	8003a42 <I2C_WaitOnBTFFlagUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00d      	beq.n	80036c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d107      	bne.n	80036c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e01a      	b.n	80036fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d194      	bne.n	80035fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	e000      	b.n	80036fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80036fc:	2302      	movs	r3, #2
  }
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	00100002 	.word	0x00100002
 800370c:	ffff0000 	.word	0xffff0000

08003710 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af02      	add	r7, sp, #8
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	603b      	str	r3, [r7, #0]
 800371c:	460b      	mov	r3, r1
 800371e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003724:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2b08      	cmp	r3, #8
 800372a:	d006      	beq.n	800373a <I2C_MasterRequestWrite+0x2a>
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d003      	beq.n	800373a <I2C_MasterRequestWrite+0x2a>
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003738:	d108      	bne.n	800374c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	e00b      	b.n	8003764 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003750:	2b12      	cmp	r3, #18
 8003752:	d107      	bne.n	8003764 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003762:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 f84f 	bl	8003814 <I2C_WaitOnFlagUntilTimeout>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00d      	beq.n	8003798 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800378a:	d103      	bne.n	8003794 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003792:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e035      	b.n	8003804 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037a0:	d108      	bne.n	80037b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037a2:	897b      	ldrh	r3, [r7, #10]
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	461a      	mov	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037b0:	611a      	str	r2, [r3, #16]
 80037b2:	e01b      	b.n	80037ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037b4:	897b      	ldrh	r3, [r7, #10]
 80037b6:	11db      	asrs	r3, r3, #7
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	f003 0306 	and.w	r3, r3, #6
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	f063 030f 	orn	r3, r3, #15
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	490e      	ldr	r1, [pc, #56]	; (800380c <I2C_MasterRequestWrite+0xfc>)
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 f875 	bl	80038c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e010      	b.n	8003804 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037e2:	897b      	ldrh	r3, [r7, #10]
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	4907      	ldr	r1, [pc, #28]	; (8003810 <I2C_MasterRequestWrite+0x100>)
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 f865 	bl	80038c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e000      	b.n	8003804 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3718      	adds	r7, #24
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	00010008 	.word	0x00010008
 8003810:	00010002 	.word	0x00010002

08003814 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	603b      	str	r3, [r7, #0]
 8003820:	4613      	mov	r3, r2
 8003822:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003824:	e025      	b.n	8003872 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800382c:	d021      	beq.n	8003872 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800382e:	f7fd ffc5 	bl	80017bc <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d302      	bcc.n	8003844 <I2C_WaitOnFlagUntilTimeout+0x30>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d116      	bne.n	8003872 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2220      	movs	r2, #32
 800384e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	f043 0220 	orr.w	r2, r3, #32
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e023      	b.n	80038ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	0c1b      	lsrs	r3, r3, #16
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b01      	cmp	r3, #1
 800387a:	d10d      	bne.n	8003898 <I2C_WaitOnFlagUntilTimeout+0x84>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	43da      	mvns	r2, r3
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	4013      	ands	r3, r2
 8003888:	b29b      	uxth	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	bf0c      	ite	eq
 800388e:	2301      	moveq	r3, #1
 8003890:	2300      	movne	r3, #0
 8003892:	b2db      	uxtb	r3, r3
 8003894:	461a      	mov	r2, r3
 8003896:	e00c      	b.n	80038b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	43da      	mvns	r2, r3
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	4013      	ands	r3, r2
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	bf0c      	ite	eq
 80038aa:	2301      	moveq	r3, #1
 80038ac:	2300      	movne	r3, #0
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	461a      	mov	r2, r3
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d0b6      	beq.n	8003826 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b084      	sub	sp, #16
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	60f8      	str	r0, [r7, #12]
 80038ca:	60b9      	str	r1, [r7, #8]
 80038cc:	607a      	str	r2, [r7, #4]
 80038ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038d0:	e051      	b.n	8003976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e0:	d123      	bne.n	800392a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2220      	movs	r2, #32
 8003906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	f043 0204 	orr.w	r2, r3, #4
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e046      	b.n	80039b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003930:	d021      	beq.n	8003976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003932:	f7fd ff43 	bl	80017bc <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	429a      	cmp	r2, r3
 8003940:	d302      	bcc.n	8003948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d116      	bne.n	8003976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2220      	movs	r2, #32
 8003952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	f043 0220 	orr.w	r2, r3, #32
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e020      	b.n	80039b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	0c1b      	lsrs	r3, r3, #16
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b01      	cmp	r3, #1
 800397e:	d10c      	bne.n	800399a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	43da      	mvns	r2, r3
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	4013      	ands	r3, r2
 800398c:	b29b      	uxth	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	bf14      	ite	ne
 8003992:	2301      	movne	r3, #1
 8003994:	2300      	moveq	r3, #0
 8003996:	b2db      	uxtb	r3, r3
 8003998:	e00b      	b.n	80039b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	43da      	mvns	r2, r3
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	4013      	ands	r3, r2
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	bf14      	ite	ne
 80039ac:	2301      	movne	r3, #1
 80039ae:	2300      	moveq	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d18d      	bne.n	80038d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039cc:	e02d      	b.n	8003a2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 f878 	bl	8003ac4 <I2C_IsAcknowledgeFailed>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e02d      	b.n	8003a3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039e4:	d021      	beq.n	8003a2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039e6:	f7fd fee9 	bl	80017bc <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d302      	bcc.n	80039fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d116      	bne.n	8003a2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2220      	movs	r2, #32
 8003a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f043 0220 	orr.w	r2, r3, #32
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e007      	b.n	8003a3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a34:	2b80      	cmp	r3, #128	; 0x80
 8003a36:	d1ca      	bne.n	80039ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b084      	sub	sp, #16
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	60f8      	str	r0, [r7, #12]
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a4e:	e02d      	b.n	8003aac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 f837 	bl	8003ac4 <I2C_IsAcknowledgeFailed>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e02d      	b.n	8003abc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a66:	d021      	beq.n	8003aac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a68:	f7fd fea8 	bl	80017bc <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d302      	bcc.n	8003a7e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d116      	bne.n	8003aac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	f043 0220 	orr.w	r2, r3, #32
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e007      	b.n	8003abc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	f003 0304 	and.w	r3, r3, #4
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d1ca      	bne.n	8003a50 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ada:	d11b      	bne.n	8003b14 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ae4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	f043 0204 	orr.w	r2, r3, #4
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e000      	b.n	8003b16 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
	...

08003b24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d101      	bne.n	8003b38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e0cc      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b38:	4b68      	ldr	r3, [pc, #416]	; (8003cdc <HAL_RCC_ClockConfig+0x1b8>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d90c      	bls.n	8003b60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b46:	4b65      	ldr	r3, [pc, #404]	; (8003cdc <HAL_RCC_ClockConfig+0x1b8>)
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4e:	4b63      	ldr	r3, [pc, #396]	; (8003cdc <HAL_RCC_ClockConfig+0x1b8>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d001      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e0b8      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d020      	beq.n	8003bae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d005      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b78:	4b59      	ldr	r3, [pc, #356]	; (8003ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	4a58      	ldr	r2, [pc, #352]	; (8003ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d005      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b90:	4b53      	ldr	r3, [pc, #332]	; (8003ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	4a52      	ldr	r2, [pc, #328]	; (8003ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b9c:	4b50      	ldr	r3, [pc, #320]	; (8003ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	494d      	ldr	r1, [pc, #308]	; (8003ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d044      	beq.n	8003c44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d107      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc2:	4b47      	ldr	r3, [pc, #284]	; (8003ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d119      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e07f      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d003      	beq.n	8003be2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bde:	2b03      	cmp	r3, #3
 8003be0:	d107      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003be2:	4b3f      	ldr	r3, [pc, #252]	; (8003ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d109      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e06f      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf2:	4b3b      	ldr	r3, [pc, #236]	; (8003ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e067      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c02:	4b37      	ldr	r3, [pc, #220]	; (8003ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f023 0203 	bic.w	r2, r3, #3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	4934      	ldr	r1, [pc, #208]	; (8003ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c14:	f7fd fdd2 	bl	80017bc <HAL_GetTick>
 8003c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c1a:	e00a      	b.n	8003c32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c1c:	f7fd fdce 	bl	80017bc <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e04f      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c32:	4b2b      	ldr	r3, [pc, #172]	; (8003ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 020c 	and.w	r2, r3, #12
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d1eb      	bne.n	8003c1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c44:	4b25      	ldr	r3, [pc, #148]	; (8003cdc <HAL_RCC_ClockConfig+0x1b8>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d20c      	bcs.n	8003c6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c52:	4b22      	ldr	r3, [pc, #136]	; (8003cdc <HAL_RCC_ClockConfig+0x1b8>)
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	b2d2      	uxtb	r2, r2
 8003c58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c5a:	4b20      	ldr	r3, [pc, #128]	; (8003cdc <HAL_RCC_ClockConfig+0x1b8>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d001      	beq.n	8003c6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e032      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d008      	beq.n	8003c8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c78:	4b19      	ldr	r3, [pc, #100]	; (8003ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	4916      	ldr	r1, [pc, #88]	; (8003ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0308 	and.w	r3, r3, #8
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d009      	beq.n	8003caa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c96:	4b12      	ldr	r3, [pc, #72]	; (8003ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	490e      	ldr	r1, [pc, #56]	; (8003ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003caa:	f000 f821 	bl	8003cf0 <HAL_RCC_GetSysClockFreq>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	091b      	lsrs	r3, r3, #4
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	490a      	ldr	r1, [pc, #40]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8003cbc:	5ccb      	ldrb	r3, [r1, r3]
 8003cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc2:	4a09      	ldr	r2, [pc, #36]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cc6:	4b09      	ldr	r3, [pc, #36]	; (8003cec <HAL_RCC_ClockConfig+0x1c8>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fd fd32 	bl	8001734 <HAL_InitTick>

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	40023c00 	.word	0x40023c00
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	080053b0 	.word	0x080053b0
 8003ce8:	20000000 	.word	0x20000000
 8003cec:	20000004 	.word	0x20000004

08003cf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cf0:	b5b0      	push	{r4, r5, r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	6079      	str	r1, [r7, #4]
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	60f9      	str	r1, [r7, #12]
 8003cfe:	2100      	movs	r1, #0
 8003d00:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003d02:	2100      	movs	r1, #0
 8003d04:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d06:	4952      	ldr	r1, [pc, #328]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d08:	6889      	ldr	r1, [r1, #8]
 8003d0a:	f001 010c 	and.w	r1, r1, #12
 8003d0e:	2908      	cmp	r1, #8
 8003d10:	d00d      	beq.n	8003d2e <HAL_RCC_GetSysClockFreq+0x3e>
 8003d12:	2908      	cmp	r1, #8
 8003d14:	f200 8094 	bhi.w	8003e40 <HAL_RCC_GetSysClockFreq+0x150>
 8003d18:	2900      	cmp	r1, #0
 8003d1a:	d002      	beq.n	8003d22 <HAL_RCC_GetSysClockFreq+0x32>
 8003d1c:	2904      	cmp	r1, #4
 8003d1e:	d003      	beq.n	8003d28 <HAL_RCC_GetSysClockFreq+0x38>
 8003d20:	e08e      	b.n	8003e40 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d22:	4b4c      	ldr	r3, [pc, #304]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x164>)
 8003d24:	60bb      	str	r3, [r7, #8]
       break;
 8003d26:	e08e      	b.n	8003e46 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d28:	4b4b      	ldr	r3, [pc, #300]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x168>)
 8003d2a:	60bb      	str	r3, [r7, #8]
      break;
 8003d2c:	e08b      	b.n	8003e46 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d2e:	4948      	ldr	r1, [pc, #288]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d30:	6849      	ldr	r1, [r1, #4]
 8003d32:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003d36:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d38:	4945      	ldr	r1, [pc, #276]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d3a:	6849      	ldr	r1, [r1, #4]
 8003d3c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003d40:	2900      	cmp	r1, #0
 8003d42:	d024      	beq.n	8003d8e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d44:	4942      	ldr	r1, [pc, #264]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d46:	6849      	ldr	r1, [r1, #4]
 8003d48:	0989      	lsrs	r1, r1, #6
 8003d4a:	4608      	mov	r0, r1
 8003d4c:	f04f 0100 	mov.w	r1, #0
 8003d50:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003d54:	f04f 0500 	mov.w	r5, #0
 8003d58:	ea00 0204 	and.w	r2, r0, r4
 8003d5c:	ea01 0305 	and.w	r3, r1, r5
 8003d60:	493d      	ldr	r1, [pc, #244]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x168>)
 8003d62:	fb01 f003 	mul.w	r0, r1, r3
 8003d66:	2100      	movs	r1, #0
 8003d68:	fb01 f102 	mul.w	r1, r1, r2
 8003d6c:	1844      	adds	r4, r0, r1
 8003d6e:	493a      	ldr	r1, [pc, #232]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x168>)
 8003d70:	fba2 0101 	umull	r0, r1, r2, r1
 8003d74:	1863      	adds	r3, r4, r1
 8003d76:	4619      	mov	r1, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	f04f 0300 	mov.w	r3, #0
 8003d80:	f7fc fa4a 	bl	8000218 <__aeabi_uldivmod>
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	4613      	mov	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	e04a      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d8e:	4b30      	ldr	r3, [pc, #192]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	099b      	lsrs	r3, r3, #6
 8003d94:	461a      	mov	r2, r3
 8003d96:	f04f 0300 	mov.w	r3, #0
 8003d9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d9e:	f04f 0100 	mov.w	r1, #0
 8003da2:	ea02 0400 	and.w	r4, r2, r0
 8003da6:	ea03 0501 	and.w	r5, r3, r1
 8003daa:	4620      	mov	r0, r4
 8003dac:	4629      	mov	r1, r5
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	f04f 0300 	mov.w	r3, #0
 8003db6:	014b      	lsls	r3, r1, #5
 8003db8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003dbc:	0142      	lsls	r2, r0, #5
 8003dbe:	4610      	mov	r0, r2
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	1b00      	subs	r0, r0, r4
 8003dc4:	eb61 0105 	sbc.w	r1, r1, r5
 8003dc8:	f04f 0200 	mov.w	r2, #0
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	018b      	lsls	r3, r1, #6
 8003dd2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003dd6:	0182      	lsls	r2, r0, #6
 8003dd8:	1a12      	subs	r2, r2, r0
 8003dda:	eb63 0301 	sbc.w	r3, r3, r1
 8003dde:	f04f 0000 	mov.w	r0, #0
 8003de2:	f04f 0100 	mov.w	r1, #0
 8003de6:	00d9      	lsls	r1, r3, #3
 8003de8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dec:	00d0      	lsls	r0, r2, #3
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	1912      	adds	r2, r2, r4
 8003df4:	eb45 0303 	adc.w	r3, r5, r3
 8003df8:	f04f 0000 	mov.w	r0, #0
 8003dfc:	f04f 0100 	mov.w	r1, #0
 8003e00:	0299      	lsls	r1, r3, #10
 8003e02:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003e06:	0290      	lsls	r0, r2, #10
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4610      	mov	r0, r2
 8003e0e:	4619      	mov	r1, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	461a      	mov	r2, r3
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	f7fc f9fe 	bl	8000218 <__aeabi_uldivmod>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	460b      	mov	r3, r1
 8003e20:	4613      	mov	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e24:	4b0a      	ldr	r3, [pc, #40]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	0c1b      	lsrs	r3, r3, #16
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	3301      	adds	r3, #1
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3c:	60bb      	str	r3, [r7, #8]
      break;
 8003e3e:	e002      	b.n	8003e46 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e40:	4b04      	ldr	r3, [pc, #16]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x164>)
 8003e42:	60bb      	str	r3, [r7, #8]
      break;
 8003e44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e46:	68bb      	ldr	r3, [r7, #8]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bdb0      	pop	{r4, r5, r7, pc}
 8003e50:	40023800 	.word	0x40023800
 8003e54:	00f42400 	.word	0x00f42400
 8003e58:	017d7840 	.word	0x017d7840

08003e5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e60:	4b03      	ldr	r3, [pc, #12]	; (8003e70 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e62:	681b      	ldr	r3, [r3, #0]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	20000000 	.word	0x20000000

08003e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e78:	f7ff fff0 	bl	8003e5c <HAL_RCC_GetHCLKFreq>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	0a9b      	lsrs	r3, r3, #10
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	4903      	ldr	r1, [pc, #12]	; (8003e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e8a:	5ccb      	ldrb	r3, [r1, r3]
 8003e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40023800 	.word	0x40023800
 8003e98:	080053c0 	.word	0x080053c0

08003e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ea0:	f7ff ffdc 	bl	8003e5c <HAL_RCC_GetHCLKFreq>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	0b5b      	lsrs	r3, r3, #13
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	4903      	ldr	r1, [pc, #12]	; (8003ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eb2:	5ccb      	ldrb	r3, [r1, r3]
 8003eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	080053c0 	.word	0x080053c0

08003ec4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e270      	b.n	80043b8 <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d075      	beq.n	8003fce <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ee2:	4ba3      	ldr	r3, [pc, #652]	; (8004170 <HAL_RCC_OscConfig+0x2ac>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 030c 	and.w	r3, r3, #12
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d00c      	beq.n	8003f08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eee:	4ba0      	ldr	r3, [pc, #640]	; (8004170 <HAL_RCC_OscConfig+0x2ac>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d112      	bne.n	8003f20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003efa:	4b9d      	ldr	r3, [pc, #628]	; (8004170 <HAL_RCC_OscConfig+0x2ac>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f06:	d10b      	bne.n	8003f20 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f08:	4b99      	ldr	r3, [pc, #612]	; (8004170 <HAL_RCC_OscConfig+0x2ac>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d05b      	beq.n	8003fcc <HAL_RCC_OscConfig+0x108>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d157      	bne.n	8003fcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e24b      	b.n	80043b8 <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f28:	d106      	bne.n	8003f38 <HAL_RCC_OscConfig+0x74>
 8003f2a:	4b91      	ldr	r3, [pc, #580]	; (8004170 <HAL_RCC_OscConfig+0x2ac>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a90      	ldr	r2, [pc, #576]	; (8004170 <HAL_RCC_OscConfig+0x2ac>)
 8003f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	e01d      	b.n	8003f74 <HAL_RCC_OscConfig+0xb0>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f40:	d10c      	bne.n	8003f5c <HAL_RCC_OscConfig+0x98>
 8003f42:	4b8b      	ldr	r3, [pc, #556]	; (8004170 <HAL_RCC_OscConfig+0x2ac>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a8a      	ldr	r2, [pc, #552]	; (8004170 <HAL_RCC_OscConfig+0x2ac>)
 8003f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	4b88      	ldr	r3, [pc, #544]	; (8004170 <HAL_RCC_OscConfig+0x2ac>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a87      	ldr	r2, [pc, #540]	; (8004170 <HAL_RCC_OscConfig+0x2ac>)
 8003f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	e00b      	b.n	8003f74 <HAL_RCC_OscConfig+0xb0>
 8003f5c:	4b84      	ldr	r3, [pc, #528]	; (8004170 <HAL_RCC_OscConfig+0x2ac>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a83      	ldr	r2, [pc, #524]	; (8004170 <HAL_RCC_OscConfig+0x2ac>)
 8003f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f66:	6013      	str	r3, [r2, #0]
 8003f68:	4b81      	ldr	r3, [pc, #516]	; (8004170 <HAL_RCC_OscConfig+0x2ac>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a80      	ldr	r2, [pc, #512]	; (8004170 <HAL_RCC_OscConfig+0x2ac>)
 8003f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d013      	beq.n	8003fa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7c:	f7fd fc1e 	bl	80017bc <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f84:	f7fd fc1a 	bl	80017bc <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b64      	cmp	r3, #100	; 0x64
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e210      	b.n	80043b8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f96:	4b76      	ldr	r3, [pc, #472]	; (8004170 <HAL_RCC_OscConfig+0x2ac>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0f0      	beq.n	8003f84 <HAL_RCC_OscConfig+0xc0>
 8003fa2:	e014      	b.n	8003fce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa4:	f7fd fc0a 	bl	80017bc <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fac:	f7fd fc06 	bl	80017bc <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b64      	cmp	r3, #100	; 0x64
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e1fc      	b.n	80043b8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fbe:	4b6c      	ldr	r3, [pc, #432]	; (8004170 <HAL_RCC_OscConfig+0x2ac>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1f0      	bne.n	8003fac <HAL_RCC_OscConfig+0xe8>
 8003fca:	e000      	b.n	8003fce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d063      	beq.n	80040a2 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003fda:	4b65      	ldr	r3, [pc, #404]	; (8004170 <HAL_RCC_OscConfig+0x2ac>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f003 030c 	and.w	r3, r3, #12
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00b      	beq.n	8003ffe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fe6:	4b62      	ldr	r3, [pc, #392]	; (8004170 <HAL_RCC_OscConfig+0x2ac>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d11c      	bne.n	800402c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ff2:	4b5f      	ldr	r3, [pc, #380]	; (8004170 <HAL_RCC_OscConfig+0x2ac>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d116      	bne.n	800402c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ffe:	4b5c      	ldr	r3, [pc, #368]	; (8004170 <HAL_RCC_OscConfig+0x2ac>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d005      	beq.n	8004016 <HAL_RCC_OscConfig+0x152>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d001      	beq.n	8004016 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e1d0      	b.n	80043b8 <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004016:	4b56      	ldr	r3, [pc, #344]	; (8004170 <HAL_RCC_OscConfig+0x2ac>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	4952      	ldr	r1, [pc, #328]	; (8004170 <HAL_RCC_OscConfig+0x2ac>)
 8004026:	4313      	orrs	r3, r2
 8004028:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800402a:	e03a      	b.n	80040a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d020      	beq.n	8004076 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004034:	4b4f      	ldr	r3, [pc, #316]	; (8004174 <HAL_RCC_OscConfig+0x2b0>)
 8004036:	2201      	movs	r2, #1
 8004038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403a:	f7fd fbbf 	bl	80017bc <HAL_GetTick>
 800403e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004040:	e008      	b.n	8004054 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004042:	f7fd fbbb 	bl	80017bc <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e1b1      	b.n	80043b8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004054:	4b46      	ldr	r3, [pc, #280]	; (8004170 <HAL_RCC_OscConfig+0x2ac>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0f0      	beq.n	8004042 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004060:	4b43      	ldr	r3, [pc, #268]	; (8004170 <HAL_RCC_OscConfig+0x2ac>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	4940      	ldr	r1, [pc, #256]	; (8004170 <HAL_RCC_OscConfig+0x2ac>)
 8004070:	4313      	orrs	r3, r2
 8004072:	600b      	str	r3, [r1, #0]
 8004074:	e015      	b.n	80040a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004076:	4b3f      	ldr	r3, [pc, #252]	; (8004174 <HAL_RCC_OscConfig+0x2b0>)
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407c:	f7fd fb9e 	bl	80017bc <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004084:	f7fd fb9a 	bl	80017bc <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e190      	b.n	80043b8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004096:	4b36      	ldr	r3, [pc, #216]	; (8004170 <HAL_RCC_OscConfig+0x2ac>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1f0      	bne.n	8004084 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0308 	and.w	r3, r3, #8
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d030      	beq.n	8004110 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d016      	beq.n	80040e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040b6:	4b30      	ldr	r3, [pc, #192]	; (8004178 <HAL_RCC_OscConfig+0x2b4>)
 80040b8:	2201      	movs	r2, #1
 80040ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040bc:	f7fd fb7e 	bl	80017bc <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040c4:	f7fd fb7a 	bl	80017bc <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e170      	b.n	80043b8 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040d6:	4b26      	ldr	r3, [pc, #152]	; (8004170 <HAL_RCC_OscConfig+0x2ac>)
 80040d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0f0      	beq.n	80040c4 <HAL_RCC_OscConfig+0x200>
 80040e2:	e015      	b.n	8004110 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040e4:	4b24      	ldr	r3, [pc, #144]	; (8004178 <HAL_RCC_OscConfig+0x2b4>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ea:	f7fd fb67 	bl	80017bc <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040f2:	f7fd fb63 	bl	80017bc <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e159      	b.n	80043b8 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004104:	4b1a      	ldr	r3, [pc, #104]	; (8004170 <HAL_RCC_OscConfig+0x2ac>)
 8004106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1f0      	bne.n	80040f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 80a0 	beq.w	800425e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800411e:	2300      	movs	r3, #0
 8004120:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004122:	4b13      	ldr	r3, [pc, #76]	; (8004170 <HAL_RCC_OscConfig+0x2ac>)
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10f      	bne.n	800414e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800412e:	2300      	movs	r3, #0
 8004130:	60bb      	str	r3, [r7, #8]
 8004132:	4b0f      	ldr	r3, [pc, #60]	; (8004170 <HAL_RCC_OscConfig+0x2ac>)
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	4a0e      	ldr	r2, [pc, #56]	; (8004170 <HAL_RCC_OscConfig+0x2ac>)
 8004138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800413c:	6413      	str	r3, [r2, #64]	; 0x40
 800413e:	4b0c      	ldr	r3, [pc, #48]	; (8004170 <HAL_RCC_OscConfig+0x2ac>)
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004146:	60bb      	str	r3, [r7, #8]
 8004148:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800414a:	2301      	movs	r3, #1
 800414c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800414e:	4b0b      	ldr	r3, [pc, #44]	; (800417c <HAL_RCC_OscConfig+0x2b8>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004156:	2b00      	cmp	r3, #0
 8004158:	d121      	bne.n	800419e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800415a:	4b08      	ldr	r3, [pc, #32]	; (800417c <HAL_RCC_OscConfig+0x2b8>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a07      	ldr	r2, [pc, #28]	; (800417c <HAL_RCC_OscConfig+0x2b8>)
 8004160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004164:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004166:	f7fd fb29 	bl	80017bc <HAL_GetTick>
 800416a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416c:	e011      	b.n	8004192 <HAL_RCC_OscConfig+0x2ce>
 800416e:	bf00      	nop
 8004170:	40023800 	.word	0x40023800
 8004174:	42470000 	.word	0x42470000
 8004178:	42470e80 	.word	0x42470e80
 800417c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004180:	f7fd fb1c 	bl	80017bc <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e112      	b.n	80043b8 <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004192:	4b8b      	ldr	r3, [pc, #556]	; (80043c0 <HAL_RCC_OscConfig+0x4fc>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0f0      	beq.n	8004180 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d106      	bne.n	80041b4 <HAL_RCC_OscConfig+0x2f0>
 80041a6:	4b87      	ldr	r3, [pc, #540]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 80041a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041aa:	4a86      	ldr	r2, [pc, #536]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 80041ac:	f043 0301 	orr.w	r3, r3, #1
 80041b0:	6713      	str	r3, [r2, #112]	; 0x70
 80041b2:	e01c      	b.n	80041ee <HAL_RCC_OscConfig+0x32a>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	2b05      	cmp	r3, #5
 80041ba:	d10c      	bne.n	80041d6 <HAL_RCC_OscConfig+0x312>
 80041bc:	4b81      	ldr	r3, [pc, #516]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 80041be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c0:	4a80      	ldr	r2, [pc, #512]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 80041c2:	f043 0304 	orr.w	r3, r3, #4
 80041c6:	6713      	str	r3, [r2, #112]	; 0x70
 80041c8:	4b7e      	ldr	r3, [pc, #504]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 80041ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041cc:	4a7d      	ldr	r2, [pc, #500]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 80041ce:	f043 0301 	orr.w	r3, r3, #1
 80041d2:	6713      	str	r3, [r2, #112]	; 0x70
 80041d4:	e00b      	b.n	80041ee <HAL_RCC_OscConfig+0x32a>
 80041d6:	4b7b      	ldr	r3, [pc, #492]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 80041d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041da:	4a7a      	ldr	r2, [pc, #488]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 80041dc:	f023 0301 	bic.w	r3, r3, #1
 80041e0:	6713      	str	r3, [r2, #112]	; 0x70
 80041e2:	4b78      	ldr	r3, [pc, #480]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 80041e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e6:	4a77      	ldr	r2, [pc, #476]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 80041e8:	f023 0304 	bic.w	r3, r3, #4
 80041ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d015      	beq.n	8004222 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f6:	f7fd fae1 	bl	80017bc <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041fc:	e00a      	b.n	8004214 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041fe:	f7fd fadd 	bl	80017bc <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	f241 3288 	movw	r2, #5000	; 0x1388
 800420c:	4293      	cmp	r3, r2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e0d1      	b.n	80043b8 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004214:	4b6b      	ldr	r3, [pc, #428]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 8004216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d0ee      	beq.n	80041fe <HAL_RCC_OscConfig+0x33a>
 8004220:	e014      	b.n	800424c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004222:	f7fd facb 	bl	80017bc <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004228:	e00a      	b.n	8004240 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800422a:	f7fd fac7 	bl	80017bc <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	f241 3288 	movw	r2, #5000	; 0x1388
 8004238:	4293      	cmp	r3, r2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e0bb      	b.n	80043b8 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004240:	4b60      	ldr	r3, [pc, #384]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 8004242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1ee      	bne.n	800422a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800424c:	7dfb      	ldrb	r3, [r7, #23]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d105      	bne.n	800425e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004252:	4b5c      	ldr	r3, [pc, #368]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	4a5b      	ldr	r2, [pc, #364]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 8004258:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800425c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 80a7 	beq.w	80043b6 <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004268:	4b56      	ldr	r3, [pc, #344]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f003 030c 	and.w	r3, r3, #12
 8004270:	2b08      	cmp	r3, #8
 8004272:	d060      	beq.n	8004336 <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	2b02      	cmp	r3, #2
 800427a:	d145      	bne.n	8004308 <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800427c:	4b52      	ldr	r3, [pc, #328]	; (80043c8 <HAL_RCC_OscConfig+0x504>)
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004282:	f7fd fa9b 	bl	80017bc <HAL_GetTick>
 8004286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004288:	e008      	b.n	800429c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800428a:	f7fd fa97 	bl	80017bc <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d901      	bls.n	800429c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e08d      	b.n	80043b8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800429c:	4b49      	ldr	r3, [pc, #292]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1f0      	bne.n	800428a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	69da      	ldr	r2, [r3, #28]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	431a      	orrs	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	019b      	lsls	r3, r3, #6
 80042b8:	431a      	orrs	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042be:	085b      	lsrs	r3, r3, #1
 80042c0:	3b01      	subs	r3, #1
 80042c2:	041b      	lsls	r3, r3, #16
 80042c4:	431a      	orrs	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ca:	061b      	lsls	r3, r3, #24
 80042cc:	431a      	orrs	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d2:	071b      	lsls	r3, r3, #28
 80042d4:	493b      	ldr	r1, [pc, #236]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042da:	4b3b      	ldr	r3, [pc, #236]	; (80043c8 <HAL_RCC_OscConfig+0x504>)
 80042dc:	2201      	movs	r2, #1
 80042de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e0:	f7fd fa6c 	bl	80017bc <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042e8:	f7fd fa68 	bl	80017bc <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e05e      	b.n	80043b8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042fa:	4b32      	ldr	r3, [pc, #200]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0f0      	beq.n	80042e8 <HAL_RCC_OscConfig+0x424>
 8004306:	e056      	b.n	80043b6 <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004308:	4b2f      	ldr	r3, [pc, #188]	; (80043c8 <HAL_RCC_OscConfig+0x504>)
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430e:	f7fd fa55 	bl	80017bc <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004314:	e008      	b.n	8004328 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004316:	f7fd fa51 	bl	80017bc <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e047      	b.n	80043b8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004328:	4b26      	ldr	r3, [pc, #152]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1f0      	bne.n	8004316 <HAL_RCC_OscConfig+0x452>
 8004334:	e03f      	b.n	80043b6 <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d101      	bne.n	8004342 <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e03a      	b.n	80043b8 <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004342:	4b20      	ldr	r3, [pc, #128]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d030      	beq.n	80043b2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800435a:	429a      	cmp	r2, r3
 800435c:	d129      	bne.n	80043b2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004368:	429a      	cmp	r2, r3
 800436a:	d122      	bne.n	80043b2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004372:	4013      	ands	r3, r2
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004378:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800437a:	4293      	cmp	r3, r2
 800437c:	d119      	bne.n	80043b2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004388:	085b      	lsrs	r3, r3, #1
 800438a:	3b01      	subs	r3, #1
 800438c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800438e:	429a      	cmp	r2, r3
 8004390:	d10f      	bne.n	80043b2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800439e:	429a      	cmp	r2, r3
 80043a0:	d107      	bne.n	80043b2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ac:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d001      	beq.n	80043b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40007000 	.word	0x40007000
 80043c4:	40023800 	.word	0x40023800
 80043c8:	42470060 	.word	0x42470060

080043cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e041      	b.n	8004462 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d106      	bne.n	80043f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7fd f870 	bl	80014d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3304      	adds	r3, #4
 8004408:	4619      	mov	r1, r3
 800440a:	4610      	mov	r0, r2
 800440c:	f000 faa0 	bl	8004950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b01      	cmp	r3, #1
 800447e:	d001      	beq.n	8004484 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e04e      	b.n	8004522 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 0201 	orr.w	r2, r2, #1
 800449a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a23      	ldr	r2, [pc, #140]	; (8004530 <HAL_TIM_Base_Start_IT+0xc4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d022      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0x80>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ae:	d01d      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0x80>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a1f      	ldr	r2, [pc, #124]	; (8004534 <HAL_TIM_Base_Start_IT+0xc8>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d018      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0x80>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a1e      	ldr	r2, [pc, #120]	; (8004538 <HAL_TIM_Base_Start_IT+0xcc>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d013      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0x80>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a1c      	ldr	r2, [pc, #112]	; (800453c <HAL_TIM_Base_Start_IT+0xd0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d00e      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0x80>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a1b      	ldr	r2, [pc, #108]	; (8004540 <HAL_TIM_Base_Start_IT+0xd4>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d009      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0x80>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a19      	ldr	r2, [pc, #100]	; (8004544 <HAL_TIM_Base_Start_IT+0xd8>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d004      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0x80>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a18      	ldr	r2, [pc, #96]	; (8004548 <HAL_TIM_Base_Start_IT+0xdc>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d111      	bne.n	8004510 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b06      	cmp	r3, #6
 80044fc:	d010      	beq.n	8004520 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f042 0201 	orr.w	r2, r2, #1
 800450c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800450e:	e007      	b.n	8004520 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0201 	orr.w	r2, r2, #1
 800451e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	40010000 	.word	0x40010000
 8004534:	40000400 	.word	0x40000400
 8004538:	40000800 	.word	0x40000800
 800453c:	40000c00 	.word	0x40000c00
 8004540:	40010400 	.word	0x40010400
 8004544:	40014000 	.word	0x40014000
 8004548:	40001800 	.word	0x40001800

0800454c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b02      	cmp	r3, #2
 8004560:	d122      	bne.n	80045a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b02      	cmp	r3, #2
 800456e:	d11b      	bne.n	80045a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f06f 0202 	mvn.w	r2, #2
 8004578:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f9bf 	bl	8004912 <HAL_TIM_IC_CaptureCallback>
 8004594:	e005      	b.n	80045a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f9b1 	bl	80048fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f9c2 	bl	8004926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	2b04      	cmp	r3, #4
 80045b4:	d122      	bne.n	80045fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b04      	cmp	r3, #4
 80045c2:	d11b      	bne.n	80045fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f06f 0204 	mvn.w	r2, #4
 80045cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2202      	movs	r2, #2
 80045d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f995 	bl	8004912 <HAL_TIM_IC_CaptureCallback>
 80045e8:	e005      	b.n	80045f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f987 	bl	80048fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 f998 	bl	8004926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	f003 0308 	and.w	r3, r3, #8
 8004606:	2b08      	cmp	r3, #8
 8004608:	d122      	bne.n	8004650 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f003 0308 	and.w	r3, r3, #8
 8004614:	2b08      	cmp	r3, #8
 8004616:	d11b      	bne.n	8004650 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f06f 0208 	mvn.w	r2, #8
 8004620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2204      	movs	r2, #4
 8004626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	f003 0303 	and.w	r3, r3, #3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f96b 	bl	8004912 <HAL_TIM_IC_CaptureCallback>
 800463c:	e005      	b.n	800464a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f95d 	bl	80048fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f96e 	bl	8004926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	f003 0310 	and.w	r3, r3, #16
 800465a:	2b10      	cmp	r3, #16
 800465c:	d122      	bne.n	80046a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f003 0310 	and.w	r3, r3, #16
 8004668:	2b10      	cmp	r3, #16
 800466a:	d11b      	bne.n	80046a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f06f 0210 	mvn.w	r2, #16
 8004674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2208      	movs	r2, #8
 800467a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f941 	bl	8004912 <HAL_TIM_IC_CaptureCallback>
 8004690:	e005      	b.n	800469e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f933 	bl	80048fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f944 	bl	8004926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d10e      	bne.n	80046d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d107      	bne.n	80046d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f06f 0201 	mvn.w	r2, #1
 80046c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f90d 	bl	80048ea <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046da:	2b80      	cmp	r3, #128	; 0x80
 80046dc:	d10e      	bne.n	80046fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e8:	2b80      	cmp	r3, #128	; 0x80
 80046ea:	d107      	bne.n	80046fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 faea 	bl	8004cd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004706:	2b40      	cmp	r3, #64	; 0x40
 8004708:	d10e      	bne.n	8004728 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004714:	2b40      	cmp	r3, #64	; 0x40
 8004716:	d107      	bne.n	8004728 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f909 	bl	800493a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	f003 0320 	and.w	r3, r3, #32
 8004732:	2b20      	cmp	r3, #32
 8004734:	d10e      	bne.n	8004754 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f003 0320 	and.w	r3, r3, #32
 8004740:	2b20      	cmp	r3, #32
 8004742:	d107      	bne.n	8004754 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f06f 0220 	mvn.w	r2, #32
 800474c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fab4 	bl	8004cbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004754:	bf00      	nop
 8004756:	3708      	adds	r7, #8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004766:	2300      	movs	r3, #0
 8004768:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004770:	2b01      	cmp	r3, #1
 8004772:	d101      	bne.n	8004778 <HAL_TIM_ConfigClockSource+0x1c>
 8004774:	2302      	movs	r3, #2
 8004776:	e0b4      	b.n	80048e2 <HAL_TIM_ConfigClockSource+0x186>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004796:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800479e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047b0:	d03e      	beq.n	8004830 <HAL_TIM_ConfigClockSource+0xd4>
 80047b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047b6:	f200 8087 	bhi.w	80048c8 <HAL_TIM_ConfigClockSource+0x16c>
 80047ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047be:	f000 8086 	beq.w	80048ce <HAL_TIM_ConfigClockSource+0x172>
 80047c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c6:	d87f      	bhi.n	80048c8 <HAL_TIM_ConfigClockSource+0x16c>
 80047c8:	2b70      	cmp	r3, #112	; 0x70
 80047ca:	d01a      	beq.n	8004802 <HAL_TIM_ConfigClockSource+0xa6>
 80047cc:	2b70      	cmp	r3, #112	; 0x70
 80047ce:	d87b      	bhi.n	80048c8 <HAL_TIM_ConfigClockSource+0x16c>
 80047d0:	2b60      	cmp	r3, #96	; 0x60
 80047d2:	d050      	beq.n	8004876 <HAL_TIM_ConfigClockSource+0x11a>
 80047d4:	2b60      	cmp	r3, #96	; 0x60
 80047d6:	d877      	bhi.n	80048c8 <HAL_TIM_ConfigClockSource+0x16c>
 80047d8:	2b50      	cmp	r3, #80	; 0x50
 80047da:	d03c      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0xfa>
 80047dc:	2b50      	cmp	r3, #80	; 0x50
 80047de:	d873      	bhi.n	80048c8 <HAL_TIM_ConfigClockSource+0x16c>
 80047e0:	2b40      	cmp	r3, #64	; 0x40
 80047e2:	d058      	beq.n	8004896 <HAL_TIM_ConfigClockSource+0x13a>
 80047e4:	2b40      	cmp	r3, #64	; 0x40
 80047e6:	d86f      	bhi.n	80048c8 <HAL_TIM_ConfigClockSource+0x16c>
 80047e8:	2b30      	cmp	r3, #48	; 0x30
 80047ea:	d064      	beq.n	80048b6 <HAL_TIM_ConfigClockSource+0x15a>
 80047ec:	2b30      	cmp	r3, #48	; 0x30
 80047ee:	d86b      	bhi.n	80048c8 <HAL_TIM_ConfigClockSource+0x16c>
 80047f0:	2b20      	cmp	r3, #32
 80047f2:	d060      	beq.n	80048b6 <HAL_TIM_ConfigClockSource+0x15a>
 80047f4:	2b20      	cmp	r3, #32
 80047f6:	d867      	bhi.n	80048c8 <HAL_TIM_ConfigClockSource+0x16c>
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d05c      	beq.n	80048b6 <HAL_TIM_ConfigClockSource+0x15a>
 80047fc:	2b10      	cmp	r3, #16
 80047fe:	d05a      	beq.n	80048b6 <HAL_TIM_ConfigClockSource+0x15a>
 8004800:	e062      	b.n	80048c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6818      	ldr	r0, [r3, #0]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	6899      	ldr	r1, [r3, #8]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f000 f9b7 	bl	8004b84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004824:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	609a      	str	r2, [r3, #8]
      break;
 800482e:	e04f      	b.n	80048d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6818      	ldr	r0, [r3, #0]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	6899      	ldr	r1, [r3, #8]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	f000 f9a0 	bl	8004b84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689a      	ldr	r2, [r3, #8]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004852:	609a      	str	r2, [r3, #8]
      break;
 8004854:	e03c      	b.n	80048d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6818      	ldr	r0, [r3, #0]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	6859      	ldr	r1, [r3, #4]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	461a      	mov	r2, r3
 8004864:	f000 f914 	bl	8004a90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2150      	movs	r1, #80	; 0x50
 800486e:	4618      	mov	r0, r3
 8004870:	f000 f96d 	bl	8004b4e <TIM_ITRx_SetConfig>
      break;
 8004874:	e02c      	b.n	80048d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6818      	ldr	r0, [r3, #0]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	6859      	ldr	r1, [r3, #4]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	461a      	mov	r2, r3
 8004884:	f000 f933 	bl	8004aee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2160      	movs	r1, #96	; 0x60
 800488e:	4618      	mov	r0, r3
 8004890:	f000 f95d 	bl	8004b4e <TIM_ITRx_SetConfig>
      break;
 8004894:	e01c      	b.n	80048d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6818      	ldr	r0, [r3, #0]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	6859      	ldr	r1, [r3, #4]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	461a      	mov	r2, r3
 80048a4:	f000 f8f4 	bl	8004a90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2140      	movs	r1, #64	; 0x40
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 f94d 	bl	8004b4e <TIM_ITRx_SetConfig>
      break;
 80048b4:	e00c      	b.n	80048d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4619      	mov	r1, r3
 80048c0:	4610      	mov	r0, r2
 80048c2:	f000 f944 	bl	8004b4e <TIM_ITRx_SetConfig>
      break;
 80048c6:	e003      	b.n	80048d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	73fb      	strb	r3, [r7, #15]
      break;
 80048cc:	e000      	b.n	80048d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b083      	sub	sp, #12
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048f2:	bf00      	nop
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048fe:	b480      	push	{r7}
 8004900:	b083      	sub	sp, #12
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004906:	bf00      	nop
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004926:	b480      	push	{r7}
 8004928:	b083      	sub	sp, #12
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800492e:	bf00      	nop
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800493a:	b480      	push	{r7}
 800493c:	b083      	sub	sp, #12
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
	...

08004950 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a40      	ldr	r2, [pc, #256]	; (8004a64 <TIM_Base_SetConfig+0x114>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d013      	beq.n	8004990 <TIM_Base_SetConfig+0x40>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800496e:	d00f      	beq.n	8004990 <TIM_Base_SetConfig+0x40>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a3d      	ldr	r2, [pc, #244]	; (8004a68 <TIM_Base_SetConfig+0x118>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d00b      	beq.n	8004990 <TIM_Base_SetConfig+0x40>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a3c      	ldr	r2, [pc, #240]	; (8004a6c <TIM_Base_SetConfig+0x11c>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d007      	beq.n	8004990 <TIM_Base_SetConfig+0x40>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a3b      	ldr	r2, [pc, #236]	; (8004a70 <TIM_Base_SetConfig+0x120>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d003      	beq.n	8004990 <TIM_Base_SetConfig+0x40>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a3a      	ldr	r2, [pc, #232]	; (8004a74 <TIM_Base_SetConfig+0x124>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d108      	bne.n	80049a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004996:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a2f      	ldr	r2, [pc, #188]	; (8004a64 <TIM_Base_SetConfig+0x114>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d02b      	beq.n	8004a02 <TIM_Base_SetConfig+0xb2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b0:	d027      	beq.n	8004a02 <TIM_Base_SetConfig+0xb2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a2c      	ldr	r2, [pc, #176]	; (8004a68 <TIM_Base_SetConfig+0x118>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d023      	beq.n	8004a02 <TIM_Base_SetConfig+0xb2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a2b      	ldr	r2, [pc, #172]	; (8004a6c <TIM_Base_SetConfig+0x11c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d01f      	beq.n	8004a02 <TIM_Base_SetConfig+0xb2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a2a      	ldr	r2, [pc, #168]	; (8004a70 <TIM_Base_SetConfig+0x120>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d01b      	beq.n	8004a02 <TIM_Base_SetConfig+0xb2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a29      	ldr	r2, [pc, #164]	; (8004a74 <TIM_Base_SetConfig+0x124>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d017      	beq.n	8004a02 <TIM_Base_SetConfig+0xb2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a28      	ldr	r2, [pc, #160]	; (8004a78 <TIM_Base_SetConfig+0x128>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d013      	beq.n	8004a02 <TIM_Base_SetConfig+0xb2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a27      	ldr	r2, [pc, #156]	; (8004a7c <TIM_Base_SetConfig+0x12c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d00f      	beq.n	8004a02 <TIM_Base_SetConfig+0xb2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a26      	ldr	r2, [pc, #152]	; (8004a80 <TIM_Base_SetConfig+0x130>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d00b      	beq.n	8004a02 <TIM_Base_SetConfig+0xb2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a25      	ldr	r2, [pc, #148]	; (8004a84 <TIM_Base_SetConfig+0x134>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d007      	beq.n	8004a02 <TIM_Base_SetConfig+0xb2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a24      	ldr	r2, [pc, #144]	; (8004a88 <TIM_Base_SetConfig+0x138>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d003      	beq.n	8004a02 <TIM_Base_SetConfig+0xb2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a23      	ldr	r2, [pc, #140]	; (8004a8c <TIM_Base_SetConfig+0x13c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d108      	bne.n	8004a14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	689a      	ldr	r2, [r3, #8]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a0a      	ldr	r2, [pc, #40]	; (8004a64 <TIM_Base_SetConfig+0x114>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d003      	beq.n	8004a48 <TIM_Base_SetConfig+0xf8>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a0c      	ldr	r2, [pc, #48]	; (8004a74 <TIM_Base_SetConfig+0x124>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d103      	bne.n	8004a50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	691a      	ldr	r2, [r3, #16]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	615a      	str	r2, [r3, #20]
}
 8004a56:	bf00      	nop
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	40010000 	.word	0x40010000
 8004a68:	40000400 	.word	0x40000400
 8004a6c:	40000800 	.word	0x40000800
 8004a70:	40000c00 	.word	0x40000c00
 8004a74:	40010400 	.word	0x40010400
 8004a78:	40014000 	.word	0x40014000
 8004a7c:	40014400 	.word	0x40014400
 8004a80:	40014800 	.word	0x40014800
 8004a84:	40001800 	.word	0x40001800
 8004a88:	40001c00 	.word	0x40001c00
 8004a8c:	40002000 	.word	0x40002000

08004a90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	f023 0201 	bic.w	r2, r3, #1
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004aba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	011b      	lsls	r3, r3, #4
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f023 030a 	bic.w	r3, r3, #10
 8004acc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	621a      	str	r2, [r3, #32]
}
 8004ae2:	bf00      	nop
 8004ae4:	371c      	adds	r7, #28
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b087      	sub	sp, #28
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	60f8      	str	r0, [r7, #12]
 8004af6:	60b9      	str	r1, [r7, #8]
 8004af8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	f023 0210 	bic.w	r2, r3, #16
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	031b      	lsls	r3, r3, #12
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	621a      	str	r2, [r3, #32]
}
 8004b42:	bf00      	nop
 8004b44:	371c      	adds	r7, #28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b085      	sub	sp, #20
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
 8004b56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f043 0307 	orr.w	r3, r3, #7
 8004b70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	609a      	str	r2, [r3, #8]
}
 8004b78:	bf00      	nop
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b087      	sub	sp, #28
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
 8004b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	021a      	lsls	r2, r3, #8
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	609a      	str	r2, [r3, #8]
}
 8004bb8:	bf00      	nop
 8004bba:	371c      	adds	r7, #28
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d101      	bne.n	8004bdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	e05a      	b.n	8004c92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a21      	ldr	r2, [pc, #132]	; (8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d022      	beq.n	8004c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c28:	d01d      	beq.n	8004c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a1d      	ldr	r2, [pc, #116]	; (8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d018      	beq.n	8004c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a1b      	ldr	r2, [pc, #108]	; (8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d013      	beq.n	8004c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a1a      	ldr	r2, [pc, #104]	; (8004cac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d00e      	beq.n	8004c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a18      	ldr	r2, [pc, #96]	; (8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d009      	beq.n	8004c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a17      	ldr	r2, [pc, #92]	; (8004cb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d004      	beq.n	8004c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a15      	ldr	r2, [pc, #84]	; (8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d10c      	bne.n	8004c80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40010000 	.word	0x40010000
 8004ca4:	40000400 	.word	0x40000400
 8004ca8:	40000800 	.word	0x40000800
 8004cac:	40000c00 	.word	0x40000c00
 8004cb0:	40010400 	.word	0x40010400
 8004cb4:	40014000 	.word	0x40014000
 8004cb8:	40001800 	.word	0x40001800

08004cbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e03f      	b.n	8004d76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d106      	bne.n	8004d10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7fc fc0c 	bl	8001528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2224      	movs	r2, #36	; 0x24
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 f929 	bl	8004f80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	691a      	ldr	r2, [r3, #16]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695a      	ldr	r2, [r3, #20]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68da      	ldr	r2, [r3, #12]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b08a      	sub	sp, #40	; 0x28
 8004d82:	af02      	add	r7, sp, #8
 8004d84:	60f8      	str	r0, [r7, #12]
 8004d86:	60b9      	str	r1, [r7, #8]
 8004d88:	603b      	str	r3, [r7, #0]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b20      	cmp	r3, #32
 8004d9c:	d17c      	bne.n	8004e98 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d002      	beq.n	8004daa <HAL_UART_Transmit+0x2c>
 8004da4:	88fb      	ldrh	r3, [r7, #6]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e075      	b.n	8004e9a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d101      	bne.n	8004dbc <HAL_UART_Transmit+0x3e>
 8004db8:	2302      	movs	r3, #2
 8004dba:	e06e      	b.n	8004e9a <HAL_UART_Transmit+0x11c>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2221      	movs	r2, #33	; 0x21
 8004dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dd2:	f7fc fcf3 	bl	80017bc <HAL_GetTick>
 8004dd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	88fa      	ldrh	r2, [r7, #6]
 8004ddc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	88fa      	ldrh	r2, [r7, #6]
 8004de2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dec:	d108      	bne.n	8004e00 <HAL_UART_Transmit+0x82>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d104      	bne.n	8004e00 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004df6:	2300      	movs	r3, #0
 8004df8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	61bb      	str	r3, [r7, #24]
 8004dfe:	e003      	b.n	8004e08 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e04:	2300      	movs	r3, #0
 8004e06:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004e10:	e02a      	b.n	8004e68 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	2180      	movs	r1, #128	; 0x80
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f000 f840 	bl	8004ea2 <UART_WaitOnFlagUntilTimeout>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d001      	beq.n	8004e2c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e036      	b.n	8004e9a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10b      	bne.n	8004e4a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	461a      	mov	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	3302      	adds	r3, #2
 8004e46:	61bb      	str	r3, [r7, #24]
 8004e48:	e007      	b.n	8004e5a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	781a      	ldrb	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	3301      	adds	r3, #1
 8004e58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1cf      	bne.n	8004e12 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	2140      	movs	r1, #64	; 0x40
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f000 f810 	bl	8004ea2 <UART_WaitOnFlagUntilTimeout>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d001      	beq.n	8004e8c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e006      	b.n	8004e9a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e94:	2300      	movs	r3, #0
 8004e96:	e000      	b.n	8004e9a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e98:	2302      	movs	r3, #2
  }
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3720      	adds	r7, #32
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b090      	sub	sp, #64	; 0x40
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	60f8      	str	r0, [r7, #12]
 8004eaa:	60b9      	str	r1, [r7, #8]
 8004eac:	603b      	str	r3, [r7, #0]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eb2:	e050      	b.n	8004f56 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004eba:	d04c      	beq.n	8004f56 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ebc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d007      	beq.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ec2:	f7fc fc7b 	bl	80017bc <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d241      	bcs.n	8004f56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	330c      	adds	r3, #12
 8004ed8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004edc:	e853 3f00 	ldrex	r3, [r3]
 8004ee0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	330c      	adds	r3, #12
 8004ef0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ef2:	637a      	str	r2, [r7, #52]	; 0x34
 8004ef4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ef8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004efa:	e841 2300 	strex	r3, r2, [r1]
 8004efe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1e5      	bne.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	3314      	adds	r3, #20
 8004f0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	e853 3f00 	ldrex	r3, [r3]
 8004f14:	613b      	str	r3, [r7, #16]
   return(result);
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	f023 0301 	bic.w	r3, r3, #1
 8004f1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3314      	adds	r3, #20
 8004f24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f26:	623a      	str	r2, [r7, #32]
 8004f28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2a:	69f9      	ldr	r1, [r7, #28]
 8004f2c:	6a3a      	ldr	r2, [r7, #32]
 8004f2e:	e841 2300 	strex	r3, r2, [r1]
 8004f32:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1e5      	bne.n	8004f06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2220      	movs	r2, #32
 8004f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e00f      	b.n	8004f76 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	bf0c      	ite	eq
 8004f66:	2301      	moveq	r3, #1
 8004f68:	2300      	movne	r3, #0
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	79fb      	ldrb	r3, [r7, #7]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d09f      	beq.n	8004eb4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3740      	adds	r7, #64	; 0x40
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
	...

08004f80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f84:	b09f      	sub	sp, #124	; 0x7c
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f96:	68d9      	ldr	r1, [r3, #12]
 8004f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	ea40 0301 	orr.w	r3, r0, r1
 8004fa0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa4:	689a      	ldr	r2, [r3, #8]
 8004fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	431a      	orrs	r2, r3
 8004fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004fc4:	f021 010c 	bic.w	r1, r1, #12
 8004fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fce:	430b      	orrs	r3, r1
 8004fd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fde:	6999      	ldr	r1, [r3, #24]
 8004fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	ea40 0301 	orr.w	r3, r0, r1
 8004fe8:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8004fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	4b6a      	ldr	r3, [pc, #424]	; (8005198 <UART_SetConfig+0x218>)
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d00e      	beq.n	8005012 <UART_SetConfig+0x92>
 8004ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	4b68      	ldr	r3, [pc, #416]	; (800519c <UART_SetConfig+0x21c>)
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d009      	beq.n	8005012 <UART_SetConfig+0x92>
 8004ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	4b67      	ldr	r3, [pc, #412]	; (80051a0 <UART_SetConfig+0x220>)
 8005004:	429a      	cmp	r2, r3
 8005006:	d004      	beq.n	8005012 <UART_SetConfig+0x92>
 8005008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	4b65      	ldr	r3, [pc, #404]	; (80051a4 <UART_SetConfig+0x224>)
 800500e:	429a      	cmp	r2, r3
 8005010:	d103      	bne.n	800501a <UART_SetConfig+0x9a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005012:	f7fe ff43 	bl	8003e9c <HAL_RCC_GetPCLK2Freq>
 8005016:	6778      	str	r0, [r7, #116]	; 0x74
 8005018:	e002      	b.n	8005020 <UART_SetConfig+0xa0>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800501a:	f7fe ff2b 	bl	8003e74 <HAL_RCC_GetPCLK1Freq>
 800501e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005022:	69db      	ldr	r3, [r3, #28]
 8005024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005028:	f040 80c0 	bne.w	80051ac <UART_SetConfig+0x22c>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800502c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800502e:	461c      	mov	r4, r3
 8005030:	f04f 0500 	mov.w	r5, #0
 8005034:	4622      	mov	r2, r4
 8005036:	462b      	mov	r3, r5
 8005038:	1891      	adds	r1, r2, r2
 800503a:	6439      	str	r1, [r7, #64]	; 0x40
 800503c:	415b      	adcs	r3, r3
 800503e:	647b      	str	r3, [r7, #68]	; 0x44
 8005040:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005044:	1912      	adds	r2, r2, r4
 8005046:	eb45 0303 	adc.w	r3, r5, r3
 800504a:	f04f 0000 	mov.w	r0, #0
 800504e:	f04f 0100 	mov.w	r1, #0
 8005052:	00d9      	lsls	r1, r3, #3
 8005054:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005058:	00d0      	lsls	r0, r2, #3
 800505a:	4602      	mov	r2, r0
 800505c:	460b      	mov	r3, r1
 800505e:	1911      	adds	r1, r2, r4
 8005060:	6639      	str	r1, [r7, #96]	; 0x60
 8005062:	416b      	adcs	r3, r5
 8005064:	667b      	str	r3, [r7, #100]	; 0x64
 8005066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	461a      	mov	r2, r3
 800506c:	f04f 0300 	mov.w	r3, #0
 8005070:	1891      	adds	r1, r2, r2
 8005072:	63b9      	str	r1, [r7, #56]	; 0x38
 8005074:	415b      	adcs	r3, r3
 8005076:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005078:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800507c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005080:	f7fb f8ca 	bl	8000218 <__aeabi_uldivmod>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4b47      	ldr	r3, [pc, #284]	; (80051a8 <UART_SetConfig+0x228>)
 800508a:	fba3 2302 	umull	r2, r3, r3, r2
 800508e:	095b      	lsrs	r3, r3, #5
 8005090:	011e      	lsls	r6, r3, #4
 8005092:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005094:	461c      	mov	r4, r3
 8005096:	f04f 0500 	mov.w	r5, #0
 800509a:	4622      	mov	r2, r4
 800509c:	462b      	mov	r3, r5
 800509e:	1891      	adds	r1, r2, r2
 80050a0:	6339      	str	r1, [r7, #48]	; 0x30
 80050a2:	415b      	adcs	r3, r3
 80050a4:	637b      	str	r3, [r7, #52]	; 0x34
 80050a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80050aa:	1912      	adds	r2, r2, r4
 80050ac:	eb45 0303 	adc.w	r3, r5, r3
 80050b0:	f04f 0000 	mov.w	r0, #0
 80050b4:	f04f 0100 	mov.w	r1, #0
 80050b8:	00d9      	lsls	r1, r3, #3
 80050ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050be:	00d0      	lsls	r0, r2, #3
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	1911      	adds	r1, r2, r4
 80050c6:	65b9      	str	r1, [r7, #88]	; 0x58
 80050c8:	416b      	adcs	r3, r5
 80050ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	461a      	mov	r2, r3
 80050d2:	f04f 0300 	mov.w	r3, #0
 80050d6:	1891      	adds	r1, r2, r2
 80050d8:	62b9      	str	r1, [r7, #40]	; 0x28
 80050da:	415b      	adcs	r3, r3
 80050dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050e2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80050e6:	f7fb f897 	bl	8000218 <__aeabi_uldivmod>
 80050ea:	4602      	mov	r2, r0
 80050ec:	460b      	mov	r3, r1
 80050ee:	4b2e      	ldr	r3, [pc, #184]	; (80051a8 <UART_SetConfig+0x228>)
 80050f0:	fba3 1302 	umull	r1, r3, r3, r2
 80050f4:	095b      	lsrs	r3, r3, #5
 80050f6:	2164      	movs	r1, #100	; 0x64
 80050f8:	fb01 f303 	mul.w	r3, r1, r3
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	3332      	adds	r3, #50	; 0x32
 8005102:	4a29      	ldr	r2, [pc, #164]	; (80051a8 <UART_SetConfig+0x228>)
 8005104:	fba2 2303 	umull	r2, r3, r2, r3
 8005108:	095b      	lsrs	r3, r3, #5
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005110:	441e      	add	r6, r3
 8005112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005114:	4618      	mov	r0, r3
 8005116:	f04f 0100 	mov.w	r1, #0
 800511a:	4602      	mov	r2, r0
 800511c:	460b      	mov	r3, r1
 800511e:	1894      	adds	r4, r2, r2
 8005120:	623c      	str	r4, [r7, #32]
 8005122:	415b      	adcs	r3, r3
 8005124:	627b      	str	r3, [r7, #36]	; 0x24
 8005126:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800512a:	1812      	adds	r2, r2, r0
 800512c:	eb41 0303 	adc.w	r3, r1, r3
 8005130:	f04f 0400 	mov.w	r4, #0
 8005134:	f04f 0500 	mov.w	r5, #0
 8005138:	00dd      	lsls	r5, r3, #3
 800513a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800513e:	00d4      	lsls	r4, r2, #3
 8005140:	4622      	mov	r2, r4
 8005142:	462b      	mov	r3, r5
 8005144:	1814      	adds	r4, r2, r0
 8005146:	653c      	str	r4, [r7, #80]	; 0x50
 8005148:	414b      	adcs	r3, r1
 800514a:	657b      	str	r3, [r7, #84]	; 0x54
 800514c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	461a      	mov	r2, r3
 8005152:	f04f 0300 	mov.w	r3, #0
 8005156:	1891      	adds	r1, r2, r2
 8005158:	61b9      	str	r1, [r7, #24]
 800515a:	415b      	adcs	r3, r3
 800515c:	61fb      	str	r3, [r7, #28]
 800515e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005162:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005166:	f7fb f857 	bl	8000218 <__aeabi_uldivmod>
 800516a:	4602      	mov	r2, r0
 800516c:	460b      	mov	r3, r1
 800516e:	4b0e      	ldr	r3, [pc, #56]	; (80051a8 <UART_SetConfig+0x228>)
 8005170:	fba3 1302 	umull	r1, r3, r3, r2
 8005174:	095b      	lsrs	r3, r3, #5
 8005176:	2164      	movs	r1, #100	; 0x64
 8005178:	fb01 f303 	mul.w	r3, r1, r3
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	3332      	adds	r3, #50	; 0x32
 8005182:	4a09      	ldr	r2, [pc, #36]	; (80051a8 <UART_SetConfig+0x228>)
 8005184:	fba2 2303 	umull	r2, r3, r2, r3
 8005188:	095b      	lsrs	r3, r3, #5
 800518a:	f003 0207 	and.w	r2, r3, #7
 800518e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4432      	add	r2, r6
 8005194:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005196:	e0c3      	b.n	8005320 <UART_SetConfig+0x3a0>
 8005198:	40011000 	.word	0x40011000
 800519c:	40011400 	.word	0x40011400
 80051a0:	40011800 	.word	0x40011800
 80051a4:	40011c00 	.word	0x40011c00
 80051a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051ae:	461c      	mov	r4, r3
 80051b0:	f04f 0500 	mov.w	r5, #0
 80051b4:	4622      	mov	r2, r4
 80051b6:	462b      	mov	r3, r5
 80051b8:	1891      	adds	r1, r2, r2
 80051ba:	6139      	str	r1, [r7, #16]
 80051bc:	415b      	adcs	r3, r3
 80051be:	617b      	str	r3, [r7, #20]
 80051c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80051c4:	1912      	adds	r2, r2, r4
 80051c6:	eb45 0303 	adc.w	r3, r5, r3
 80051ca:	f04f 0000 	mov.w	r0, #0
 80051ce:	f04f 0100 	mov.w	r1, #0
 80051d2:	00d9      	lsls	r1, r3, #3
 80051d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051d8:	00d0      	lsls	r0, r2, #3
 80051da:	4602      	mov	r2, r0
 80051dc:	460b      	mov	r3, r1
 80051de:	eb12 0804 	adds.w	r8, r2, r4
 80051e2:	eb43 0905 	adc.w	r9, r3, r5
 80051e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f04f 0100 	mov.w	r1, #0
 80051f0:	f04f 0200 	mov.w	r2, #0
 80051f4:	f04f 0300 	mov.w	r3, #0
 80051f8:	008b      	lsls	r3, r1, #2
 80051fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80051fe:	0082      	lsls	r2, r0, #2
 8005200:	4640      	mov	r0, r8
 8005202:	4649      	mov	r1, r9
 8005204:	f7fb f808 	bl	8000218 <__aeabi_uldivmod>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	4b47      	ldr	r3, [pc, #284]	; (800532c <UART_SetConfig+0x3ac>)
 800520e:	fba3 2302 	umull	r2, r3, r3, r2
 8005212:	095b      	lsrs	r3, r3, #5
 8005214:	011e      	lsls	r6, r3, #4
 8005216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005218:	4618      	mov	r0, r3
 800521a:	f04f 0100 	mov.w	r1, #0
 800521e:	4602      	mov	r2, r0
 8005220:	460b      	mov	r3, r1
 8005222:	1894      	adds	r4, r2, r2
 8005224:	60bc      	str	r4, [r7, #8]
 8005226:	415b      	adcs	r3, r3
 8005228:	60fb      	str	r3, [r7, #12]
 800522a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800522e:	1812      	adds	r2, r2, r0
 8005230:	eb41 0303 	adc.w	r3, r1, r3
 8005234:	f04f 0400 	mov.w	r4, #0
 8005238:	f04f 0500 	mov.w	r5, #0
 800523c:	00dd      	lsls	r5, r3, #3
 800523e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005242:	00d4      	lsls	r4, r2, #3
 8005244:	4622      	mov	r2, r4
 8005246:	462b      	mov	r3, r5
 8005248:	1814      	adds	r4, r2, r0
 800524a:	64bc      	str	r4, [r7, #72]	; 0x48
 800524c:	414b      	adcs	r3, r1
 800524e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	4618      	mov	r0, r3
 8005256:	f04f 0100 	mov.w	r1, #0
 800525a:	f04f 0200 	mov.w	r2, #0
 800525e:	f04f 0300 	mov.w	r3, #0
 8005262:	008b      	lsls	r3, r1, #2
 8005264:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005268:	0082      	lsls	r2, r0, #2
 800526a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800526e:	f7fa ffd3 	bl	8000218 <__aeabi_uldivmod>
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	4b2d      	ldr	r3, [pc, #180]	; (800532c <UART_SetConfig+0x3ac>)
 8005278:	fba3 1302 	umull	r1, r3, r3, r2
 800527c:	095b      	lsrs	r3, r3, #5
 800527e:	2164      	movs	r1, #100	; 0x64
 8005280:	fb01 f303 	mul.w	r3, r1, r3
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	011b      	lsls	r3, r3, #4
 8005288:	3332      	adds	r3, #50	; 0x32
 800528a:	4a28      	ldr	r2, [pc, #160]	; (800532c <UART_SetConfig+0x3ac>)
 800528c:	fba2 2303 	umull	r2, r3, r2, r3
 8005290:	095b      	lsrs	r3, r3, #5
 8005292:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005296:	441e      	add	r6, r3
 8005298:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800529a:	4618      	mov	r0, r3
 800529c:	f04f 0100 	mov.w	r1, #0
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	1894      	adds	r4, r2, r2
 80052a6:	603c      	str	r4, [r7, #0]
 80052a8:	415b      	adcs	r3, r3
 80052aa:	607b      	str	r3, [r7, #4]
 80052ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052b0:	1812      	adds	r2, r2, r0
 80052b2:	eb41 0303 	adc.w	r3, r1, r3
 80052b6:	f04f 0400 	mov.w	r4, #0
 80052ba:	f04f 0500 	mov.w	r5, #0
 80052be:	00dd      	lsls	r5, r3, #3
 80052c0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80052c4:	00d4      	lsls	r4, r2, #3
 80052c6:	4622      	mov	r2, r4
 80052c8:	462b      	mov	r3, r5
 80052ca:	eb12 0a00 	adds.w	sl, r2, r0
 80052ce:	eb43 0b01 	adc.w	fp, r3, r1
 80052d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f04f 0100 	mov.w	r1, #0
 80052dc:	f04f 0200 	mov.w	r2, #0
 80052e0:	f04f 0300 	mov.w	r3, #0
 80052e4:	008b      	lsls	r3, r1, #2
 80052e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052ea:	0082      	lsls	r2, r0, #2
 80052ec:	4650      	mov	r0, sl
 80052ee:	4659      	mov	r1, fp
 80052f0:	f7fa ff92 	bl	8000218 <__aeabi_uldivmod>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	4b0c      	ldr	r3, [pc, #48]	; (800532c <UART_SetConfig+0x3ac>)
 80052fa:	fba3 1302 	umull	r1, r3, r3, r2
 80052fe:	095b      	lsrs	r3, r3, #5
 8005300:	2164      	movs	r1, #100	; 0x64
 8005302:	fb01 f303 	mul.w	r3, r1, r3
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	011b      	lsls	r3, r3, #4
 800530a:	3332      	adds	r3, #50	; 0x32
 800530c:	4a07      	ldr	r2, [pc, #28]	; (800532c <UART_SetConfig+0x3ac>)
 800530e:	fba2 2303 	umull	r2, r3, r2, r3
 8005312:	095b      	lsrs	r3, r3, #5
 8005314:	f003 020f 	and.w	r2, r3, #15
 8005318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4432      	add	r2, r6
 800531e:	609a      	str	r2, [r3, #8]
}
 8005320:	bf00      	nop
 8005322:	377c      	adds	r7, #124	; 0x7c
 8005324:	46bd      	mov	sp, r7
 8005326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800532a:	bf00      	nop
 800532c:	51eb851f 	.word	0x51eb851f

08005330 <__libc_init_array>:
 8005330:	b570      	push	{r4, r5, r6, lr}
 8005332:	4d0d      	ldr	r5, [pc, #52]	; (8005368 <__libc_init_array+0x38>)
 8005334:	4c0d      	ldr	r4, [pc, #52]	; (800536c <__libc_init_array+0x3c>)
 8005336:	1b64      	subs	r4, r4, r5
 8005338:	10a4      	asrs	r4, r4, #2
 800533a:	2600      	movs	r6, #0
 800533c:	42a6      	cmp	r6, r4
 800533e:	d109      	bne.n	8005354 <__libc_init_array+0x24>
 8005340:	4d0b      	ldr	r5, [pc, #44]	; (8005370 <__libc_init_array+0x40>)
 8005342:	4c0c      	ldr	r4, [pc, #48]	; (8005374 <__libc_init_array+0x44>)
 8005344:	f000 f820 	bl	8005388 <_init>
 8005348:	1b64      	subs	r4, r4, r5
 800534a:	10a4      	asrs	r4, r4, #2
 800534c:	2600      	movs	r6, #0
 800534e:	42a6      	cmp	r6, r4
 8005350:	d105      	bne.n	800535e <__libc_init_array+0x2e>
 8005352:	bd70      	pop	{r4, r5, r6, pc}
 8005354:	f855 3b04 	ldr.w	r3, [r5], #4
 8005358:	4798      	blx	r3
 800535a:	3601      	adds	r6, #1
 800535c:	e7ee      	b.n	800533c <__libc_init_array+0xc>
 800535e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005362:	4798      	blx	r3
 8005364:	3601      	adds	r6, #1
 8005366:	e7f2      	b.n	800534e <__libc_init_array+0x1e>
 8005368:	080053d0 	.word	0x080053d0
 800536c:	080053d0 	.word	0x080053d0
 8005370:	080053d0 	.word	0x080053d0
 8005374:	080053d4 	.word	0x080053d4

08005378 <memset>:
 8005378:	4402      	add	r2, r0
 800537a:	4603      	mov	r3, r0
 800537c:	4293      	cmp	r3, r2
 800537e:	d100      	bne.n	8005382 <memset+0xa>
 8005380:	4770      	bx	lr
 8005382:	f803 1b01 	strb.w	r1, [r3], #1
 8005386:	e7f9      	b.n	800537c <memset+0x4>

08005388 <_init>:
 8005388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538a:	bf00      	nop
 800538c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800538e:	bc08      	pop	{r3}
 8005390:	469e      	mov	lr, r3
 8005392:	4770      	bx	lr

08005394 <_fini>:
 8005394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005396:	bf00      	nop
 8005398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800539a:	bc08      	pop	{r3}
 800539c:	469e      	mov	lr, r3
 800539e:	4770      	bx	lr
